// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Domain extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Domain entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Domain must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Domain", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Domain | null {
    return changetype<Domain | null>(store.get_in_block("Domain", id));
  }

  static load(id: string): Domain | null {
    return changetype<Domain | null>(store.get("Domain", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get labelName(): string | null {
    let value = this.get("labelName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set labelName(value: string | null) {
    if (!value) {
      this.unset("labelName");
    } else {
      this.set("labelName", Value.fromString(<string>value));
    }
  }

  get labelhash(): Bytes | null {
    let value = this.get("labelhash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set labelhash(value: Bytes | null) {
    if (!value) {
      this.unset("labelhash");
    } else {
      this.set("labelhash", Value.fromBytes(<Bytes>value));
    }
  }

  get parent(): string | null {
    let value = this.get("parent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parent(value: string | null) {
    if (!value) {
      this.unset("parent");
    } else {
      this.set("parent", Value.fromString(<string>value));
    }
  }

  get subdomains(): DomainLoader {
    return new DomainLoader("Domain", this.get("id")!.toString(), "subdomains");
  }

  get subdomainCount(): i32 {
    let value = this.get("subdomainCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set subdomainCount(value: i32) {
    this.set("subdomainCount", Value.fromI32(value));
  }

  get resolvedAddress(): string | null {
    let value = this.get("resolvedAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set resolvedAddress(value: string | null) {
    if (!value) {
      this.unset("resolvedAddress");
    } else {
      this.set("resolvedAddress", Value.fromString(<string>value));
    }
  }

  get resolver(): string | null {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set resolver(value: string | null) {
    if (!value) {
      this.unset("resolver");
    } else {
      this.set("resolver", Value.fromString(<string>value));
    }
  }

  get ttl(): BigInt | null {
    let value = this.get("ttl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ttl(value: BigInt | null) {
    if (!value) {
      this.unset("ttl");
    } else {
      this.set("ttl", Value.fromBigInt(<BigInt>value));
    }
  }

  get isMigrated(): boolean {
    let value = this.get("isMigrated");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isMigrated(value: boolean) {
    this.set("isMigrated", Value.fromBoolean(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get registrant(): string | null {
    let value = this.get("registrant");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set registrant(value: string | null) {
    if (!value) {
      this.unset("registrant");
    } else {
      this.set("registrant", Value.fromString(<string>value));
    }
  }

  get wrappedOwner(): string | null {
    let value = this.get("wrappedOwner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set wrappedOwner(value: string | null) {
    if (!value) {
      this.unset("wrappedOwner");
    } else {
      this.set("wrappedOwner", Value.fromString(<string>value));
    }
  }

  get expiryDate(): BigInt | null {
    let value = this.get("expiryDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expiryDate(value: BigInt | null) {
    if (!value) {
      this.unset("expiryDate");
    } else {
      this.set("expiryDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get registration(): RegistrationLoader {
    return new RegistrationLoader(
      "Domain",
      this.get("id")!.toString(),
      "registration",
    );
  }

  get wrappedDomain(): WrappedDomainLoader {
    return new WrappedDomainLoader(
      "Domain",
      this.get("id")!.toString(),
      "wrappedDomain",
    );
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get_in_block("Transfer", id));
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class NewOwner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewOwner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NewOwner must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NewOwner", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NewOwner | null {
    return changetype<NewOwner | null>(store.get_in_block("NewOwner", id));
  }

  static load(id: string): NewOwner | null {
    return changetype<NewOwner | null>(store.get("NewOwner", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get parentDomain(): string {
    let value = this.get("parentDomain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set parentDomain(value: string) {
    this.set("parentDomain", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class NewResolver extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewResolver entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NewResolver must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NewResolver", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NewResolver | null {
    return changetype<NewResolver | null>(
      store.get_in_block("NewResolver", id),
    );
  }

  static load(id: string): NewResolver | null {
    return changetype<NewResolver | null>(store.get("NewResolver", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }
}

export class NewTTL extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewTTL entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NewTTL must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NewTTL", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NewTTL | null {
    return changetype<NewTTL | null>(store.get_in_block("NewTTL", id));
  }

  static load(id: string): NewTTL | null {
    return changetype<NewTTL | null>(store.get("NewTTL", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get ttl(): BigInt {
    let value = this.get("ttl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ttl(value: BigInt) {
    this.set("ttl", Value.fromBigInt(value));
  }
}

export class WrappedTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WrappedTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WrappedTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("WrappedTransfer", id.toString(), this);
    }
  }

  static loadInBlock(id: string): WrappedTransfer | null {
    return changetype<WrappedTransfer | null>(
      store.get_in_block("WrappedTransfer", id),
    );
  }

  static load(id: string): WrappedTransfer | null {
    return changetype<WrappedTransfer | null>(store.get("WrappedTransfer", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class NameWrapped extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NameWrapped entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NameWrapped must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NameWrapped", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NameWrapped | null {
    return changetype<NameWrapped | null>(
      store.get_in_block("NameWrapped", id),
    );
  }

  static load(id: string): NameWrapped | null {
    return changetype<NameWrapped | null>(store.get("NameWrapped", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get fuses(): i32 {
    let value = this.get("fuses");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set fuses(value: i32) {
    this.set("fuses", Value.fromI32(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get expiryDate(): BigInt {
    let value = this.get("expiryDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set expiryDate(value: BigInt) {
    this.set("expiryDate", Value.fromBigInt(value));
  }
}

export class NameUnwrapped extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NameUnwrapped entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NameUnwrapped must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NameUnwrapped", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NameUnwrapped | null {
    return changetype<NameUnwrapped | null>(
      store.get_in_block("NameUnwrapped", id),
    );
  }

  static load(id: string): NameUnwrapped | null {
    return changetype<NameUnwrapped | null>(store.get("NameUnwrapped", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class FusesSet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FusesSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FusesSet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("FusesSet", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FusesSet | null {
    return changetype<FusesSet | null>(store.get_in_block("FusesSet", id));
  }

  static load(id: string): FusesSet | null {
    return changetype<FusesSet | null>(store.get("FusesSet", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get fuses(): i32 {
    let value = this.get("fuses");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set fuses(value: i32) {
    this.set("fuses", Value.fromI32(value));
  }
}

export class ExpiryExtended extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExpiryExtended entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExpiryExtended must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ExpiryExtended", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ExpiryExtended | null {
    return changetype<ExpiryExtended | null>(
      store.get_in_block("ExpiryExtended", id),
    );
  }

  static load(id: string): ExpiryExtended | null {
    return changetype<ExpiryExtended | null>(store.get("ExpiryExtended", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get expiryDate(): BigInt {
    let value = this.get("expiryDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set expiryDate(value: BigInt) {
    this.set("expiryDate", Value.fromBigInt(value));
  }
}

export class Registration extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Registration entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Registration must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Registration", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Registration | null {
    return changetype<Registration | null>(
      store.get_in_block("Registration", id),
    );
  }

  static load(id: string): Registration | null {
    return changetype<Registration | null>(store.get("Registration", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get registrationDate(): BigInt {
    let value = this.get("registrationDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set registrationDate(value: BigInt) {
    this.set("registrationDate", Value.fromBigInt(value));
  }

  get expiryDate(): BigInt {
    let value = this.get("expiryDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set expiryDate(value: BigInt) {
    this.set("expiryDate", Value.fromBigInt(value));
  }

  get cost(): BigInt | null {
    let value = this.get("cost");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cost(value: BigInt | null) {
    if (!value) {
      this.unset("cost");
    } else {
      this.set("cost", Value.fromBigInt(<BigInt>value));
    }
  }

  get registrant(): string {
    let value = this.get("registrant");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set registrant(value: string) {
    this.set("registrant", Value.fromString(value));
  }

  get labelName(): string | null {
    let value = this.get("labelName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set labelName(value: string | null) {
    if (!value) {
      this.unset("labelName");
    } else {
      this.set("labelName", Value.fromString(<string>value));
    }
  }
}

export class NameRegistered extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NameRegistered entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NameRegistered must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NameRegistered", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NameRegistered | null {
    return changetype<NameRegistered | null>(
      store.get_in_block("NameRegistered", id),
    );
  }

  static load(id: string): NameRegistered | null {
    return changetype<NameRegistered | null>(store.get("NameRegistered", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registration(): string {
    let value = this.get("registration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set registration(value: string) {
    this.set("registration", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get registrant(): string {
    let value = this.get("registrant");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set registrant(value: string) {
    this.set("registrant", Value.fromString(value));
  }

  get expiryDate(): BigInt {
    let value = this.get("expiryDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set expiryDate(value: BigInt) {
    this.set("expiryDate", Value.fromBigInt(value));
  }
}

export class NameRenewed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NameRenewed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NameRenewed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NameRenewed", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NameRenewed | null {
    return changetype<NameRenewed | null>(
      store.get_in_block("NameRenewed", id),
    );
  }

  static load(id: string): NameRenewed | null {
    return changetype<NameRenewed | null>(store.get("NameRenewed", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registration(): string {
    let value = this.get("registration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set registration(value: string) {
    this.set("registration", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get expiryDate(): BigInt {
    let value = this.get("expiryDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set expiryDate(value: BigInt) {
    this.set("expiryDate", Value.fromBigInt(value));
  }
}

export class NameTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NameTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NameTransferred must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NameTransferred", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NameTransferred | null {
    return changetype<NameTransferred | null>(
      store.get_in_block("NameTransferred", id),
    );
  }

  static load(id: string): NameTransferred | null {
    return changetype<NameTransferred | null>(store.get("NameTransferred", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registration(): string {
    let value = this.get("registration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set registration(value: string) {
    this.set("registration", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get newOwner(): string {
    let value = this.get("newOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set newOwner(value: string) {
    this.set("newOwner", Value.fromString(value));
  }
}

export class WrappedDomain extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WrappedDomain entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WrappedDomain must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("WrappedDomain", id.toString(), this);
    }
  }

  static loadInBlock(id: string): WrappedDomain | null {
    return changetype<WrappedDomain | null>(
      store.get_in_block("WrappedDomain", id),
    );
  }

  static load(id: string): WrappedDomain | null {
    return changetype<WrappedDomain | null>(store.get("WrappedDomain", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string {
    let value = this.get("domain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set domain(value: string) {
    this.set("domain", Value.fromString(value));
  }

  get expiryDate(): BigInt {
    let value = this.get("expiryDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set expiryDate(value: BigInt) {
    this.set("expiryDate", Value.fromBigInt(value));
  }

  get fuses(): i32 {
    let value = this.get("fuses");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set fuses(value: i32) {
    this.set("fuses", Value.fromI32(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Account", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Account | null {
    return changetype<Account | null>(store.get_in_block("Account", id));
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domains(): DomainLoader {
    return new DomainLoader("Account", this.get("id")!.toString(), "domains");
  }

  get wrappedDomains(): WrappedDomainLoader {
    return new WrappedDomainLoader(
      "Account",
      this.get("id")!.toString(),
      "wrappedDomains",
    );
  }

  get registrations(): RegistrationLoader {
    return new RegistrationLoader(
      "Account",
      this.get("id")!.toString(),
      "registrations",
    );
  }
}

export class Resolver extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Resolver entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Resolver must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Resolver", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Resolver | null {
    return changetype<Resolver | null>(store.get_in_block("Resolver", id));
  }

  static load(id: string): Resolver | null {
    return changetype<Resolver | null>(store.get("Resolver", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string | null {
    let value = this.get("domain");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set domain(value: string | null) {
    if (!value) {
      this.unset("domain");
    } else {
      this.set("domain", Value.fromString(<string>value));
    }
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get addr(): string | null {
    let value = this.get("addr");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set addr(value: string | null) {
    if (!value) {
      this.unset("addr");
    } else {
      this.set("addr", Value.fromString(<string>value));
    }
  }

  get contentHash(): Bytes | null {
    let value = this.get("contentHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set contentHash(value: Bytes | null) {
    if (!value) {
      this.unset("contentHash");
    } else {
      this.set("contentHash", Value.fromBytes(<Bytes>value));
    }
  }

  get texts(): Array<string> | null {
    let value = this.get("texts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set texts(value: Array<string> | null) {
    if (!value) {
      this.unset("texts");
    } else {
      this.set("texts", Value.fromStringArray(<Array<string>>value));
    }
  }

  get coinTypes(): Array<BigInt> | null {
    let value = this.get("coinTypes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set coinTypes(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("coinTypes");
    } else {
      this.set("coinTypes", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }
}

export class AddrChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddrChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AddrChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AddrChanged", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AddrChanged | null {
    return changetype<AddrChanged | null>(
      store.get_in_block("AddrChanged", id),
    );
  }

  static load(id: string): AddrChanged | null {
    return changetype<AddrChanged | null>(store.get("AddrChanged", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get addr(): string {
    let value = this.get("addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set addr(value: string) {
    this.set("addr", Value.fromString(value));
  }
}

export class MulticoinAddrChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MulticoinAddrChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MulticoinAddrChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MulticoinAddrChanged", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MulticoinAddrChanged | null {
    return changetype<MulticoinAddrChanged | null>(
      store.get_in_block("MulticoinAddrChanged", id),
    );
  }

  static load(id: string): MulticoinAddrChanged | null {
    return changetype<MulticoinAddrChanged | null>(
      store.get("MulticoinAddrChanged", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get coinType(): BigInt {
    let value = this.get("coinType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set coinType(value: BigInt) {
    this.set("coinType", Value.fromBigInt(value));
  }

  get addr(): Bytes {
    let value = this.get("addr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set addr(value: Bytes) {
    this.set("addr", Value.fromBytes(value));
  }
}

export class NameChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NameChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NameChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NameChanged", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NameChanged | null {
    return changetype<NameChanged | null>(
      store.get_in_block("NameChanged", id),
    );
  }

  static load(id: string): NameChanged | null {
    return changetype<NameChanged | null>(store.get("NameChanged", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }
}

export class AbiChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AbiChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AbiChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AbiChanged", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AbiChanged | null {
    return changetype<AbiChanged | null>(store.get_in_block("AbiChanged", id));
  }

  static load(id: string): AbiChanged | null {
    return changetype<AbiChanged | null>(store.get("AbiChanged", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get contentType(): BigInt {
    let value = this.get("contentType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set contentType(value: BigInt) {
    this.set("contentType", Value.fromBigInt(value));
  }
}

export class PubkeyChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PubkeyChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PubkeyChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PubkeyChanged", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PubkeyChanged | null {
    return changetype<PubkeyChanged | null>(
      store.get_in_block("PubkeyChanged", id),
    );
  }

  static load(id: string): PubkeyChanged | null {
    return changetype<PubkeyChanged | null>(store.get("PubkeyChanged", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get x(): Bytes {
    let value = this.get("x");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set x(value: Bytes) {
    this.set("x", Value.fromBytes(value));
  }

  get y(): Bytes {
    let value = this.get("y");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set y(value: Bytes) {
    this.set("y", Value.fromBytes(value));
  }
}

export class TextChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TextChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TextChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TextChanged", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TextChanged | null {
    return changetype<TextChanged | null>(
      store.get_in_block("TextChanged", id),
    );
  }

  static load(id: string): TextChanged | null {
    return changetype<TextChanged | null>(store.get("TextChanged", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get key(): string {
    let value = this.get("key");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set key(value: string) {
    this.set("key", Value.fromString(value));
  }

  get value(): string | null {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set value(value: string | null) {
    if (!value) {
      this.unset("value");
    } else {
      this.set("value", Value.fromString(<string>value));
    }
  }
}

export class ContenthashChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ContenthashChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ContenthashChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ContenthashChanged", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ContenthashChanged | null {
    return changetype<ContenthashChanged | null>(
      store.get_in_block("ContenthashChanged", id),
    );
  }

  static load(id: string): ContenthashChanged | null {
    return changetype<ContenthashChanged | null>(
      store.get("ContenthashChanged", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }
}

export class InterfaceChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InterfaceChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type InterfaceChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("InterfaceChanged", id.toString(), this);
    }
  }

  static loadInBlock(id: string): InterfaceChanged | null {
    return changetype<InterfaceChanged | null>(
      store.get_in_block("InterfaceChanged", id),
    );
  }

  static load(id: string): InterfaceChanged | null {
    return changetype<InterfaceChanged | null>(
      store.get("InterfaceChanged", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get interfaceID(): Bytes {
    let value = this.get("interfaceID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set interfaceID(value: Bytes) {
    this.set("interfaceID", Value.fromBytes(value));
  }

  get implementer(): Bytes {
    let value = this.get("implementer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set implementer(value: Bytes) {
    this.set("implementer", Value.fromBytes(value));
  }
}

export class AuthorisationChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuthorisationChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuthorisationChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AuthorisationChanged", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AuthorisationChanged | null {
    return changetype<AuthorisationChanged | null>(
      store.get_in_block("AuthorisationChanged", id),
    );
  }

  static load(id: string): AuthorisationChanged | null {
    return changetype<AuthorisationChanged | null>(
      store.get("AuthorisationChanged", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get isAuthorized(): boolean {
    let value = this.get("isAuthorized");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isAuthorized(value: boolean) {
    this.set("isAuthorized", Value.fromBoolean(value));
  }
}

export class VersionChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VersionChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VersionChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("VersionChanged", id.toString(), this);
    }
  }

  static loadInBlock(id: string): VersionChanged | null {
    return changetype<VersionChanged | null>(
      store.get_in_block("VersionChanged", id),
    );
  }

  static load(id: string): VersionChanged | null {
    return changetype<VersionChanged | null>(store.get("VersionChanged", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get transactionID(): Bytes {
    let value = this.get("transactionID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionID(value: Bytes) {
    this.set("transactionID", Value.fromBytes(value));
  }

  get version(): BigInt {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set version(value: BigInt) {
    this.set("version", Value.fromBigInt(value));
  }
}

export class DomainLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Domain[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Domain[]>(value);
  }
}

export class RegistrationLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Registration[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Registration[]>(value);
  }
}

export class WrappedDomainLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): WrappedDomain[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<WrappedDomain[]>(value);
  }
}
