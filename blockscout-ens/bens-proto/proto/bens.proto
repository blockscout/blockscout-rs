syntax = "proto3";

package blockscout.bens.v1;

option go_package = "github.com/blockscout/blockscout-rs/bens";

service DomainsExtractor {
  rpc GetDomain(GetDomainRequest) returns (Domain) {}
  rpc ListDomainEvents(ListDomainEventsRequest) returns (ListDomainEventsResponse) {}

  rpc ResolveDomainName(ResolveDomainNameRequest) returns (ResolveDomainNameResponse) {}
  rpc BatchResolveDomainNames(BatchResolveDomainNamesRequest) returns (BatchResolveDomainNamesResponse) {}

  rpc ResolveAddress(ResolveAddressRequest) returns (ResolveAddressResponse) {}
  rpc BatchResolveAddresses(BatchResolveAddressesRequest) returns (BatchResolveAddressesResponse) {}
}

message Domain {
  // Unique id for the domain, also known as nodehash
  string id = 1;
  // The human readable name, if known. Unknown portions replaced with hash in square brackets (eg, foo.[1234].eth)
  string name = 2;
  // Integer representation of labelhash
  uint64 token_id = 3;
  // The account that owns the domain
  string owner = 4;
  // Optinal. Resolved address of this domain
  optional string resolved_address = 5;
  // Optinal. The account that owns the ERC721 NFT for the domain
  optional string registrant = 6;
  // Optinal. Unix timestamp of expiry date. None means never expires
  optional uint64 expiry_date = 7;
  // Unix timestamp of regisration date
  uint64 registration_date = 8;
  // Map chain -> resolved_address that contains other blockchain addresses.
  // This map will contain `current_chain_id` -> `resovled_address` if `resovled_address` is not None
  map<string, string> other_addresses = 9;
}

message DomainEvent {
  // Transaction hash where action occured
  string transaction_hash = 1;
  // Timestamp of this transaction
  uint64 timestamp = 2;
  ///Sender of transaction
  string from_address = 3;
  // Optinal. Action name
  optional string action = 4;
}


enum DomainView {
  // The default / unset value.
  // The API will default to the BASIC view.
  DOMAIN_VIEW_UNSPECIFIED = 0;

  // Include basic metadata about the domain, but not the full contents.
  // (id, name, resolved_address, expiry_date)
  DOMAIN_VIEW_BASIC = 1;

  // Include everything.
  // This is the default value.
  DOMAIN_VIEW_FULL = 2;
}

/************************************************/

message GetDomainRequest {
  // Unique id for the domain, also known as nodehash
  string id = 1;
  // The chain (network) where domain search should be done
  uint64 chain_id = 2;
  // Specifies how much information about domain should be returned.
  DomainView domain_view = 3;
}

message ListDomainEventsRequest {
  // Unique id for the domain, also known as nodehash
  string domain_id = 1;
  // The chain (network) where domain search should be done
  uint64 chain_id = 2;
}

message ListDomainEventsResponse {
  repeated DomainEvent domain_events = 1;
}

message ResolveDomainNameRequest {
  // Name of domain, for example vitalik.eth
  string name = 1;
  // The chain (network) where domain search should be done
  uint64 chain_id = 2;
  // Specifies how much information about domain should be returned.
  DomainView domain_view = 3;
}

message ResolveDomainNameResponse {
  // Basic domain info.
  // May be empty in case if domain name haven't been resolved.
  // The caller should check that `domain.id` is not zero.
  Domain domain = 1;
  // List of domain events. Is empty, if BASIC domain view have been requested.
  repeated DomainEvent domain_events = 2;
}

message BatchResolveDomainNamesRequest {
  // List of requested domain names
  repeated string names = 1;
  // The chain (network) where domain search should be done
  string chain_id = 2;
  // Specifies how much information about domains should be returned.
  DomainView domain_view = 3;
}

message BatchResolveDomainNamesResponse {
  map<string, Domain> domains = 1;
}

message ResolveAddressRequest {
  // Address of EOA or contract
  string address = 1;
  // The chain (network) where domain search should be done
  uint64 chain_id = 2;
  // Specifies how much information about corresponding domain should be returned.
  DomainView domain_view = 3;
  // Include domains resolved to the address
  bool resolved_to = 4;
  // Include domains owned by the address
  bool owned_by = 5;
}

message ResolveAddressResponse {
  // List of domains that resolved to requested address
  // Sorted by relevance, so first address could be displayed as main resolved address
  repeated Domain resolved = 1;
  // List of domains owned by requested address
  repeated Domain owned = 2;
}

message BatchResolveAddressesRequest {
  // List of requested addresses
  repeated string addresses = 1;
  // The chain (network) where domain search should be done
  string chain_id = 2;
  // Specifies how much information about corresponding domains should be returned.
  DomainView domain_view = 3;
}

message BatchResolveAddressesResponse {
  message Domains {
    repeated Domain domains = 1;
  }
  map<string, Domains> domains = 1;
}
