syntax = "proto3";

package blockscout.bens.v1;

import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/blockscout/blockscout-rs/bens";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Blockscout ENS";
    version: "1.3.0";
    contact: {
      name: "Blockscout";
      url: "https://blockscout.com";
      email: "support@blockscout.com";
    };
  };
  host: "bens.services.blockscout.com"
  external_docs: {
    url: "https://github.com/blockscout/blockscout-rs";
    description: "More about blockscout microservices";
  }
};


service DomainsExtractor {
  // Get detailed information about domain for Detailed domain page
  rpc GetDomain(GetDomainRequest) returns (DetailedDomain) {}
  // Get list of events of domain for Detailed domain page
  rpc ListDomainEvents(ListDomainEventsRequest) returns (ListDomainEventsResponse) {}
  // Get basic info about domain for ens-lookup and blockscout quick-search. Sorted by `registration_date`
  rpc LookupDomainName(LookupDomainNameRequest) returns (LookupDomainNameResponse) {}
  // Get basic info about address for ens-lookup and blockscout quick-search. Sorted by `registration_date`
  rpc LookupAddress(LookupAddressRequest) returns (LookupAddressResponse) {}
  // Get detailed information about main domain of requested address
  rpc GetAddress(GetAddressRequest) returns (GetAddressResponse) {}
  // Perform batch resolving of list of address for blockscout backend requests
  rpc BatchResolveAddressNames(BatchResolveAddressNamesRequest) returns (BatchResolveAddressNamesResponse) {}
  // Get list of supported protocols
  rpc GetProtocols(GetProtocolsRequest) returns (GetProtocolsResponse) {}
}

message Domain {
  // Unique id for the domain, also known as nodehash
  string id = 1;
  // The human readable name, if known. Unknown portions replaced with hash in square brackets (eg, foo.[1234].eth)
  string name = 2;
  // Optional. Resolved address of this domain
  optional Address resolved_address = 3;
  // The account that owns the domain
  Address owner = 4;
  // Optional. Owner of NameWrapper NFT
  optional Address wrapped_owner = 7;
  // Optional. RFC 3339 datetime of expiry date.
  string registration_date = 5;
  // Optional. RFC 3339 datetime  of expiry date. None means never expires
  optional string expiry_date = 6;
  // Protocol that domain belongs to
  ProtocolInfo protocol = 8;
}

message DetailedDomain {
  // Unique id for the domain, also known as nodehash
  string id = 1;
  // The human readable name, if known. Unknown portions replaced with hash in square brackets (eg, foo.[1234].eth)
  string name = 2;
  // List of NFT tokens related to this domain
  repeated Token tokens = 11;
  // The account that owns the domain
  Address owner = 4;
  // Optional. Resolved address of this domain
  optional Address resolved_address = 5;
  // Optional. The account that owns the ERC721 NFT for the domain
  optional Address registrant = 6;
  // Optional. Owner of NameWrapper NFT
  optional Address wrapped_owner = 10;
  // Optional. RFC 3339 datetime  of expiry date.
  string registration_date = 7;
  // Optional. RFC 3339 datetime  of expiry date. None means never expires
  optional string expiry_date = 8;
  // Map chain -> resolved_address that contains other blockchain addresses.
  // This map will contain `current_chain_id` -> `resovled_address` if `resovled_address` is not None
  map<string, string> other_addresses = 9;
  // Information about protocol that domain belongs to
  ProtocolInfo protocol = 12;
}

message ProtocolInfo {
  string id = 1;
  string short_name = 2;
  string title = 3;
  string description = 4;
  string deployment_blockscout_base_url = 8;
  repeated string tld_list = 5;
  optional string icon_url = 6;
  optional string docs_url = 7;
}



message DomainEvent {
  // Transaction hash where action occured
  string transaction_hash = 1;
  // Timestamp of this transaction
  string timestamp = 2;
  ///Sender of transaction
  Address from_address = 3;
  // Optional. Action name
  optional string action = 4;
}

message Token {
  string id = 1;
  string contract_hash = 2;
  TokenType type = 3;
}

enum TokenType {
  NATIVE_DOMAIN_TOKEN = 0;
  WRAPPED_DOMAIN_TOKEN = 1;
}

message Address {
  string hash = 1;
}


enum Order {
  ORDER_UNSPECIFIED = 0;
  ASC = 1;
  DESC = 2;
}

message Pagination {
  string page_token = 1;
  uint32 page_size = 2;
}

/************************************************/

message GetDomainRequest {
  // Name of domain, for example vitalik.eth
  string name = 1;
  // The chain (network) where domain search should be done
  int64 chain_id = 2;
  // Filtering field to remove expired domains
  bool only_active = 3;
  // Protocol id of domain, default is first priority protocol on that chain
  optional string protocol_id = 4;
}

message ListDomainEventsRequest {
  // Name of domain, for example vitalik.eth
  string name = 1;
  // The chain (network) where domain search should be done
  int64 chain_id = 2;
  // Sorting field. Default is `timestamp`
  string sort = 4;
  // Order direction. Default is DESC
  Order order = 5;
  // Protocol id of domain, default is first priority protocol on that chain
  optional string protocol_id = 6;
}

message ListDomainEventsResponse {
  repeated DomainEvent items = 1;
}

message LookupDomainNameRequest {
  // Optional. Name of domain, for example vitalik.eth. None means lookup for any name
  optional string name = 1;
  // The chain (network) where domain search should be done
  int64 chain_id = 2;
  // Filtering field to remove expired domains
  bool only_active = 3;
  // Sorting field. Default is `registration_date`
  string sort = 4;
  // Order direction. Default is DESC
  Order order = 5;
  // Optional. Max number of items in single response. Default is 50
  optional uint32 page_size = 6;
  // Optional. Value of `.pagination.page_token` from previous response
  optional string page_token = 7;
  // comma separated list of protocol ids to filter by
  optional string protocols = 8;
}

message LookupDomainNameResponse {
  // List of domains that resolved to or owned by requested address
  // Sorted by relevance, so first address could be displayed as main resolved address
  repeated Domain items = 1;
  Pagination next_page_params = 2;
}

message LookupAddressRequest {
  // Address of EOA or contract
  string address = 1;
  // The chain (network) where domain search should be done
  int64 chain_id = 2;
  // Include domains resolved to the address
  bool resolved_to = 4;
  // Include domains owned by the address
  bool owned_by = 5;
  // Filtering field to remove expired domains
  bool only_active = 6;
  // Sorting field. Default is `registration_date`
  string sort = 7;
  // Order direction. Defaut is DESC
  Order order = 8;
  // Optional. Max number of items in single response. Default is 50
  optional uint32 page_size = 9;
  // Optional. Value of `.pagination.page_token` from previous response
  optional string page_token = 10;
  // comma separated list of protocol ids to filter by
  optional string protocols = 11;
}

message LookupAddressResponse {
  // List of domains that resolved to or owned by requested address
  // Sorted by relevance, so first address could be displayed as main resolved address
  repeated Domain items = 1;
  Pagination next_page_params = 2;
}

message GetAddressRequest {
  string address = 1;
  int64 chain_id = 2;
  optional string protocol_id = 3;
}

message GetAddressResponse {
  DetailedDomain domain = 1;
  int32 resolved_domains_count = 2;
}

message BatchResolveAddressNamesRequest {
  // List of requested addresses
  repeated string addresses = 1;
  // The chain (network) where domain search should be done
  int64 chain_id = 2;
}

message BatchResolveAddressNamesResponse {
  map<string, string> names = 1;
}

message GetProtocolsRequest {
    // The chain (network) where to get protocols
    int64 chain_id = 1;
}

message GetProtocolsResponse {
    repeated ProtocolInfo items = 1;
}
