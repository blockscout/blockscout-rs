syntax = "proto3";

package blockscout.bens.v1;

option go_package = "github.com/blockscout/blockscout-rs/bens";

service DomainsExtractor {
  rpc ResolveDomainName(ResolveDomainNameRequest) returns (ResolveDomainNameResponse) {}
  rpc SearchNameDomain(SearchDomainNameRequest) returns (SearchDomainNameResponse) {}
  rpc BatchSearchDomainNames(BatchSearchDomainNamesRequest) returns (BatchSearchDomainNamesResponse) {}

  rpc ResolveAddress(ResolveAddressRequest) returns (ResolveAddressResponse) {}
  rpc SearchAddress(SearchAddressRequest) returns (SearchAddressResponse) {}
  rpc BatchSearchAddresses(BatchSearchAddressesRequest) returns (BatchSearchAddressesResponse) {}

//  rpc QuickResolveAddresses(QuickResolveAddressesRequest) returns (QuickResolveResponseManyDomains) {}
//  rpc QuickResolveAddress(QuickResolveAddressRequest) returns (QuickResolveResponse) {}
//  rpc QuickResolveDomains(QuickResolveDomainsRequest) returns (QuickResolveResponseManyAddresses) {}
//  rpc QuickResolveDomain(QuickResolveDomainRequest) returns (QuickResolveResponse) {}
}

message ResolveDomainNameRequest {
  // Name of domain, for example vitalik.eth
  string name = 1;
  // The chain (network) where domain search should be done
  uint64 chain_id = 2;
}

message ResolveDomainNameResponse {
  // Optinal. Basic domain info
  optional Domain domain = 1;
  // List of domain events
  repeated DomainEvent history = 2;
}

message SearchDomainNameRequest {
  // Requested domain name
  string name = 1;
  // The chain (network) where domain search should be done
  string chain_id = 2;
}

message SearchDomainNameResponse {
  // Optional. Found domain name with resolved address
  optional DomainWithAddress domain = 1;
}

message BatchSearchDomainNamesRequest {
  // List of requested domain names
  repeated string names = 1;
  // The chain (network) where domain search should be done
  string chain_id = 2;
}

message BatchSearchDomainNamesResponse {
  // Map of domain_name => resolved_address
  map<string, string> addresses = 1;
}

message ResolveAddressRequest {
  // Address of EOA or contract
  string address = 1;
  // The chain (network) where domain search should be done
  uint64 chain_id = 2;
  // Include domains resolved to the address
  bool resolved_to = 3;
  // Include domains owned by the address
  bool owned_by = 4;
}

message ResolveAddressResponse {
  // List of domains that resolved to requested address
  // Sorted by relevance, so first address could be displayed as main resolved address
  repeated Domain resolved = 1;
  // List of domains owned by requested address
  repeated Domain owned = 2;
}

message SearchAddressRequest {
  // Requested address in hex format
  string address = 1;
  // The chain (network) where domain search should be done
  string chain_id = 2;
}

message SearchAddressResponse {
  // Optional. Found domain name with resolved address
  optional DomainWithAddress domain = 1;
}

message BatchSearchAddressesRequest {
  // List of requested addresses
  repeated string addresses = 1;
  // The chain (network) where domain search should be done
  string chain_id = 2;
}

message BatchSearchAddressesResponse {
  // Map of resolved_address => domain_name
  map<string, string> domains = 1;
}

/////////////////////////////////////////////////////////////////

message Domain {
  // Unique id for the domain, also known as nodehash
  string id = 1;
  // The human readable name, if known. Unknown portions replaced with hash in square brackets (eg, foo.[1234].eth)
  string name = 2;
  // Integer representation of labelhash
  uint64 token_id = 3;
  // The account that owns the domain
  string owner = 4;
  // Optinal. Resolved address of this domain
  optional string resolved_address = 5;
  // Optinal. The account that owns the ERC721 NFT for the domain
  optional string registrant = 6;
  // Optinal. Unix timestamp of expiry date. None means never expires
  optional uint64 expiry_date = 7;
  // Unix timestamp of regisration date
  uint64 registration_date = 8;
  // Map chain -> resolved_address that contains other blockchain addresses.
  // This map will contain `current_chain_id` -> `resovled_address` if `resovled_address` is not None
  map<string, string> other_addresses = 9;
}

message DomainEvent {
  // Transaction hash where action occured
  string transaction_hash = 1;
  // Timestamp of this transaction
  uint64 timestamp = 2;
  ///Sender of transaction
  string from_address = 3;
  // Optinal. Action name
  optional string action = 4;
}

message DomainWithAddress {
  // Resolved address of domain in hex format
  string resolved_address = 1;
  // Domain name, for example vitalik.eth
  string domain_name = 2;
}