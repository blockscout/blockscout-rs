syntax = "proto3";

package blockscout.ethBytecodeDb.v2;

option go_package = "github.com/blockscout/blockscout-rs/eth-bytecode-db";

service Database {
  rpc SearchSources(SearchSourcesRequest) returns (SearchSourcesResponse) {}

  rpc SearchSourcifySources(SearchSourcifySourcesRequest) returns (SearchSourcesResponse) {}

  rpc SearchAllianceSources(SearchAllianceSourcesRequest) returns (SearchSourcesResponse) {}

  rpc SearchAllSources(SearchAllSourcesRequest) returns (SearchAllSourcesResponse) {}

  rpc SearchEventDescriptions(SearchEventDescriptionsRequest) returns (SearchEventDescriptionsResponse) {}

  rpc BatchSearchEventDescriptions(BatchSearchEventDescriptionsRequest) returns (BatchSearchEventDescriptionsResponse) {}

  rpc GetAllianceStats(GetAllianceStatsRequest) returns (AllianceStats) {}
}

service SolidityVerifier {
  rpc VerifyMultiPart(VerifySolidityMultiPartRequest) returns (VerifyResponse) {}

  rpc VerifyStandardJson(VerifySolidityStandardJsonRequest) returns (VerifyResponse) {}

  rpc ListCompilerVersions(ListCompilerVersionsRequest) returns (ListCompilerVersionsResponse) {}
}

service VyperVerifier {
  rpc VerifyMultiPart(VerifyVyperMultiPartRequest) returns (VerifyResponse) {}

  rpc VerifyStandardJson(VerifyVyperStandardJsonRequest) returns (VerifyResponse) {}

  rpc ListCompilerVersions(ListCompilerVersionsRequest) returns (ListCompilerVersionsResponse) {}
}

service SourcifyVerifier {
  rpc Verify(VerifySourcifyRequest) returns (VerifyResponse) {}

  rpc VerifyFromEtherscan(VerifyFromEtherscanSourcifyRequest) returns (VerifyResponse) {}
}

message Source {
  /// The name of the file verified contract was located at
  string file_name = 1;

  /// The name of the contract which was verified
  string contract_name = 2;

  // Compiler version used to compile the contract
  string compiler_version = 3;

  /// 'settings' key in Standard Input JSON
  /// (https://docs.soliditylang.org/en/latest/using-the-compiler.html#input-description)
  string compiler_settings = 4;

  enum SourceType {
    // Default value. This value is unused.
    SOURCE_TYPE_UNSPECIFIED = 0;
    SOLIDITY = 1;
    VYPER = 2;
    YUL = 3;
  }
  SourceType source_type = 5;

  map<string, string> source_files = 6;

  /// Contract abi (https://docs.soliditylang.org/en/latest/abi-spec.html?highlight=abi#json);
  /// (does not exist for Yul contracts)
  optional string abi = 7;

  /// Constructor arguments used for deploying verified contract
  /// (exists only for creation inputs)
  optional string constructor_arguments = 8;

  enum MatchType {
    // Default value. This value is unused.
    MATCH_TYPE_UNSPECIFIED = 0;
    PARTIAL = 1;
    FULL = 2;
  }
  /// Similar to Sourcify (see https://docs.sourcify.dev/docs/full-vs-partial-match/)
  MatchType match_type = 9;

  /// General and compiler-specific artifacts (abi, userdoc, devdoc, licenses, ast, etc),
  /// encoded as a json.
  optional string compilation_artifacts = 10;

  /// Info about the creation code (sourcemaps, linkreferences) encoded as a json.
  optional string creation_input_artifacts = 11;

  /// Info about the runtime code (sourcemaps, linkreferences, immutables) encoded as a json.
  optional string deployed_bytecode_artifacts = 12;
}

enum BytecodeType {
  BYTECODE_TYPE_UNSPECIFIED = 0;
  CREATION_INPUT = 1;
  DEPLOYED_BYTECODE = 2;
}

message VerificationMetadata {
  /// Id of the chain the contract is verified on
  optional string chain_id = 1;
  /// The address of the contract to be verified
  optional string contract_address = 2;
  /// The hash of the transaction the contract has been created at
  optional string transaction_hash = 3;
  /// The number of the block containing the creation transaction
  optional int64 block_number = 4;
  /// The position number transaction has been added into a block
  optional int64 transaction_index = 5;
  /// The address which actually deployed the contract (i.e. called the create/create2 opcode)
  optional string deployer = 6;
  /// The bytecode from the calldata (for eoa deployments) or given to create/create2
  optional string creation_code = 7;
  // The bytecode actually stored in the blockchain for the given contract
  optional string runtime_code = 8;
}

message VerifySolidityMultiPartRequest {
  /// Bytecode to compare local compilation result with
  string bytecode = 1;
  /// Either CREATION_INPUT or DEPLOYED_BYTECODE, depending on what should be verified
  BytecodeType bytecode_type = 2;
  /// Compiler version used to compile the contract
  string compiler_version = 3;
  /// Version of the EVM to compile for. If absent results in default EVM version
  optional string evm_version = 4;
  /// If present, optimizations are enabled with specified number of runs,
  /// otherwise optimizations are disabled
  optional int32 optimization_runs = 5;
  /// Map from a source file name to the actual source code
  map<string, string> source_files = 6;
  /// Map from a library name to its address
  map<string, string> libraries = 7;

  /// An optional field to be filled by explorers
  optional VerificationMetadata metadata = 8;
}

message VerifySolidityStandardJsonRequest {
  /// Bytecode to compare local compilation result with
  string bytecode = 1;
  /// Either CREATION_INPUT or DEPLOYED_BYTECODE, depending on what should be verified
  BytecodeType bytecode_type = 2;
  /// Compiler version used to compile the contract
  string compiler_version = 3;
  /// https://docs.soliditylang.org/en/latest/using-the-compiler.html#input-description
  string input = 4;

  /// An optional field to be filled by explorers
  optional VerificationMetadata metadata = 5;
}

message VerifyVyperMultiPartRequest {
  /// Bytecode to compare local compilation result with
  string bytecode = 1;
  /// Either CREATION_INPUT or DEPLOYED_BYTECODE, depending on what should be verified
  BytecodeType bytecode_type = 2;
  /// Compiler version used to compile the contract
  string compiler_version = 3;
  /// Version of the EVM to compile for. If absent results in default EVM version
  optional string evm_version = 4;
  /// Map from a source file name to the actual source code
  map<string, string> source_files = 6;
  /// Map from an interface names to the actual interfaces.
  /// If non-specified, no interfaces are considered.
  map<string, string> interfaces = 8;

  /// An optional field to be filled by explorers
  optional VerificationMetadata metadata = 7;

  reserved 5;
  reserved "optimizations";
}

message VerifyVyperStandardJsonRequest {
  /// Bytecode to compare local compilation result with
  string bytecode = 1;
  /// Either CREATION_INPUT or DEPLOYED_BYTECODE, depending on what should be verified
  BytecodeType bytecode_type = 2;
  /// Compiler version used to compile the contract
  string compiler_version = 3;
  /// https://docs.vyperlang.org/en/stable/compiling-a-contract.html#input-json-description
  string input = 4;

  /// An optional field to be filled by explorers
  optional VerificationMetadata metadata = 5;
}

message VerifyResponse {
  string message = 1;

  enum Status {
    STATUS_UNSPECIFIED = 0;
    SUCCESS = 1;
    FAILURE = 2;
  }
  Status status = 2;

  Source source = 3;
}

message SearchSourcesRequest {
  /// Bytecode to search the sources for
  string bytecode = 1;
  /// Either CREATION_INPUT or DEPLOYED_BYTECODE, depending on what you are looking upon
  BytecodeType bytecode_type = 2;
}

message SearchSourcifySourcesRequest {
  /// Id of the chain the contract should be verified on
  string chain = 1;
  /// The address of the contract being verified
  string address = 2;
}
message SearchAllianceSourcesRequest {
  /// Id of the chain the contract should be verified on
  string chain = 1;
  /// The address of the contract being verified
  string address = 2;
}

message SearchAllSourcesRequest {
  /// Bytecode to search the sources for
  string bytecode = 1;
  /// Either CREATION_INPUT or DEPLOYED_BYTECODE, depending on what you are looking upon
  BytecodeType bytecode_type = 2;
  /// Id of the chain the contract should be verified on
  string chain = 3;
  /// The address of the contract being verified
  string address = 4;
  /// If set and is `true`, will not try to obtain sources from 3rd party services
  /// (e.g., Sourcify and Etherscan)
  optional bool only_local = 5;
}

message SearchSourcesResponse {
  repeated Source sources = 1;
}

message SearchAllSourcesResponse {
  repeated Source eth_bytecode_db_sources = 1;

  repeated Source sourcify_sources = 2;

  repeated Source alliance_sources = 3;
}

message SearchEventDescriptionsRequest {
  /// For non-anonymous events, this is a bytes32 value
  /// containing the keccak256 hash of the event signature,
  /// as used in the default topic.
  string selector = 1;
}

message SearchEventDescriptionsResponse {
  repeated EventDescription event_descriptions = 1;
}

message BatchSearchEventDescriptionsRequest {
  // The selectors of the events to look for.
  // A maximum of 100 selectors can be retrieved in a batch.
  repeated string selectors = 1;
}

message BatchSearchEventDescriptionsResponse {
  repeated SearchEventDescriptionsResponse responses = 1;
}

message GetAllianceStatsRequest {}

message AllianceStats {
  uint64 total_contracts = 1;
  map<string, uint64> contracts_per_provider = 2;
}

message VerifySourcifyRequest {
  /// Address of the contract to be verified
  string address = 1;
  /// The chain (network) the contract was deployed to
  /// (https://docs.sourcify.dev/docs/api/chains/)
  string chain = 2;
  /// Files required for verification (see Sourcify Api)
  // Named as `files` instead of `source_files`
  // to correspond with Sourcify api
  map<string, string> files = 3;
  // (optional) see Sourcify Api
  optional int32 chosen_contract = 4;
}

message VerifyFromEtherscanSourcifyRequest {
  /// Address of the contract to be verified
  string address = 1;
  /// The chain (network) the contract was deployed to
  /// (https://docs.sourcify.dev/docs/api/chains/)
  string chain = 2;
}


message ListCompilerVersionsRequest {}

message ListCompilerVersionsResponse {
  /// Compiler versions available
  repeated string compiler_versions = 1;
}

message EventDescription {
  /// Will always be "event"
  string type = 1;
  /// The name of the event
  string name = 2;
  /// Json encoded array of objects each describing one of the event arguments
  string inputs = 3;
}
