syntax = "proto3";

package blockscout.ethBytecodeDb.v1;

option go_package = "github.com/blockscout/blockscout-rs/eth-bytecode-db";

service CreationBytecodeDatabase {
  rpc VerifySolidityMultiPart(VerifySolidityMultiPartRequest) returns (VerifyResponse) {}

  rpc VerifySolidityStandardJson(VerifySolidityStandardJsonRequest) returns (VerifyResponse) {}

  rpc VerifySolidityMetadata(VerifySolidityMetadataRequest) returns (VerifyResponse) {}

  rpc VerifyVyperMultiPart(VerifyVyperMultiPartRequest) returns (VerifyResponse) {}

  rpc SearchSources(SearchSourcesRequest) returns (SearchSourcesResponse) {}
}

service DeployedBytecodeDatabase {
  rpc VerifySolidityMultiPart(VerifySolidityMultiPartRequest) returns (VerifyResponse) {}

  rpc VerifySolidityStandardJson(VerifySolidityStandardJsonRequest) returns (VerifyResponse) {}

  rpc VerifySolidityMetadata(VerifySolidityMetadataRequest) returns (VerifyResponse) {}

  rpc VerifyVyperMultiPart(VerifyVyperMultiPartRequest) returns (VerifyResponse) {}

  rpc SearchSources(SearchSourcesRequest) returns (SearchSourcesResponse) {}
}

service Sourcify {
  rpc Verify(VerifySourcifyRequest) returns (VerifyResponse) {}
}

message Source {
  /// The name of the file verified contract was located at
  string file_name = 1;

  /// The name of the contract which was verified
  string contract_name = 2;

  // Compiler version used to compile the contract
  string compiler_version = 3;

  /// 'settings' key in Standard Input JSON
  /// (https://docs.soliditylang.org/en/latest/using-the-compiler.html#input-description)
  string compiler_settings = 4;

  enum SourceType {
    // Default value. This value is unused.
    SOURCE_TYPE_UNSPECIFIED = 0;
    SOLIDITY = 1;
    VYPER = 2;
    YUL = 3;
  }
  SourceType source_type = 6;

  message SourceFile {
    string name = 1;
    string content =  2;
  }
  repeated SourceFile source_files = 7;

  /// Contract abi (https://docs.soliditylang.org/en/latest/abi-spec.html?highlight=abi#json);
  /// (does not exist for Yul contracts)
  optional string abi = 8;

  /// Constructor arguments used for deploying verified contract
  /// (exists only for creation inputs)
  optional string constructor_arguments = 9;

  enum Match {
    // Default value. This value is unused.
    MATCH_UNSPECIFIED = 0;
    PARTIAL = 1;
    FULL = 2;
  }
  /// Similar to Sourcify (see https://docs.sourcify.dev/docs/full-vs-partial-match/)
  Match match = 10;
}

message VerifySolidityMultiPartRequest {
  /// Bytecode to compare local compilation result with
  string bytecode = 1;
  /// Compiler version used to compile the contract
  string compiler_version = 2;
  /// Version of the EVM to compile for
  string evm_version = 3;
  /// If present, optimizations are enabled with specified number of runs,
  /// otherwise optimizations are disabled
  optional int32 optimization_runs = 4;
  /// Map from a source file name to the actual source code
  map<string, string> sources_files = 5;
  /// Map from a library name to its address
  map<string, string> libraries = 6;
}

message VerifySolidityStandardJsonRequest {
  /// Bytecode to compare local compilation result with
  string bytecode = 1;
  /// Compiler version used to compile the contract
  string compiler_version = 2;
  /// https://docs.soliditylang.org/en/latest/using-the-compiler.html#input-description
  string input = 3;
}


message VerifySolidityMetadataRequest {
  /// Bytecode to compare local compilation result with
  string bytecode = 1;
  /// Metadata along with actual sources
  map<string, string> sources_files = 5;
  /// (optional) index of the contract, if the provided files contain multiple metadata files (i.e. multiple contracts).
  /// By default, the first file is considered as a target contract.
  int32 chosen_contract = 4;
}

message VerifyVyperMultiPartRequest {
  /// Bytecode to compare local compilation result with
  string bytecode = 1;
  /// Compiler version used to compile the contract
  string compiler_version = 2;
  /// Version of the EVM to compile for
  string evm_version = 3;
  /// Flag enabling optimizations
  bool optimizations = 4;
  /// Source file name to the actual source code
  map<string, string> source_files = 5;
}

message VerifyResponse {
  string message = 1;
  /// Status of 0 indicates successful verification
  int32 status = 2;

  Source source = 3;
}

message SearchSourcesRequest {
  /// Bytecode to search the sources for
  string bytecode = 1;
}

message SearchSourcesResponse {
  repeated Source sources = 1;
}

message VerifySourcifyRequest {
  /// Address of the contract to be verified
  string address = 1;
  /// The chain (network) the contract was deployed to
  /// (https://docs.sourcify.dev/docs/api/chains/)
  string chain = 2;
  /// Files required for verification (see Sourcify Api)
  map<string, string> sources_files = 3;
  // (optional) see Sourcify Api
  optional int32 chosenContract = 4;
}
