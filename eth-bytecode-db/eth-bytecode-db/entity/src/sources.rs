//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.2

use super::sea_orm_active_enums::SourceType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "sources")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub source_type: SourceType,
    pub compiler_version: String,
    pub compiler_settings: Json,
    pub file_name: String,
    pub contract_name: String,
    pub abi: Option<Json>,
    pub raw_creation_input: Vec<u8>,
    pub raw_deployed_bytecode: Vec<u8>,
    pub file_ids_hash: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::source_files::Entity")]
    SourceFiles,
    #[sea_orm(has_many = "super::bytecodes::Entity")]
    Bytecodes,
    #[sea_orm(has_many = "super::verified_contracts::Entity")]
    VerifiedContracts,
}

impl Related<super::source_files::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SourceFiles.def()
    }
}

impl Related<super::bytecodes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bytecodes.def()
    }
}

impl Related<super::verified_contracts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VerifiedContracts.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
