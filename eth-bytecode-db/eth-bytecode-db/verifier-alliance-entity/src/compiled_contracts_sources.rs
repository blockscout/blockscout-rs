//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "compiled_contracts_sources")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub compilation_id: Uuid,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub source_hash: Vec<u8>,
    pub path: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::compiled_contracts::Entity",
        from = "Column::CompilationId",
        to = "super::compiled_contracts::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CompiledContracts,
    #[sea_orm(
        belongs_to = "super::sources::Entity",
        from = "Column::SourceHash",
        to = "super::sources::Column::SourceHash",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Sources,
}

impl Related<super::compiled_contracts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CompiledContracts.def()
    }
}

impl Related<super::sources::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sources.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
