;; ▗▄▄▄▖▄▄▄▄ ▄▄▄▄ ▄ ▗▞▀▜▌ ▄▄▄
;;    ▐▌   █ █    █ ▝▚▄▟▌▀▄▄  ▄▄▄▄
;;    ▐▌█▀▀▀ ▀▀▀█ █      ▄▄▄▀ █ █ █
;;    ▐▌█▄▄▄ ▄▄▄█ █           █   █
;;
;; This is an implementation of EIP-7251 style contract handling EL triggerred
;; consolidations. It leverages on the fee mechanism and the queue design of the
;; original EIP-7002 smart contract implementation. Therefore, the subroutines
;; logic of the original smart contract remains.
;;
;; The difference from the EIP-7002 smart contract is in input data, the size of
;; the queue item, target and max block parameters.

#pragma target "prague"

;; ----------------------------------------------------------------------------
;; CONSTANTS ------------------------------------------------------------------
;; ----------------------------------------------------------------------------

#define SYSTEM_ADDR = .address(0xfffffffffffffffffffffffffffffffffffffffe)

#define SLOT_EXCESS = 0
#define SLOT_COUNT = 1

#define QUEUE_HEAD = 2
#define QUEUE_TAIL  = 3
#define QUEUE_OFFSET = 4

#define MIN_FEE = 1
#define TARGET_PER_BLOCK = 1
#define MAX_PER_BLOCK = 2
#define FEE_UPDATE_FRACTION = 17
#define EXCESS_INHIBITOR = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

#define INPUT_SIZE = 96    ;; the size of (source ++ target)
#define RECORD_SIZE = 116  ;; the size of (address ++ source ++ target)
#define SLOTS_PER_ITEM = 4 ;; (addr, src[0:32], src[32:48]+tgt[0:16], tgt[16:48])

;; ----------------------------------------------------------------------------
;; PROGRAM START --------------------------------------------------------------
;; ----------------------------------------------------------------------------

  ;; Protect the system subroutine by checking if the caller is the system
  ;; address.
  caller                ;; [caller]
  push SYSTEM_ADDR      ;; [sysaddr, caller]
  eq                    ;; [sysaddr == caller]
  jumpi @read_requests  ;; []

  ;; --------------------------------------------------------------------------
  ;; USER SUBROUTINE ----------------------------------------------------------
  ;; --------------------------------------------------------------------------

  ;; Compute the fee using fake expo and the current excess requests.
  push FEE_UPDATE_FRACTION
  push SLOT_EXCESS      ;; [excess_slot, update_fraction]
  sload                 ;; [excess, update_fraction]

  ;; Check if the pre-fork inhibitor is still active, revert if so.
  dup1                  ;; [excess, excess, update_fraction]
  push EXCESS_INHIBITOR ;; [inhibitor, excess, excess, update_fraction]
  eq                    ;; [inhibitor == excess, excess, update_fraction]
  jumpi @revert         ;; [excess, update_fraction]

  push MIN_FEE          ;; [min_fee, excess, update_fraction]
  #include "../common/fake_expo.eas"

  ;; If calldatasize matches the expected input size, go to adding the request.
  calldatasize          ;; [calldatasize, req_fee]
  push INPUT_SIZE       ;; [INPUT_SIZE, calldatasize, req_fee]
  eq                    ;; [INPUT_SIZE == calldatasize, req_fee]
  jumpi @handle_input   ;; [req_fee]

  ;; Otherwise calldatasize must be zero.
  calldatasize          ;; [calldatasize, req_fee]
  jumpi @revert         ;; [req_fee]

  ;; This is the read path, where we return the current excess.
  ;; Reject any callvalue here to prevent lost funds.
  callvalue             ;; [value, req_fee]
  jumpi @revert         ;; [req_fee]

  ;; Return req_fee.
  push 0                ;; [0, req_fee]
  mstore                ;; []
  push 32               ;; [32]
  push 0                ;; [0, 32]
  return                ;; []

handle_input:
  ;; This is the write path. We expect the computed fee on the stack.
  ;; Input data has the following layout:
  ;;
  ;;  +--------+--------+
  ;;  | source | target |
  ;;  +--------+--------+
  ;;      48       48

  ;; Determine if the fee provided is enough to cover the request fee.
  callvalue             ;; [callvalue, req_fee]
  lt                    ;; [callvalue < req_fee]
  jumpi @revert         ;; []

  ;; The request can pay, increment request count.
  push SLOT_COUNT
  sload                 ;; [req_count]
  push 1                ;; [1, req_count]
  add                   ;; [req_count+1]
  push SLOT_COUNT
  sstore                ;; []

  ;; Now insert request into queue. First, compute the base storage slot
  push QUEUE_TAIL       ;; [tail_idx_slot]
  sload                 ;; [tail_idx]
  dup1                  ;; [tail_idx, tail_idx]
  push SLOTS_PER_ITEM   ;; [slots, tail_idx, tail_idx]
  mul                   ;; [slots*tail_idx, tail_idx]
  push QUEUE_OFFSET
  add                   ;; [slot, tail_idx]

  ;; Write address to queue.
  caller                ;; [caller, slot, ..]
  dup2                  ;; [slot, caller, slot, ..]
  sstore                ;; [slot, ..]

  push 1                ;; [1, slot, ..]
  add                   ;; [slot, ..]

  ;; Store source[0:32] to queue.
  push 0                ;; [0, slot, ..]
  calldataload          ;; [source[0:32], slot, ..]
  dup2                  ;; [slot, source[0:32], slot, ..]
  sstore                ;; [slot, ..]

  push 1                ;; [1, slot, ..]
  add                   ;; [slot, ..]

  ;; Store source[32:48] ++ target[0:16] to queue.
  push 32               ;; [32, slot, ..]
  calldataload          ;; [source[32:48] ++ target[0:16], slot, ..]
  dup2                  ;; [slot, source[32:48] ++ target[0:16], slot, ..]
  sstore                ;; [slot, ..]

  push 1                ;; [1, slot, ..]
  add                   ;; [slot, ..]

  ;; Store target[16:48] to queue.
  push 64               ;; [64, slot, ..]
  calldataload          ;; [target[16:48], slot, ..]
  swap1                 ;; [slot, target[16:48], ..]
  sstore                ;; [..]


  ;; Assemble log data.
  caller                ;; [caller, ..]
  push 96               ;; [96, caller, ..]
  shl                   ;; [caller, ..]
  push 0                ;; [0, caller, ..]
  mstore                ;; [..]
  push INPUT_SIZE       ;; [size, ..]
  push 0                ;; [ost, size, ..]
  push 20               ;; [dest, ost, size, ..]
  calldatacopy          ;; [..]

  ;; Log record.
  push RECORD_SIZE      ;; [size, ..]
  push 0                ;; [idx, size, ..]
  log0                  ;; [..]

  ;; Increment queue tail over last and write to storage.
  push 1                ;; [1, tail_idx]
  add                   ;; [tail_idx+1]
  push QUEUE_TAIL       ;; [tail_idx_slot]
  sstore                ;; []

  stop

;; ----------------------------------------------------------------------------
;; SYSTEM SUBROUTINE ----------------------------------------------------------
;; ----------------------------------------------------------------------------
;;
;; Pop request from queue, update fee accumulator ~~ This is the logic executed
;; by the protocol each block. It reads as many requests as available from the
;; queue, until the max request per block is reached. The requests are returned
;; as a contiguous array of bytes with each record being exactly RECORD_SIZE
;; bytes.
;;
;;  Consolidation request record:
;;
;;  +------+--------+--------+
;;  | addr | source | target |
;;  +------+--------+--------+
;;     20      48       48
;;
;; Because the requests are stored across SLOTS_PER_ITEM storage slots, there is
;; some shuffling to align the data.
;;
;; After reading the requests, they are removed from the queue by modifying the
;; queue's head index. The excess requests accumulator is updated so that the
;; new cost of submitting a request is reflected. Finally, the request count is
;; reset.
read_requests:
  ;; Determine the size of the queue by calculating tail - head.
  push QUEUE_TAIL       ;; [tail_idx_slot]
  sload                 ;; [tail_idx]
  push QUEUE_HEAD       ;; [head_idx_slot, tail_idx]
  sload                 ;; [head_idx, tail_idx]

  ;; Now compute the count.
  dup1                  ;; [head_idx, head_idx, tail_idx]
  dup3                  ;; [tail_idx, head_idx, head_idx, tail_idx]
  sub                   ;; [count, head_idx, tail_idx]

  ;; Determine if count is greater than the max requests.
  dup1                  ;; [count, count, head_idx, tail_idx]
  push MAX_PER_BLOCK    ;; [reqs_per_block, count, count, head_idx, tail_idx]
  gt                    ;; [reqs_per_block > count, count, head_idx, tail_idx]
  jumpi @begin_loop     ;; [count, head_idx, tail_idx]

  ;; Discard count, use the max requests per block.
  pop                   ;; [head_idx, tail_idx]
  push MAX_PER_BLOCK    ;; [count, head_idx, tail_idx]

begin_loop:
  push 0                ;; [i, count, head_idx, tail_idx]

accum_loop:
  ;; This loop will read each request and byte bang it into a RECORD_SIZE byte chunk.

  ;; Bounds check, ensure i < count.
  dup2                  ;; [count, i, count, head_idx, tail_idx]
  dup2                  ;; [i, count, i, count, head_idx, tail_idx]
  eq                    ;; [i == count, i, count, head_idx, tail_idx]
  jumpi @update_head    ;; [i, count, head_idx, tail_idx]

  ;; Determine the storage slot of the address for this iteration. This value is
  ;; also the base for the other storage slots containing the source and target
  ;; public keys. The base slot will be (queue_offset + (queue_head + i)*4).
  dup3                  ;; [head_idx, i, ..]
  dup2                  ;; [i, head_idx, i, ..]
  add                   ;; [i+head_idx, i, ..]
  push SLOTS_PER_ITEM   ;; [4, i+head_idx, i, ..]
  mul                   ;; [4*(i+head_idx), i, ..]
  push QUEUE_OFFSET     ;; [offset, 4*(i+head_idx), i, ..]
  add                   ;; [slotbase, i, ..]

  ;; Write values to memory flat and contiguously. This requires combining the
  ;; four storage elements (addr, spk1, spk2_tpk1, tpk2) so there is no padding.
  ;;
  ;; The slots have the following layout:
  ;;
  ;; 0: addr
  ;;  0x00 | 00 00 00 00 00 00 00 00 00 00 00 00 aa aa aa aa
  ;;  0x10 | aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa
  ;;
  ;; 1: source[0:32] -> spk1
  ;;  0x00 | bb bb bb bb bb bb bb bb bb bb bb bb bb bb bb bb
  ;;  0x10 | bb bb bb bb bb bb bb bb bb bb bb bb bb bb bb bb
  ;;
  ;; 2: source[32:48] ++ target[0:16] -> spk2_tpk1
  ;;  0x00 | bb bb bb bb bb bb bb bb bb bb bb bb bb bb bb bb
  ;;  0x10 | cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc
  ;;
  ;; 3: target[16:48] -> tpk2
  ;;  0x20 | cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc
  ;;  0x30 | cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc cc

  ;; Compute the output offset = i*RECORD_SIZE.
  dup2                  ;; [i, slotbase, i, ..]
  push RECORD_SIZE      ;; [size, i, slotbase, i, ..]
  mul                   ;; [offset=size*i, slotbase, i, ..]

  ;; Read slot 'addr' from storage.
  dup2                  ;; [slotbase, offset, slotbase, ..]
  sload                 ;; [addr, offset, slotbase, ..]

  ;; Shift addr bytes.
  push 12*8             ;; [96, addr, offset, slotbase, ..]
  shl                   ;; [addr<<96, offset, slotbase, ..]

  ;; Store addr at offset = i*RECORD_SIZE.
  dup2                  ;; [offset, addr<<96, offset, slotbase, ..]
  mstore                ;; [offset, slotbase, ..]
  push 20               ;; [20, offset, slotbase, ..]
  add                   ;; [offset=offset+20, slotbase, ..]

  ;; Read slot 'spk1' from storage.
  dup2                  ;; [slotbase, offset, slotbase, ..]
  push 1                ;; [1, slotbase, offset, slotbase, ..]
  add                   ;; [slot, offset, slotbase, ..]
  sload                 ;; [spk1, offset, slotbase, ..]

  ;; Store spk1 at output offset = i*RECORD_SIZE+20.
  dup2                  ;; [offset, spk1, offset, slotbase, ..]
  mstore                ;; [offset, slotbase, ..]
  push 32               ;; [32, offset, slotbase, ..]
  add                   ;; [offset=offset+32, slotbase, ..]

  ;; Read slot 'spk2_tpk1' from storage.
  dup2                  ;; [slotbase, offset, slotbase, ..]
  push 2                ;; [2, slotbase, offset, slotbase, ..]
  add                   ;; [slot, offset, slotbase, ..]
  sload                 ;; [spk2_tpk1, offset, slotbase, ..]

  ;; Store spk2_tpk1 at output offset = i*RECORD_SIZE+52.
  dup2                  ;; [offset, src[32:48] ++ tgt[0:16], offset, slotbase, ..]
  mstore                ;; [offset, slotbase, ..]
  push 32               ;; [32, offset, slotbase, ..]
  add                   ;; [offset=offset+32, slotbase, ..]

  ;; Read target[16:48] from slot 3.
  swap1                 ;; [slotbase, offset, ..]
  push 3                ;; [3, slotbase, offset, ..]
  add                   ;; [slot, offset, ..]
  sload                 ;; [tpk2, offset, ..]

  ;; Store tpk2 at output offset = i*RECORD_SIZE+84.
  swap1                 ;; [offset, tpk2, ..]
  mstore                ;; [..]

  ;; Increment i.
  push 1                ;; [1, i, ..]
  add                   ;; [i+1, ..]

  jump @accum_loop      ;; [i, count, head_idx, tail_idx]

update_head:
  ;; All requests have been read, update queue by adding the count read. to the
  ;; current head index.
  swap2                 ;; [head_idx, count, count, tail_idx]
  add                   ;; [new_head_idx, count, tail_idx]

  ;; If the new head is equal to the tail, reset the queue by zeroing them both.
  dup1                  ;; [new_head_idx, new_head_idx, count, tail_idx]
  swap3                 ;; [tail_idx, new_head_idx, count, new_head_idx]
  eq                    ;; [new_head_idx == tail_idx, count, new_head_idx]
  jumpi @reset_queue    ;; [count, new_head_idx]

  ;; Otherwise, write the new head to storage.
  swap1                 ;; [new_head_idx, count]
  push QUEUE_HEAD       ;; [head_idx_slot, new_head_idx, count]
  sstore                ;; [count]

  jump @update_excess   ;; [count]

reset_queue:
  ;; Since the queue is empty, both the head and tail indexes can be zeroed.
  swap1                 ;; [new_head_idx, count]
  pop                   ;; [count]

  push 0                ;; [0, count]
  push QUEUE_HEAD       ;; [head_slot, 0, count]
  sstore                ;; [count]

  push 0                ;; [0, count]
  push QUEUE_TAIL       ;; [tail_slot, 0, count]
  sstore                ;; [count]

update_excess:
  ;; Update the new excess consolidation requests.
  push SLOT_EXCESS      ;; [excess_slot, count]
  sload                 ;; [excess, count]

  ;; Check if excess needs to be reset to 0 for first iteration after
  ;; activation.
  dup1                  ;; [excess, excess, count]
  push EXCESS_INHIBITOR ;; [inhibitor, excess, excess, count]
  eq                    ;; [inhibitor == excess, excess, count]
  iszero                ;; [inhibitor != excess, excess, count]
  jumpi @skip_reset     ;; [excess, count]

  ;; Drop the excess from stack and use 0.
  pop                   ;; [count]
  push 0                ;; [reset_excess, count]

skip_reset:
  push SLOT_COUNT       ;; [count_slot, excess, count]
  sload                 ;; [count, excess, count]

  ;; If the sum of the previous excess requests and requests added in the
  ;; current block is greater than the target, subtract the target from the sum
  ;; and set it as the new excess requests value.
  push TARGET_PER_BLOCK ;; [target, count, excess, count]
  dup3                  ;; [excess, target, count, excess, count]
  dup3                  ;; [count, excess, target, count, excess, count]
  add                   ;; [count+excess, target, count, excess, count]
  gt                    ;; [count+excess > target, count, excess, count]
  jumpi @compute_excess ;; [count, excess, count]

  ;; Zero out excess.
  pop                   ;; [excess, count]
  pop                   ;; [count]
  push 0                ;; [0, count]
  jump @store_excess    ;; [0, count]

compute_excess:
  add                   ;; [count+excess, count]
  push TARGET_PER_BLOCK ;; [target, count+excess, count]
  swap1                 ;; [count+excess, target, count]
  sub                   ;; [new_excess, count]

store_excess:
  push SLOT_EXCESS      ;; [excess_slot, new_excess, count]
  sstore                ;; [count]

  ;; Reset request count.
  push 0                ;; [0, count]
  push SLOT_COUNT       ;; [count_slot, 0, count]
  sstore                ;; [count]

  ;; Return the requests.
  push RECORD_SIZE      ;; [record_size, count]
  mul                   ;; [size]
  push 0                ;; [0, size]
  return                ;; []

;; Revert subroutine.
revert:
  push 0
  push 0
  revert
