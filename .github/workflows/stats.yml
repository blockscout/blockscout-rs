on:
  push:
    branches:
      - 'main'
    tags:
      - 'stats/v*'
  pull_request:
    paths:
      - stats/**
      - .github/workflows/stats.yml
      - .github/actions/deps/**


name: Test, lint and docker (stats)

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: blockscout/stats

defaults:
  run:
    working-directory: stats

jobs:
  test:
    name: Unit, doc and integration tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.8
        env:
          POSTGRES_PASSWORD: admin
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install deps
        uses: ./.github/actions/deps

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Rust cache
        uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      - name: Unit tests
        run: RUST_BACKTRACE=1 RUST_LOG=info cargo test --locked --workspace --all-features --lib --bins -- --nocapture
        if: success() || failure()

      - name: Doc tests
        run: cargo test --locked --workspace --all-features --doc
        if: success() || failure()

      - name: Integration tests
        run: RUST_BACKTRACE=1 RUST_LOG=info cargo test --locked --workspace --test '*' -- --nocapture
        if: success() || failure()

      - name: DB tests
        run: RUST_BACKTRACE=1 RUST_LOG=info cargo test --locked --workspace -- --nocapture --ignored
        if: success() || failure()
        env:
          DATABASE_URL: postgres://postgres:admin@localhost:5432/

  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install deps
        uses: ./.github/actions/deps

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt, clippy
          override: true

      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      - name: cargo fmt
        run: cargo fmt --all -- --check --config imports_granularity=Crate

      - name: cargo clippy
        run: cargo clippy --all --all-targets --all-features -- -D warnings

  push:
    name: Docker build and docker push
    needs:
      - test
      - lint
    if: |
      always() &&
      (needs.test.result == 'success' || needs.test.result == 'cancelled') &&
      (needs.lint.result == 'success' || needs.lint.result == 'cancelled')
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: actions-ecosystem/action-regex-match@v2
        id: regex
        with:
          text: ${{ github.ref }}
          regex: '^(refs\/tags\/stats\/(v\d+\.\d+\.\d+))|(refs\/heads\/(main))$'

      - name: Extract tag name
        id: tags_extractor
        run: |
          t=${{ steps.regex.outputs.group2 }}
          m=${{ steps.regex.outputs.group4 }}
          (if ! [[ "$t" == "" ]]; then echo tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$t, ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest; elif ! [[ "$m" == "" ]]; then echo tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$m; else echo tags=; fi) >> $GITHUB_OUTPUT

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: "stats"
          file: "stats/Dockerfile"
          push: ${{ steps.tags_extractor.outputs.tags != '' }}
          tags: ${{ steps.tags_extractor.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  deploy_main:
    if: ${{ github.ref_type == 'branch' && github.ref_name == 'main' }}
    name: Deploy stats
    needs: push
    uses: blockscout/blockscout-ci-cd/.github/workflows/deploy.yaml@master
    with:
      env_vars: VALUES_DIR=deploy/values/stats,APP_NAME=bs-stack
      appNamespace: stats-testing
    secrets: inherit
