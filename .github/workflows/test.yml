on:
  push:
    branches:
      - 'main'
  pull_request:

name: Test Suite

jobs:
  unit:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Install protoc and protoc-gen-openapi
        run: |
          apt update && apt install -y protobuf-compiler curl
          
          # install go
          LATEST_GO_VERSION="$(curl --silent https://go.dev/VERSION?m=text)";
          curl -OJ -L --progress-bar https://golang.org/dl/${LATEST_GO_VERSION}.linux-amd64.tar.gz
          tar -C /usr/local -xzf ${LATEST_GO_VERSION}.linux-amd64.tar.gz
          export PATH=$PATH:/usr/local/go/bin
          
          # install protoc-gen-openapi
          go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      - name: cargo test
        run: RUST_BACKTRACE=1 RUST_LOG=info cargo test --locked --workspace --all-features --lib --bins -- --nocapture

  doc:
    name: Doc tests
    runs-on: ubuntu-latest
    steps:      
      # - name: Install protoc and protoc-gen-openapi
      #   run: |
      #     apt update && apt install -y protobuf-compiler curl
      #     # install go
      #     LATEST_GO_VERSION="$(curl --silent https://go.dev/VERSION?m=text)";
      #     curl -OJ -L --progress-bar https://golang.org/dl/${LATEST_GO_VERSION}.linux-amd64.tar.gz
      #     tar -C /usr/local -xzf ${LATEST_GO_VERSION}.linux-amd64.tar.gz
      #     export PATH=$PATH:/usr/local/go/bin
      #     # install protoc-gen-openapi
      #     go install github.com/google/gnostic/cmd/protoc-gen-openapi@latest

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      - name: cargo test
        run: cargo test --locked --workspace --all-features --doc

  integration:
    name: Integration tests
    runs-on: ubuntu-latest
    steps:      
      - name: Install protoc and protoc-gen-openapi
        run: |
          apt update && apt install -y protobuf-compiler curl
          
          # install go
          LATEST_GO_VERSION="$(curl --silent https://go.dev/VERSION?m=text)";
          curl -OJ -L --progress-bar https://golang.org/dl/${LATEST_GO_VERSION}.linux-amd64.tar.gz
          tar -C /usr/local -xzf ${LATEST_GO_VERSION}.linux-amd64.tar.gz
          export PATH=$PATH:/usr/local/go/bin
          
          # install protoc-gen-openapi
          go install github.com/google/gnostic/cmd/protoc-gen-openapi@latest

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Rust cache
        uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      - name: cargo test
        run: RUST_BACKTRACE=1 RUST_LOG=info cargo test --locked --workspace --test '*' -- --nocapture

  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:      
      # - name: Install protoc and protoc-gen-openapi
      #   run: |
      #     apt update && apt install -y protobuf-compiler curl
      #     # install go
      #     LATEST_GO_VERSION="$(curl --silent https://go.dev/VERSION?m=text)";
      #     curl -OJ -L --progress-bar https://golang.org/dl/${LATEST_GO_VERSION}.linux-amd64.tar.gz
      #     tar -C /usr/local -xzf ${LATEST_GO_VERSION}.linux-amd64.tar.gz
      #     export PATH=$PATH:/usr/local/go/bin
      #     # install protoc-gen-openapi
      #     go install github.com/google/gnostic/cmd/protoc-gen-openapi@latest

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt, clippy
          override: true

      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      - name: cargo fmt
        run: cargo fmt --all -- --check --config imports_granularity=Crate

      - name: cargo clippy
        run: cargo clippy --all --all-features -- -D warnings