//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "interop_messages")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub sender_address_hash: Option<Vec<u8>>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub target_address_hash: Option<Vec<u8>>,
    pub nonce: i64,
    pub init_chain_id: i64,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub init_transaction_hash: Option<Vec<u8>>,
    pub timestamp: Option<DateTime>,
    pub relay_chain_id: i64,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub relay_transaction_hash: Option<Vec<u8>>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub payload: Option<Vec<u8>>,
    pub failed: Option<bool>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::chains::Entity",
        from = "Column::InitChainId",
        to = "super::chains::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Chains2,
    #[sea_orm(
        belongs_to = "super::chains::Entity",
        from = "Column::RelayChainId",
        to = "super::chains::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Chains1,
    #[sea_orm(has_one = "super::interop_messages_transfers::Entity")]
    InteropMessagesTransfers,
}

impl Related<super::interop_messages_transfers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::InteropMessagesTransfers.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
