//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "chains")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    pub explorer_url: Option<String>,
    pub icon_url: Option<String>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::addresses::Entity")]
    Addresses,
    #[sea_orm(has_many = "super::api_keys::Entity")]
    ApiKeys,
    #[sea_orm(has_one = "super::block_ranges::Entity")]
    BlockRanges,
    #[sea_orm(has_many = "super::dapps::Entity")]
    Dapps,
    #[sea_orm(has_many = "super::hashes::Entity")]
    Hashes,
}

impl Related<super::addresses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Addresses.def()
    }
}

impl Related<super::api_keys::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApiKeys.def()
    }
}

impl Related<super::block_ranges::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlockRanges.def()
    }
}

impl Related<super::dapps::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Dapps.def()
    }
}

impl Related<super::hashes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Hashes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
