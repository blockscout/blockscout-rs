//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "interop_messages_transfers")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub interop_message_id: i64,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub token_address_hash: Option<Vec<u8>>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub from_address_hash: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub to_address_hash: Vec<u8>,
    #[sea_orm(column_type = "Decimal(Some((78, 0)))")]
    pub amount: BigDecimal,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::interop_messages::Entity",
        from = "Column::InteropMessageId",
        to = "super::interop_messages::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    InteropMessages,
}

impl Related<super::interop_messages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::InteropMessages.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
