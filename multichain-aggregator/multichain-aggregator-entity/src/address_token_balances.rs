//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "address_token_balances")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub address_hash: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub token_address_hash: Vec<u8>,
    #[sea_orm(column_type = "Decimal(Some((78, 0)))", nullable)]
    pub token_id: Option<BigDecimal>,
    #[sea_orm(column_type = "Decimal(Some((78, 0)))", nullable)]
    pub value: Option<BigDecimal>,
    pub chain_id: i64,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::chains::Entity",
        from = "Column::ChainId",
        to = "super::chains::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Chains,
}

impl Related<super::chains::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Chains.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
