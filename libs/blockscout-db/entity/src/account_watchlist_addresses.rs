//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "account_watchlist_addresses")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub watchlist_id: Option<i64>,
    pub watch_coin_input: Option<bool>,
    pub watch_coin_output: Option<bool>,
    pub watch_erc_20_input: Option<bool>,
    pub watch_erc_20_output: Option<bool>,
    pub watch_erc_721_input: Option<bool>,
    pub watch_erc_721_output: Option<bool>,
    pub watch_erc_1155_input: Option<bool>,
    pub watch_erc_1155_output: Option<bool>,
    pub notify_email: Option<bool>,
    pub notify_epns: Option<bool>,
    pub notify_feed: Option<bool>,
    pub notify_inapp: Option<bool>,
    pub inserted_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub address_hash_hash: Option<Vec<u8>>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub name: Option<Vec<u8>>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub address_hash: Option<Vec<u8>>,
    pub watch_erc_404_input: Option<bool>,
    pub watch_erc_404_output: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::account_watchlists::Entity",
        from = "Column::WatchlistId",
        to = "super::account_watchlists::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    AccountWatchlists,
}

impl Related<super::account_watchlists::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AccountWatchlists.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
