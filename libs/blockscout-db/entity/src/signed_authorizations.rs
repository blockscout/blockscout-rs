//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "signed_authorizations")]
pub struct Model {
    #[sea_orm(
        primary_key,
        auto_increment = false,
        column_type = "VarBinary(StringLen::None)"
    )]
    pub transaction_hash: Vec<u8>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub index: i32,
    pub chain_id: i64,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub address: Vec<u8>,
    pub nonce: i32,
    pub v: i32,
    #[sea_orm(column_type = "Decimal(Some((100, 0)))")]
    pub r: Decimal,
    #[sea_orm(column_type = "Decimal(Some((100, 0)))")]
    pub s: Decimal,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub authority: Option<Vec<u8>>,
    pub inserted_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::transactions::Entity",
        from = "Column::TransactionHash",
        to = "super::transactions::Column::Hash",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Transactions,
}

impl Related<super::transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transactions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
