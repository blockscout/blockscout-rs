//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tokens")]
pub struct Model {
    #[sea_orm(column_type = "Text", nullable)]
    pub name: Option<String>,
    pub symbol: Option<String>,
    pub total_supply: Option<Decimal>,
    pub decimals: Option<Decimal>,
    pub r#type: String,
    pub cataloged: Option<bool>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub contract_address_hash: Vec<u8>,
    pub inserted_at: DateTime,
    pub updated_at: DateTime,
    pub holder_count: Option<i32>,
    pub skip_metadata: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::address_current_token_balances::Entity")]
    AddressCurrentTokenBalances,
    #[sea_orm(has_many = "super::address_token_balances::Entity")]
    AddressTokenBalances,
    #[sea_orm(
        belongs_to = "super::addresses::Entity",
        from = "Column::ContractAddressHash",
        to = "super::addresses::Column::Hash",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Addresses,
    #[sea_orm(has_many = "super::token_instances::Entity")]
    TokenInstances,
}

impl Related<super::address_current_token_balances::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AddressCurrentTokenBalances.def()
    }
}

impl Related<super::address_token_balances::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AddressTokenBalances.def()
    }
}

impl Related<super::addresses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Addresses.def()
    }
}

impl Related<super::token_instances::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TokenInstances.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
