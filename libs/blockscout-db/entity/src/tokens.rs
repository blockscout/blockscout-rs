//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tokens")]
pub struct Model {
    #[sea_orm(column_type = "Text", nullable)]
    pub name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub symbol: Option<String>,
    pub total_supply: Option<BigDecimal>,
    pub decimals: Option<BigDecimal>,
    pub r#type: String,
    pub cataloged: Option<bool>,
    #[sea_orm(
        primary_key,
        auto_increment = false,
        column_type = "VarBinary(StringLen::None)",
        unique
    )]
    pub contract_address_hash: Vec<u8>,
    pub inserted_at: DateTime,
    pub updated_at: DateTime,
    pub holder_count: Option<i32>,
    pub skip_metadata: Option<bool>,
    pub fiat_value: Option<BigDecimal>,
    pub circulating_market_cap: Option<BigDecimal>,
    pub total_supply_updated_at_block: Option<i64>,
    pub icon_url: Option<String>,
    pub is_verified_via_admin_panel: Option<bool>,
    pub volume_24h: Option<BigDecimal>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::token_instances::Entity")]
    TokenInstances,
}

impl Related<super::token_instances::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TokenInstances.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
