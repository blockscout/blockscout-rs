//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "blocks")]
pub struct Model {
    pub consensus: bool,
    #[sea_orm(column_type = "Decimal(Some((50, 0)))", nullable)]
    pub difficulty: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((100, 0)))")]
    pub gas_limit: Decimal,
    #[sea_orm(column_type = "Decimal(Some((100, 0)))")]
    pub gas_used: Decimal,
    #[sea_orm(primary_key, auto_increment = false)]
    pub hash: Vec<u8>,
    pub miner_hash: Vec<u8>,
    pub nonce: Vec<u8>,
    pub number: i64,
    pub parent_hash: Vec<u8>,
    pub size: Option<i32>,
    pub timestamp: DateTime,
    #[sea_orm(column_type = "Decimal(Some((50, 0)))", nullable)]
    pub total_difficulty: Option<Decimal>,
    pub inserted_at: DateTime,
    pub updated_at: DateTime,
    pub refetch_needed: Option<bool>,
    #[sea_orm(column_type = "Decimal(Some((100, 0)))", nullable)]
    pub base_fee_per_gas: Option<Decimal>,
    pub is_empty: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::addresses::Entity",
        from = "Column::MinerHash",
        to = "super::addresses::Column::Hash",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Addresses,
    #[sea_orm(has_many = "super::block_rewards::Entity")]
    BlockRewards,
    #[sea_orm(has_many = "super::block_second_degree_relations::Entity")]
    BlockSecondDegreeRelations,
    #[sea_orm(has_many = "super::internal_transactions::Entity")]
    InternalTransactions,
    #[sea_orm(has_many = "super::logs::Entity")]
    Logs,
    #[sea_orm(has_many = "super::pending_block_operations::Entity")]
    PendingBlockOperations,
    #[sea_orm(has_many = "super::token_transfers::Entity")]
    TokenTransfers,
    #[sea_orm(has_many = "super::transaction_forks::Entity")]
    TransactionForks,
    #[sea_orm(has_many = "super::transactions::Entity")]
    Transactions,
}

impl Related<super::addresses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Addresses.def()
    }
}

impl Related<super::block_rewards::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlockRewards.def()
    }
}

impl Related<super::block_second_degree_relations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlockSecondDegreeRelations.def()
    }
}

impl Related<super::internal_transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::InternalTransactions.def()
    }
}

impl Related<super::logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Logs.def()
    }
}

impl Related<super::pending_block_operations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PendingBlockOperations.def()
    }
}

impl Related<super::token_transfers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TokenTransfers.def()
    }
}

impl Related<super::transaction_forks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TransactionForks.def()
    }
}

impl Related<super::transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transactions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
