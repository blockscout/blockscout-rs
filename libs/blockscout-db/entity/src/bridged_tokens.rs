//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "bridged_tokens")]
pub struct Model {
    pub foreign_chain_id: Decimal,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub foreign_token_contract_address_hash: Vec<u8>,
    pub exchange_rate: Option<Decimal>,
    pub custom_metadata: Option<String>,
    pub lp_token: Option<bool>,
    pub custom_cap: Option<Decimal>,
    pub r#type: Option<String>,
    #[sea_orm(
        column_type = "VarBinary(StringLen::None)",
        unique,
        // changed: fix no key columns
        primary_key,
        auto_increment = false
    )]
    pub home_token_contract_address_hash: Vec<u8>,
    pub inserted_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::tokens::Entity",
        from = "Column::HomeTokenContractAddressHash",
        to = "super::tokens::Column::ContractAddressHash",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Tokens,
}

impl Related<super::tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tokens.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
