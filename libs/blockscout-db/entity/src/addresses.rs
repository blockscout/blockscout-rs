//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "addresses")]
pub struct Model {
    #[sea_orm(column_type = "Decimal(Some((100, 0)))", nullable)]
    pub fetched_coin_balance: Option<Decimal>,
    pub fetched_coin_balance_block_number: Option<i64>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub hash: Vec<u8>,
    pub contract_code: Option<Vec<u8>>,
    pub inserted_at: DateTime,
    pub updated_at: DateTime,
    pub nonce: Option<i32>,
    pub decompiled: Option<bool>,
    pub verified: Option<bool>,
    pub gas_used: Option<i64>,
    pub transactions_count: Option<i32>,
    pub token_transfers_count: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::address_coin_balances::Entity")]
    AddressCoinBalances,
    #[sea_orm(has_many = "super::address_coin_balances_daily::Entity")]
    AddressCoinBalancesDaily,
    #[sea_orm(has_many = "super::address_current_token_balances::Entity")]
    AddressCurrentTokenBalances,
    #[sea_orm(has_many = "super::address_token_balances::Entity")]
    AddressTokenBalances,
    #[sea_orm(has_many = "super::block_rewards::Entity")]
    BlockRewards,
    #[sea_orm(has_many = "super::blocks::Entity")]
    Blocks,
    #[sea_orm(has_many = "super::decompiled_smart_contracts::Entity")]
    DecompiledSmartContracts,
    #[sea_orm(has_many = "super::logs::Entity")]
    Logs,
    #[sea_orm(has_many = "super::smart_contracts::Entity")]
    SmartContracts,
    #[sea_orm(has_many = "super::tokens::Entity")]
    Tokens,
}

impl Related<super::address_coin_balances::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AddressCoinBalances.def()
    }
}

impl Related<super::address_coin_balances_daily::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AddressCoinBalancesDaily.def()
    }
}

impl Related<super::address_current_token_balances::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AddressCurrentTokenBalances.def()
    }
}

impl Related<super::address_token_balances::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AddressTokenBalances.def()
    }
}

impl Related<super::block_rewards::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BlockRewards.def()
    }
}

impl Related<super::blocks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Blocks.def()
    }
}

impl Related<super::decompiled_smart_contracts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DecompiledSmartContracts.def()
    }
}

impl Related<super::logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Logs.def()
    }
}

impl Related<super::smart_contracts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SmartContracts.def()
    }
}

impl Related<super::tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tokens.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
