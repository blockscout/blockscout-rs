//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "smart_contracts")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub name: String,
    pub compiler_version: String,
    pub optimization: bool,
    #[sea_orm(column_type = "Text")]
    pub contract_source_code: String,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub abi: Option<Json>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", unique)]
    pub address_hash: Vec<u8>,
    pub inserted_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(column_type = "Text", nullable)]
    pub constructor_arguments: Option<String>,
    pub optimization_runs: Option<i64>,
    pub evm_version: Option<String>,
    pub external_libraries: Option<Vec<Json>>,
    pub verified_via_sourcify: Option<bool>,
    pub is_vyper_contract: Option<bool>,
    pub partially_verified: Option<bool>,
    #[sea_orm(column_type = "Text", nullable)]
    pub file_path: Option<String>,
    pub is_changed_bytecode: Option<bool>,
    pub bytecode_checked_at: Option<DateTime>,
    pub contract_code_md5: String,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub compiler_settings: Option<Json>,
    pub verified_via_eth_bytecode_db: Option<bool>,
    pub license_type: i16,
    pub verified_via_verifier_alliance: Option<bool>,
    pub certified: Option<bool>,
    pub is_blueprint: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::proxy_smart_contract_verification_statuses::Entity")]
    ProxySmartContractVerificationStatuses,
    #[sea_orm(has_many = "super::smart_contract_audit_reports::Entity")]
    SmartContractAuditReports,
    #[sea_orm(has_many = "super::smart_contracts_additional_sources::Entity")]
    SmartContractsAdditionalSources,
}

impl Related<super::proxy_smart_contract_verification_statuses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProxySmartContractVerificationStatuses.def()
    }
}

impl Related<super::smart_contract_audit_reports::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SmartContractAuditReports.def()
    }
}

impl Related<super::smart_contracts_additional_sources::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SmartContractsAdditionalSources.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
