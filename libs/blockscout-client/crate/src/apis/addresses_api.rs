/*
 * BlockScout API
 *
 * API for BlockScout web app
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`get_address`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAddressError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_address_blocks_validated`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAddressBlocksValidatedError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_address_coin_balance_history`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAddressCoinBalanceHistoryError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_address_coin_balance_history_by_day`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAddressCoinBalanceHistoryByDayError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_address_counters`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAddressCountersError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_address_internal_txs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAddressInternalTxsError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_address_logs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAddressLogsError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_address_nft`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAddressNftError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_address_nft_collections`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAddressNftCollectionsError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_address_token_balances`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAddressTokenBalancesError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_address_token_transfers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAddressTokenTransfersError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_address_tokens`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAddressTokensError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_address_txs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAddressTxsError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_address_withdrawals`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAddressWithdrawalsError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_addresses`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAddressesError {
    Status400(),
    UnknownValue(serde_json::Value),
}


pub async fn get_address(configuration: &configuration::Configuration, address_hash: &str) -> Result<models::Address, Error<GetAddressError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_address_hash = address_hash;

    let uri_str = format!("{}/api/v2/addresses/{address_hash}", configuration.base_path, address_hash=crate::apis::urlencode(p_address_hash));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAddressError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_address_blocks_validated(configuration: &configuration::Configuration, address_hash: &str) -> Result<models::GetAddressBlocksValidated200Response, Error<GetAddressBlocksValidatedError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_address_hash = address_hash;

    let uri_str = format!("{}/api/v2/addresses/{address_hash}/blocks-validated", configuration.base_path, address_hash=crate::apis::urlencode(p_address_hash));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAddressBlocksValidatedError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_address_coin_balance_history(configuration: &configuration::Configuration, address_hash: &str) -> Result<models::GetAddressCoinBalanceHistory200Response, Error<GetAddressCoinBalanceHistoryError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_address_hash = address_hash;

    let uri_str = format!("{}/api/v2/addresses/{address_hash}/coin-balance-history", configuration.base_path, address_hash=crate::apis::urlencode(p_address_hash));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAddressCoinBalanceHistoryError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_address_coin_balance_history_by_day(configuration: &configuration::Configuration, address_hash: &str) -> Result<Vec<models::CoinBalanceHistoryByDaysEntry>, Error<GetAddressCoinBalanceHistoryByDayError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_address_hash = address_hash;

    let uri_str = format!("{}/api/v2/addresses/{address_hash}/coin-balance-history-by-day", configuration.base_path, address_hash=crate::apis::urlencode(p_address_hash));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAddressCoinBalanceHistoryByDayError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_address_counters(configuration: &configuration::Configuration, address_hash: &str) -> Result<models::AddressCounters, Error<GetAddressCountersError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_address_hash = address_hash;

    let uri_str = format!("{}/api/v2/addresses/{address_hash}/counters", configuration.base_path, address_hash=crate::apis::urlencode(p_address_hash));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAddressCountersError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_address_internal_txs(configuration: &configuration::Configuration, address_hash: &str, filter: Option<&str>) -> Result<models::GetAddressInternalTxs200Response, Error<GetAddressInternalTxsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_address_hash = address_hash;
    let p_filter = filter;

    let uri_str = format!("{}/api/v2/addresses/{address_hash}/internal-transactions", configuration.base_path, address_hash=crate::apis::urlencode(p_address_hash));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAddressInternalTxsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_address_logs(configuration: &configuration::Configuration, address_hash: &str) -> Result<models::GetAddressLogs200Response, Error<GetAddressLogsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_address_hash = address_hash;

    let uri_str = format!("{}/api/v2/addresses/{address_hash}/logs", configuration.base_path, address_hash=crate::apis::urlencode(p_address_hash));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAddressLogsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_address_nft(configuration: &configuration::Configuration, address_hash: &str, r#type: Option<&str>) -> Result<models::GetAddressNft200Response, Error<GetAddressNftError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_address_hash = address_hash;
    let p_type = r#type;

    let uri_str = format!("{}/api/v2/addresses/{address_hash}/nft", configuration.base_path, address_hash=crate::apis::urlencode(p_address_hash));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_type {
        req_builder = req_builder.query(&[("type", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAddressNftError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_address_nft_collections(configuration: &configuration::Configuration, address_hash: &str, r#type: Option<&str>) -> Result<models::GetAddressNftCollections200Response, Error<GetAddressNftCollectionsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_address_hash = address_hash;
    let p_type = r#type;

    let uri_str = format!("{}/api/v2/addresses/{address_hash}/nft/collections", configuration.base_path, address_hash=crate::apis::urlencode(p_address_hash));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_type {
        req_builder = req_builder.query(&[("type", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAddressNftCollectionsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_address_token_balances(configuration: &configuration::Configuration, address_hash: &str) -> Result<Vec<models::TokenBalance>, Error<GetAddressTokenBalancesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_address_hash = address_hash;

    let uri_str = format!("{}/api/v2/addresses/{address_hash}/token-balances", configuration.base_path, address_hash=crate::apis::urlencode(p_address_hash));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAddressTokenBalancesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_address_token_transfers(configuration: &configuration::Configuration, address_hash: &str, r#type: Option<&str>, filter: Option<&str>, token: Option<&str>) -> Result<models::GetAddressTokenTransfers200Response, Error<GetAddressTokenTransfersError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_address_hash = address_hash;
    let p_type = r#type;
    let p_filter = filter;
    let p_token = token;

    let uri_str = format!("{}/api/v2/addresses/{address_hash}/token-transfers", configuration.base_path, address_hash=crate::apis::urlencode(p_address_hash));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_type {
        req_builder = req_builder.query(&[("type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_token {
        req_builder = req_builder.query(&[("token", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAddressTokenTransfersError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_address_tokens(configuration: &configuration::Configuration, address_hash: &str, r#type: Option<&str>) -> Result<models::GetAddressTokens200Response, Error<GetAddressTokensError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_address_hash = address_hash;
    let p_type = r#type;

    let uri_str = format!("{}/api/v2/addresses/{address_hash}/tokens", configuration.base_path, address_hash=crate::apis::urlencode(p_address_hash));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_type {
        req_builder = req_builder.query(&[("type", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAddressTokensError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_address_txs(configuration: &configuration::Configuration, address_hash: &str, filter: Option<&str>) -> Result<models::GetBlockTxs200Response, Error<GetAddressTxsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_address_hash = address_hash;
    let p_filter = filter;

    let uri_str = format!("{}/api/v2/addresses/{address_hash}/transactions", configuration.base_path, address_hash=crate::apis::urlencode(p_address_hash));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_filter {
        req_builder = req_builder.query(&[("filter", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAddressTxsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_address_withdrawals(configuration: &configuration::Configuration, address_hash: &str) -> Result<models::GetBlockWithdrawals200Response, Error<GetAddressWithdrawalsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_address_hash = address_hash;

    let uri_str = format!("{}/api/v2/addresses/{address_hash}/withdrawals", configuration.base_path, address_hash=crate::apis::urlencode(p_address_hash));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAddressWithdrawalsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_addresses(configuration: &configuration::Configuration, ) -> Result<models::GetAddresses200Response, Error<GetAddressesError>> {

    let uri_str = format!("{}/api/v2/addresses", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAddressesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

