/*
 
 * BlockScout API
 *
 
 
 * API for BlockScout web app
 *
 
 * The version of the OpenAPI document: {size=70, empty=false}
 * Contact: lymarenko.lev@blockscout.com
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;

#[cfg(feature = "mockall")]
use mockall::automock;

use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


#[cfg_attr(feature = "mockall", automock)]

#[async_trait]
pub trait ConfigApi: Send + Sync {



    ///  
    
    ///
    /// 
    


    async fn <>(&self, ) -> Result<ResponseContent<Success>, Error<Error>>;



}

pub struct ConfigApiClient {
    configuration: Arc<configuration::Configuration>
}

impl ConfigApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}








#[async_trait]
impl ConfigApi for ConfigApiClient {
    
    
    
    
    
    
    async fn <>(&self, ) -> Result<ResponseContent<Success>, Error<Error>> {
    
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::, local_var_uri_str.as_str());

        
        
        
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        
        
        
        
        
        
        

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            
            
            let local_var_entity: Option<Success> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
            
        } else {
            let local_var_entity: Option<Error> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    
    
}




/// struct for typed successes of method [``]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Success {
    
    UnknownValue(serde_json::Value),
}


// changed
impl ResponseContent<Success> {
    
}







/// struct for typed errors of method [``]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Error {
    
    UnknownValue(serde_json::Value),
}



