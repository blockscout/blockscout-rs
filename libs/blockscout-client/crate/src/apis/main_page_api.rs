/*

* BlockScout API
*


* API for BlockScout web app
*

* The version of the OpenAPI document: 1.0.0
* Contact: lymarenko.lev@blockscout.com
* Generated by: https://openapi-generator.tech
*/

use async_trait::async_trait;

#[cfg(feature = "mockall")]
use mockall::automock;

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{Deserialize, Serialize};
use std::sync::Arc;

#[cfg_attr(feature = "mockall", automock)]
#[async_trait]
pub trait MainPageApi: Send + Sync {
    /// GET /api/v2/main-page/indexing-status
    ///
    ///
    async fn get_indexing_status(
        &self,
    ) -> Result<ResponseContent<GetIndexingStatusSuccess>, Error<GetIndexingStatusError>>;

    /// GET /api/v2/main-page/blocks
    ///
    ///
    async fn get_main_page_tokens(
        &self,
    ) -> Result<ResponseContent<GetMainPageTokensSuccess>, Error<GetMainPageTokensError>>;

    /// GET /api/v2/main-page/transactions
    ///
    ///
    async fn get_main_page_txs(
        &self,
    ) -> Result<ResponseContent<GetMainPageTxsSuccess>, Error<GetMainPageTxsError>>;
}

pub struct MainPageApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl MainPageApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

#[async_trait]
impl MainPageApi for MainPageApiClient {
    async fn get_indexing_status(
        &self,
    ) -> Result<ResponseContent<GetIndexingStatusSuccess>, Error<GetIndexingStatusError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v2/main-page/indexing-status",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetIndexingStatusSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetIndexingStatusError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_main_page_tokens(
        &self,
    ) -> Result<ResponseContent<GetMainPageTokensSuccess>, Error<GetMainPageTokensError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v2/main-page/blocks",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetMainPageTokensSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetMainPageTokensError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_main_page_txs(
        &self,
    ) -> Result<ResponseContent<GetMainPageTxsSuccess>, Error<GetMainPageTxsError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v2/main-page/transactions",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetMainPageTxsSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetMainPageTxsError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed successes of method [`get_indexing_status`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetIndexingStatusSuccess {
    Status200(Box<models::IndexingStatus>),

    UnknownValue(serde_json::Value),
}

// changed
impl ResponseContent<GetIndexingStatusSuccess> {
    pub fn try_as_success(&self) -> Option<&models::IndexingStatus> {
        match &self.entity {
            Some(GetIndexingStatusSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(
        &self,
    ) -> Result<models::IndexingStatus, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}

/// struct for typed successes of method [`get_main_page_tokens`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMainPageTokensSuccess {
    Status200(Box<Vec<models::Block>>),

    UnknownValue(serde_json::Value),
}

// changed
impl ResponseContent<GetMainPageTokensSuccess> {
    pub fn try_as_success(&self) -> Option<&Vec<models::Block>> {
        match &self.entity {
            Some(GetMainPageTokensSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(
        &self,
    ) -> Result<Vec<models::Block>, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}

/// struct for typed successes of method [`get_main_page_txs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMainPageTxsSuccess {
    Status200(Box<Vec<models::Transaction>>),

    UnknownValue(serde_json::Value),
}

// changed
impl ResponseContent<GetMainPageTxsSuccess> {
    pub fn try_as_success(&self) -> Option<&Vec<models::Transaction>> {
        match &self.entity {
            Some(GetMainPageTxsSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(
        &self,
    ) -> Result<Vec<models::Transaction>, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}

/// struct for typed errors of method [`get_indexing_status`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetIndexingStatusError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_main_page_tokens`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMainPageTokensError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_main_page_txs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMainPageTxsError {
    UnknownValue(serde_json::Value),
}
