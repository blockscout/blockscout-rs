/*

* BlockScout API
*


* API for BlockScout web app
*

* The version of the OpenAPI document: 1.0.0
* Contact: lymarenko.lev@blockscout.com
* Generated by: https://openapi-generator.tech
*/

use async_trait::async_trait;

#[cfg(feature = "mockall")]
use mockall::automock;

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{Deserialize, Serialize};
use std::sync::Arc;

#[cfg_attr(feature = "mockall", automock)]
#[async_trait]
pub trait SmartContractsApi: Send + Sync {
    /// GET /api/v2/smart-contracts/{address_hash}
    ///
    ///
    async fn get_smart_contract(
        &self,
        params: GetSmartContractParams,
    ) -> Result<ResponseContent<GetSmartContractSuccess>, Error<GetSmartContractError>>;

    /// GET /api/v2/smart-contracts
    ///
    ///
    async fn get_smart_contracts(
        &self,
        params: GetSmartContractsParams,
    ) -> Result<ResponseContent<GetSmartContractsSuccess>, Error<GetSmartContractsError>>;

    /// GET /api/v2/smart-contracts/counters
    ///
    ///
    async fn get_smart_contracts_counters(
        &self,
    ) -> Result<
        ResponseContent<GetSmartContractsCountersSuccess>,
        Error<GetSmartContractsCountersError>,
    >;
}

pub struct SmartContractsApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl SmartContractsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

/// struct for passing parameters to the method [`get_smart_contract`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetSmartContractParams {
    /// Address hash
    pub address_hash: String,
}

/// struct for passing parameters to the method [`get_smart_contracts`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetSmartContractsParams {
    pub q: Option<String>,

    pub filter: Option<String>,
}

#[async_trait]
impl SmartContractsApi for SmartContractsApiClient {
    async fn get_smart_contract(
        &self,
        params: GetSmartContractParams,
    ) -> Result<ResponseContent<GetSmartContractSuccess>, Error<GetSmartContractError>> {
        let GetSmartContractParams { address_hash } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v2/smart-contracts/{address_hash}",
            local_var_configuration.base_path,
            address_hash = crate::apis::urlencode(address_hash)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetSmartContractSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetSmartContractError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_smart_contracts(
        &self,
        params: GetSmartContractsParams,
    ) -> Result<ResponseContent<GetSmartContractsSuccess>, Error<GetSmartContractsError>> {
        let GetSmartContractsParams { q, filter } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v2/smart-contracts",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = q {
            local_var_req_builder =
                local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
        }

        if let Some(ref local_var_str) = filter {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
        }

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetSmartContractsSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetSmartContractsError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_smart_contracts_counters(
        &self,
    ) -> Result<
        ResponseContent<GetSmartContractsCountersSuccess>,
        Error<GetSmartContractsCountersError>,
    > {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v2/smart-contracts/counters",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetSmartContractsCountersSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetSmartContractsCountersError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed successes of method [`get_smart_contract`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSmartContractSuccess {
    Status200(Box<models::SmartContract>),

    UnknownValue(serde_json::Value),
}

// changed
impl ResponseContent<GetSmartContractSuccess> {
    pub fn try_as_success(&self) -> Option<&models::SmartContract> {
        match &self.entity {
            Some(GetSmartContractSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(
        &self,
    ) -> Result<models::SmartContract, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}

/// struct for typed successes of method [`get_smart_contracts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSmartContractsSuccess {
    Status200(Box<models::GetSmartContracts200Response>),

    UnknownValue(serde_json::Value),
}

// changed
impl ResponseContent<GetSmartContractsSuccess> {
    pub fn try_as_success(&self) -> Option<&models::GetSmartContracts200Response> {
        match &self.entity {
            Some(GetSmartContractsSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(
        &self,
    ) -> Result<models::GetSmartContracts200Response, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}

/// struct for typed successes of method [`get_smart_contracts_counters`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSmartContractsCountersSuccess {
    Status200(Box<models::GetSmartContractsCounters200Response>),

    UnknownValue(serde_json::Value),
}

// changed
impl ResponseContent<GetSmartContractsCountersSuccess> {
    pub fn try_as_success(&self) -> Option<&models::GetSmartContractsCounters200Response> {
        match &self.entity {
            Some(GetSmartContractsCountersSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(
        &self,
    ) -> Result<models::GetSmartContractsCounters200Response, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}

/// struct for typed errors of method [`get_smart_contract`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSmartContractError {
    Status400(),

    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_smart_contracts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSmartContractsError {
    Status400(),

    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_smart_contracts_counters`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSmartContractsCountersError {
    Status400(),

    UnknownValue(serde_json::Value),
}
