/*
 * BlockScout API
 *
 * API for BlockScout web app
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lymarenko.lev@blockscout.com
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
#[cfg(feature = "mockall")]
use mockall::automock;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

#[cfg_attr(feature = "mockall", automock)]
#[async_trait]
pub trait BlocksApi: Send + Sync {

    /// GET /api/v2/blocks/{block_number_or_hash}
    ///
    /// 
    async fn get_block(&self,  params: GetBlockParams ) -> Result<ResponseContent<GetBlockSuccess>, Error<GetBlockError>>;

    /// GET /api/v2/blocks/{block_number_or_hash}/transactions
    ///
    /// 
    async fn get_block_txs(&self,  params: GetBlockTxsParams ) -> Result<ResponseContent<GetBlockTxsSuccess>, Error<GetBlockTxsError>>;

    /// GET /api/v2/blocks/{block_number_or_hash}/withdrawals
    ///
    /// 
    async fn get_block_withdrawals(&self,  params: GetBlockWithdrawalsParams ) -> Result<ResponseContent<GetBlockWithdrawalsSuccess>, Error<GetBlockWithdrawalsError>>;

    /// GET /api/v2/blocks
    ///
    /// 
    async fn get_blocks(&self,  params: GetBlocksParams ) -> Result<ResponseContent<GetBlocksSuccess>, Error<GetBlocksError>>;
}

pub struct BlocksApiClient {
    configuration: Arc<configuration::Configuration>
}

impl BlocksApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


/// struct for passing parameters to the method [`get_block`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetBlockParams {
    /// Block number or hash
    pub block_number_or_hash: String
}

/// struct for passing parameters to the method [`get_block_txs`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetBlockTxsParams {
    /// Block number or hash
    pub block_number_or_hash: String
}

/// struct for passing parameters to the method [`get_block_withdrawals`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetBlockWithdrawalsParams {
    /// Block number or hash
    pub block_number_or_hash: String
}

/// struct for passing parameters to the method [`get_blocks`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetBlocksParams {
    pub r#type: Option<String>
}


#[async_trait]
impl BlocksApi for BlocksApiClient {
    async fn get_block(&self,  params: GetBlockParams ) -> Result<ResponseContent<GetBlockSuccess>, Error<GetBlockError>> {
        
        let GetBlockParams {
            block_number_or_hash,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/api/v2/blocks/{block_number_or_hash}", local_var_configuration.base_path, block_number_or_hash=crate::apis::urlencode(block_number_or_hash));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetBlockSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetBlockError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_block_txs(&self,  params: GetBlockTxsParams ) -> Result<ResponseContent<GetBlockTxsSuccess>, Error<GetBlockTxsError>> {
        
        let GetBlockTxsParams {
            block_number_or_hash,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/api/v2/blocks/{block_number_or_hash}/transactions", local_var_configuration.base_path, block_number_or_hash=crate::apis::urlencode(block_number_or_hash));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetBlockTxsSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetBlockTxsError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_block_withdrawals(&self,  params: GetBlockWithdrawalsParams ) -> Result<ResponseContent<GetBlockWithdrawalsSuccess>, Error<GetBlockWithdrawalsError>> {
        
        let GetBlockWithdrawalsParams {
            block_number_or_hash,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/api/v2/blocks/{block_number_or_hash}/withdrawals", local_var_configuration.base_path, block_number_or_hash=crate::apis::urlencode(block_number_or_hash));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetBlockWithdrawalsSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetBlockWithdrawalsError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_blocks(&self,  params: GetBlocksParams ) -> Result<ResponseContent<GetBlocksSuccess>, Error<GetBlocksError>> {
        
        let GetBlocksParams {
            r#type,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/api/v2/blocks", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = r#type {
            local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetBlocksSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetBlocksError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed successes of method [`get_block`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBlockSuccess {
    Status200(models::Block),
    UnknownValue(serde_json::Value),
}


// changed
impl ResponseContent<GetBlockSuccess> {
    pub fn try_as_success(&self) -> Option<&models::Block> {
        match &self.entity {
            Some(GetBlockSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(&self) -> Result<models::Block, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}


/// struct for typed successes of method [`get_block_txs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBlockTxsSuccess {
    Status200(models::GetBlockTxs200Response),
    UnknownValue(serde_json::Value),
}


// changed
impl ResponseContent<GetBlockTxsSuccess> {
    pub fn try_as_success(&self) -> Option<&models::GetBlockTxs200Response> {
        match &self.entity {
            Some(GetBlockTxsSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(&self) -> Result<models::GetBlockTxs200Response, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}


/// struct for typed successes of method [`get_block_withdrawals`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBlockWithdrawalsSuccess {
    Status200(models::GetBlockWithdrawals200Response),
    UnknownValue(serde_json::Value),
}


// changed
impl ResponseContent<GetBlockWithdrawalsSuccess> {
    pub fn try_as_success(&self) -> Option<&models::GetBlockWithdrawals200Response> {
        match &self.entity {
            Some(GetBlockWithdrawalsSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(&self) -> Result<models::GetBlockWithdrawals200Response, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}


/// struct for typed successes of method [`get_blocks`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBlocksSuccess {
    Status200(models::GetBlocks200Response),
    UnknownValue(serde_json::Value),
}


// changed
impl ResponseContent<GetBlocksSuccess> {
    pub fn try_as_success(&self) -> Option<&models::GetBlocks200Response> {
        match &self.entity {
            Some(GetBlocksSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(&self) -> Result<models::GetBlocks200Response, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}


/// struct for typed errors of method [`get_block`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBlockError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_block_txs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBlockTxsError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_block_withdrawals`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBlockWithdrawalsError {
    Status400(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_blocks`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBlocksError {
    Status400(),
    UnknownValue(serde_json::Value),
}

