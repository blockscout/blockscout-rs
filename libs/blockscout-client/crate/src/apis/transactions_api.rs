/*

* BlockScout API
*


* API for BlockScout web app
*

* The version of the OpenAPI document: 1.0.0
* Contact: lymarenko.lev@blockscout.com
* Generated by: https://openapi-generator.tech
*/

use async_trait::async_trait;

#[cfg(feature = "mockall")]
use mockall::automock;

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{Deserialize, Serialize};
use std::sync::Arc;

#[cfg_attr(feature = "mockall", automock)]
#[async_trait]
pub trait TransactionsApi: Send + Sync {
    /// GET /api/v2/transactions/{transaction_hash}/internal-transactions

    ///
    ///

    async fn get_transaction_internal_txs(
        &self,
        params: GetTransactionInternalTxsParams,
    ) -> Result<
        ResponseContent<GetTransactionInternalTxsSuccess>,
        Error<GetTransactionInternalTxsError>,
    >;

    /// GET /api/v2/transactions/{transaction_hash}/logs

    ///
    ///

    async fn get_transaction_logs(
        &self,
        params: GetTransactionLogsParams,
    ) -> Result<ResponseContent<GetTransactionLogsSuccess>, Error<GetTransactionLogsError>>;

    /// GET /api/v2/transactions/{transaction_hash}/raw-trace

    ///
    ///

    async fn get_transaction_raw_trace(
        &self,
        params: GetTransactionRawTraceParams,
    ) -> Result<ResponseContent<GetTransactionRawTraceSuccess>, Error<GetTransactionRawTraceError>>;

    /// GET /api/v2/transactions/{transaction_hash}/state-changes

    ///
    ///

    async fn get_transaction_state_changes(
        &self,
        params: GetTransactionStateChangesParams,
    ) -> Result<
        ResponseContent<GetTransactionStateChangesSuccess>,
        Error<GetTransactionStateChangesError>,
    >;

    /// GET /api/v2/transactions/{transaction_hash}/summary

    ///
    ///

    async fn get_transaction_summary(
        &self,
        params: GetTransactionSummaryParams,
    ) -> Result<ResponseContent<GetTransactionSummarySuccess>, Error<GetTransactionSummaryError>>;

    /// GET /api/v2/transactions/{transaction_hash}/token-transfers

    ///
    ///

    async fn get_transaction_token_transfers(
        &self,
        params: GetTransactionTokenTransfersParams,
    ) -> Result<
        ResponseContent<GetTransactionTokenTransfersSuccess>,
        Error<GetTransactionTokenTransfersError>,
    >;

    /// GET /api/v2/transactions/{transaction_hash}

    ///
    ///

    async fn get_tx(
        &self,
        params: GetTxParams,
    ) -> Result<ResponseContent<GetTxSuccess>, Error<GetTxError>>;

    /// GET /api/v2/transactions

    ///
    ///

    async fn get_txs(
        &self,
        params: GetTxsParams,
    ) -> Result<ResponseContent<GetTxsSuccess>, Error<GetTxsError>>;
}

pub struct TransactionsApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl TransactionsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

/// struct for passing parameters to the method [`get_transaction_internal_txs`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]

pub struct GetTransactionInternalTxsParams {
    /// Transaction hash
    pub transaction_hash: String,
}

/// struct for passing parameters to the method [`get_transaction_logs`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]

pub struct GetTransactionLogsParams {
    /// Transaction hash
    pub transaction_hash: String,
}

/// struct for passing parameters to the method [`get_transaction_raw_trace`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]

pub struct GetTransactionRawTraceParams {
    /// Transaction hash
    pub transaction_hash: String,
}

/// struct for passing parameters to the method [`get_transaction_state_changes`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]

pub struct GetTransactionStateChangesParams {
    /// Transaction hash
    pub transaction_hash: String,
}

/// struct for passing parameters to the method [`get_transaction_summary`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]

pub struct GetTransactionSummaryParams {
    /// Transaction hash
    pub transaction_hash: String,
}

/// struct for passing parameters to the method [`get_transaction_token_transfers`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]

pub struct GetTransactionTokenTransfersParams {
    /// Transaction hash
    pub transaction_hash: String,

    pub r#type: Option<String>,
}

/// struct for passing parameters to the method [`get_tx`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]

pub struct GetTxParams {
    /// Transaction hash
    pub transaction_hash: String,
}

/// struct for passing parameters to the method [`get_txs`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]

pub struct GetTxsParams {
    pub filter: Option<String>,

    pub r#type: Option<String>,

    pub method: Option<String>,
}

#[async_trait]
impl TransactionsApi for TransactionsApiClient {
    async fn get_transaction_internal_txs(
        &self,
        params: GetTransactionInternalTxsParams,
    ) -> Result<
        ResponseContent<GetTransactionInternalTxsSuccess>,
        Error<GetTransactionInternalTxsError>,
    > {
        let GetTransactionInternalTxsParams { transaction_hash } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v2/transactions/{transaction_hash}/internal-transactions",
            local_var_configuration.base_path,
            transaction_hash = crate::apis::urlencode(transaction_hash)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetTransactionInternalTxsSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetTransactionInternalTxsError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_transaction_logs(
        &self,
        params: GetTransactionLogsParams,
    ) -> Result<ResponseContent<GetTransactionLogsSuccess>, Error<GetTransactionLogsError>> {
        let GetTransactionLogsParams { transaction_hash } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v2/transactions/{transaction_hash}/logs",
            local_var_configuration.base_path,
            transaction_hash = crate::apis::urlencode(transaction_hash)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetTransactionLogsSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetTransactionLogsError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_transaction_raw_trace(
        &self,
        params: GetTransactionRawTraceParams,
    ) -> Result<ResponseContent<GetTransactionRawTraceSuccess>, Error<GetTransactionRawTraceError>>
    {
        let GetTransactionRawTraceParams { transaction_hash } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v2/transactions/{transaction_hash}/raw-trace",
            local_var_configuration.base_path,
            transaction_hash = crate::apis::urlencode(transaction_hash)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetTransactionRawTraceSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetTransactionRawTraceError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_transaction_state_changes(
        &self,
        params: GetTransactionStateChangesParams,
    ) -> Result<
        ResponseContent<GetTransactionStateChangesSuccess>,
        Error<GetTransactionStateChangesError>,
    > {
        let GetTransactionStateChangesParams { transaction_hash } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v2/transactions/{transaction_hash}/state-changes",
            local_var_configuration.base_path,
            transaction_hash = crate::apis::urlencode(transaction_hash)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetTransactionStateChangesSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetTransactionStateChangesError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_transaction_summary(
        &self,
        params: GetTransactionSummaryParams,
    ) -> Result<ResponseContent<GetTransactionSummarySuccess>, Error<GetTransactionSummaryError>>
    {
        let GetTransactionSummaryParams { transaction_hash } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v2/transactions/{transaction_hash}/summary",
            local_var_configuration.base_path,
            transaction_hash = crate::apis::urlencode(transaction_hash)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetTransactionSummarySuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetTransactionSummaryError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_transaction_token_transfers(
        &self,
        params: GetTransactionTokenTransfersParams,
    ) -> Result<
        ResponseContent<GetTransactionTokenTransfersSuccess>,
        Error<GetTransactionTokenTransfersError>,
    > {
        let GetTransactionTokenTransfersParams {
            transaction_hash,
            r#type,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v2/transactions/{transaction_hash}/token-transfers",
            local_var_configuration.base_path,
            transaction_hash = crate::apis::urlencode(transaction_hash)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = r#type {
            local_var_req_builder =
                local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
        }

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetTransactionTokenTransfersSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetTransactionTokenTransfersError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_tx(
        &self,
        params: GetTxParams,
    ) -> Result<ResponseContent<GetTxSuccess>, Error<GetTxError>> {
        let GetTxParams { transaction_hash } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v2/transactions/{transaction_hash}",
            local_var_configuration.base_path,
            transaction_hash = crate::apis::urlencode(transaction_hash)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetTxSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetTxError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_txs(
        &self,
        params: GetTxsParams,
    ) -> Result<ResponseContent<GetTxsSuccess>, Error<GetTxsError>> {
        let GetTxsParams {
            filter,
            r#type,
            method,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str =
            format!("{}/api/v2/transactions", local_var_configuration.base_path);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = filter {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
        }

        if let Some(ref local_var_str) = r#type {
            local_var_req_builder =
                local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
        }

        if let Some(ref local_var_str) = method {
            local_var_req_builder =
                local_var_req_builder.query(&[("method", &local_var_str.to_string())]);
        }

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetTxsSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetTxsError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed successes of method [`get_transaction_internal_txs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTransactionInternalTxsSuccess {
    Status200(models::GetTransactionInternalTxs200Response),

    UnknownValue(serde_json::Value),
}

// changed
impl ResponseContent<GetTransactionInternalTxsSuccess> {
    pub fn try_as_success(&self) -> Option<&models::GetTransactionInternalTxs200Response> {
        match &self.entity {
            Some(GetTransactionInternalTxsSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(
        &self,
    ) -> Result<models::GetTransactionInternalTxs200Response, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}

/// struct for typed successes of method [`get_transaction_logs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTransactionLogsSuccess {
    Status200(models::GetTransactionLogs200Response),

    UnknownValue(serde_json::Value),
}

// changed
impl ResponseContent<GetTransactionLogsSuccess> {
    pub fn try_as_success(&self) -> Option<&models::GetTransactionLogs200Response> {
        match &self.entity {
            Some(GetTransactionLogsSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(
        &self,
    ) -> Result<models::GetTransactionLogs200Response, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}

/// struct for typed successes of method [`get_transaction_raw_trace`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTransactionRawTraceSuccess {
    Status200(Vec<models::RawTrace>),

    UnknownValue(serde_json::Value),
}

// changed
impl ResponseContent<GetTransactionRawTraceSuccess> {
    pub fn try_as_success(&self) -> Option<&Vec<models::RawTrace>> {
        match &self.entity {
            Some(GetTransactionRawTraceSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(
        &self,
    ) -> Result<Vec<models::RawTrace>, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}

/// struct for typed successes of method [`get_transaction_state_changes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTransactionStateChangesSuccess {
    Status200(models::GetTransactionStateChanges200Response),

    UnknownValue(serde_json::Value),
}

// changed
impl ResponseContent<GetTransactionStateChangesSuccess> {
    pub fn try_as_success(&self) -> Option<&models::GetTransactionStateChanges200Response> {
        match &self.entity {
            Some(GetTransactionStateChangesSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(
        &self,
    ) -> Result<models::GetTransactionStateChanges200Response, serde_json_path_to_error::Error>
    {
        serde_json_path_to_error::from_str(&self.content)
    }
}

/// struct for typed successes of method [`get_transaction_summary`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTransactionSummarySuccess {
    Status200(models::TransactionSummary),

    UnknownValue(serde_json::Value),
}

// changed
impl ResponseContent<GetTransactionSummarySuccess> {
    pub fn try_as_success(&self) -> Option<&models::TransactionSummary> {
        match &self.entity {
            Some(GetTransactionSummarySuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(
        &self,
    ) -> Result<models::TransactionSummary, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}

/// struct for typed successes of method [`get_transaction_token_transfers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTransactionTokenTransfersSuccess {
    Status200(models::GetTransactionTokenTransfers200Response),

    UnknownValue(serde_json::Value),
}

// changed
impl ResponseContent<GetTransactionTokenTransfersSuccess> {
    pub fn try_as_success(&self) -> Option<&models::GetTransactionTokenTransfers200Response> {
        match &self.entity {
            Some(GetTransactionTokenTransfersSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(
        &self,
    ) -> Result<models::GetTransactionTokenTransfers200Response, serde_json_path_to_error::Error>
    {
        serde_json_path_to_error::from_str(&self.content)
    }
}

/// struct for typed successes of method [`get_tx`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTxSuccess {
    Status200(models::Transaction),

    UnknownValue(serde_json::Value),
}

// changed
impl ResponseContent<GetTxSuccess> {
    pub fn try_as_success(&self) -> Option<&models::Transaction> {
        match &self.entity {
            Some(GetTxSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(
        &self,
    ) -> Result<models::Transaction, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}

/// struct for typed successes of method [`get_txs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTxsSuccess {
    Status200(models::GetTxs200Response),

    UnknownValue(serde_json::Value),
}

// changed
impl ResponseContent<GetTxsSuccess> {
    pub fn try_as_success(&self) -> Option<&models::GetTxs200Response> {
        match &self.entity {
            Some(GetTxsSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(
        &self,
    ) -> Result<models::GetTxs200Response, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}

/// struct for typed errors of method [`get_transaction_internal_txs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTransactionInternalTxsError {
    Status400(),

    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_transaction_logs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTransactionLogsError {
    Status400(),

    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_transaction_raw_trace`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTransactionRawTraceError {
    Status400(),

    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_transaction_state_changes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTransactionStateChangesError {
    Status400(),

    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_transaction_summary`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTransactionSummaryError {
    Status400(),

    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_transaction_token_transfers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTransactionTokenTransfersError {
    Status400(),

    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_tx`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTxError {
    Status400(),

    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_txs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTxsError {
    Status400(),

    UnknownValue(serde_json::Value),
}
