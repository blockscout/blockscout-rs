/*
 * BlockScout API
 *
 * API for BlockScout web app
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lymarenko.lev@blockscout.com
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
#[cfg(feature = "mockall")]
use mockall::automock;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

#[cfg_attr(feature = "mockall", automock)]
#[async_trait]
pub trait StatsApi: Send + Sync {

    /// GET /api/v2/stats/charts/market
    ///
    /// 
    async fn get_market_chart(&self, ) -> Result<ResponseContent<GetMarketChartSuccess>, Error<GetMarketChartError>>;

    /// GET /api/v2/stats
    ///
    /// 
    async fn get_stats(&self, ) -> Result<ResponseContent<GetStatsSuccess>, Error<GetStatsError>>;

    /// GET /api/v2/stats/charts/transactions
    ///
    /// 
    async fn get_txs_chart(&self, ) -> Result<ResponseContent<GetTxsChartSuccess>, Error<GetTxsChartError>>;
}

pub struct StatsApiClient {
    configuration: Arc<configuration::Configuration>
}

impl StatsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}



#[async_trait]
impl StatsApi for StatsApiClient {
    async fn get_market_chart(&self, ) -> Result<ResponseContent<GetMarketChartSuccess>, Error<GetMarketChartError>> {
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/api/v2/stats/charts/market", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetMarketChartSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetMarketChartError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_stats(&self, ) -> Result<ResponseContent<GetStatsSuccess>, Error<GetStatsError>> {
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/api/v2/stats", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetStatsSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetStatsError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_txs_chart(&self, ) -> Result<ResponseContent<GetTxsChartSuccess>, Error<GetTxsChartError>> {
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/api/v2/stats/charts/transactions", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<GetTxsChartSuccess> = serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<GetTxsChartError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed successes of method [`get_market_chart`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMarketChartSuccess {
    Status200(models::GetMarketChart200Response),
    UnknownValue(serde_json::Value),
}


// changed
impl ResponseContent<GetMarketChartSuccess> {
    pub fn try_as_success(&self) -> Option<&models::GetMarketChart200Response> {
        match &self.entity {
            Some(GetMarketChartSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(&self) -> Result<models::GetMarketChart200Response, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}


/// struct for typed successes of method [`get_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetStatsSuccess {
    Status200(models::StatsResponse),
    UnknownValue(serde_json::Value),
}


// changed
impl ResponseContent<GetStatsSuccess> {
    pub fn try_as_success(&self) -> Option<&models::StatsResponse> {
        match &self.entity {
            Some(GetStatsSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(&self) -> Result<models::StatsResponse, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}


/// struct for typed successes of method [`get_txs_chart`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTxsChartSuccess {
    Status200(models::GetTxsChart200Response),
    UnknownValue(serde_json::Value),
}


// changed
impl ResponseContent<GetTxsChartSuccess> {
    pub fn try_as_success(&self) -> Option<&models::GetTxsChart200Response> {
        match &self.entity {
            Some(GetTxsChartSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(&self) -> Result<models::GetTxsChart200Response, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}


/// struct for typed errors of method [`get_market_chart`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMarketChartError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetStatsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_txs_chart`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTxsChartError {
    UnknownValue(serde_json::Value),
}

