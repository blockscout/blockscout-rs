/*

* BlockScout API
*


* API for BlockScout web app
*

* The version of the OpenAPI document: 1.0.0
* Contact: lymarenko.lev@blockscout.com
* Generated by: https://openapi-generator.tech
*/

use async_trait::async_trait;

#[cfg(feature = "mockall")]
use mockall::automock;

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{Deserialize, Serialize};
use std::sync::Arc;

#[cfg_attr(feature = "mockall", automock)]
#[async_trait]
pub trait CelestiaServiceApi: Send + Sync {
    /// GET /api/v1/celestia/blob
    ///
    ///

    async fn celestia_service_get_blob(
        &self,
        params: CelestiaServiceGetBlobParams,
    ) -> Result<ResponseContent<CelestiaServiceGetBlobSuccess>, Error<CelestiaServiceGetBlobError>>;

    /// GET /api/v1/celestia/l2BatchMetadata
    ///
    ///

    async fn celestia_service_get_l2_batch_metadata(
        &self,
        params: CelestiaServiceGetL2BatchMetadataParams,
    ) -> Result<
        ResponseContent<CelestiaServiceGetL2BatchMetadataSuccess>,
        Error<CelestiaServiceGetL2BatchMetadataError>,
    >;

    /// GET /api/v2/health
    ///
    ///

    async fn health_check(
        &self,
        params: HealthCheckParams,
    ) -> Result<ResponseContent<HealthCheckSuccess>, Error<HealthCheckError>>;
}

pub struct CelestiaServiceApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl CelestiaServiceApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

/// struct for passing parameters to the method [`celestia_service_get_blob`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]

pub struct CelestiaServiceGetBlobParams {
    pub height: Option<String>,

    pub commitment: Option<String>,

    pub skip_data: Option<bool>,
}

/// struct for passing parameters to the method [`celestia_service_get_l2_batch_metadata`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]

pub struct CelestiaServiceGetL2BatchMetadataParams {
    pub height: Option<String>,

    pub namespace: Option<String>,

    pub commitment: Option<String>,
}

/// struct for passing parameters to the method [`health_check`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]

pub struct HealthCheckParams {
    pub service: Option<String>,
}

#[async_trait]
impl CelestiaServiceApi for CelestiaServiceApiClient {
    async fn celestia_service_get_blob(
        &self,
        params: CelestiaServiceGetBlobParams,
    ) -> Result<ResponseContent<CelestiaServiceGetBlobSuccess>, Error<CelestiaServiceGetBlobError>>
    {
        let CelestiaServiceGetBlobParams {
            height,
            commitment,
            skip_data,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str =
            format!("{}/api/v1/celestia/blob", local_var_configuration.base_path);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = height {
            local_var_req_builder =
                local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
        }

        if let Some(ref local_var_str) = commitment {
            local_var_req_builder =
                local_var_req_builder.query(&[("commitment", &local_var_str.to_string())]);
        }

        if let Some(ref local_var_str) = skip_data {
            local_var_req_builder =
                local_var_req_builder.query(&[("skipData", &local_var_str.to_string())]);
        }

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<CelestiaServiceGetBlobSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<CelestiaServiceGetBlobError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn celestia_service_get_l2_batch_metadata(
        &self,
        params: CelestiaServiceGetL2BatchMetadataParams,
    ) -> Result<
        ResponseContent<CelestiaServiceGetL2BatchMetadataSuccess>,
        Error<CelestiaServiceGetL2BatchMetadataError>,
    > {
        let CelestiaServiceGetL2BatchMetadataParams {
            height,
            namespace,
            commitment,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/api/v1/celestia/l2BatchMetadata",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = height {
            local_var_req_builder =
                local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
        }

        if let Some(ref local_var_str) = namespace {
            local_var_req_builder =
                local_var_req_builder.query(&[("namespace", &local_var_str.to_string())]);
        }

        if let Some(ref local_var_str) = commitment {
            local_var_req_builder =
                local_var_req_builder.query(&[("commitment", &local_var_str.to_string())]);
        }

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<CelestiaServiceGetL2BatchMetadataSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<CelestiaServiceGetL2BatchMetadataError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn health_check(
        &self,
        params: HealthCheckParams,
    ) -> Result<ResponseContent<HealthCheckSuccess>, Error<HealthCheckError>> {
        let HealthCheckParams { service } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/api/v2/health", local_var_configuration.base_path);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = service {
            local_var_req_builder =
                local_var_req_builder.query(&[("service", &local_var_str.to_string())]);
        }

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            let local_var_entity: Option<HealthCheckSuccess> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_result = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Ok(local_var_result)
        } else {
            let local_var_entity: Option<HealthCheckError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed successes of method [`celestia_service_get_blob`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CelestiaServiceGetBlobSuccess {
    Status200(Box<models::V1CelestiaBlob>),

    UnknownValue(serde_json::Value),
}

// changed
impl ResponseContent<CelestiaServiceGetBlobSuccess> {
    pub fn try_as_success(&self) -> Option<&models::V1CelestiaBlob> {
        match &self.entity {
            Some(CelestiaServiceGetBlobSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(
        &self,
    ) -> Result<models::V1CelestiaBlob, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}

/// struct for typed successes of method [`celestia_service_get_l2_batch_metadata`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CelestiaServiceGetL2BatchMetadataSuccess {
    Status200(Box<models::V1CelestiaL2BatchMetadata>),

    UnknownValue(serde_json::Value),
}

// changed
impl ResponseContent<CelestiaServiceGetL2BatchMetadataSuccess> {
    pub fn try_as_success(&self) -> Option<&models::V1CelestiaL2BatchMetadata> {
        match &self.entity {
            Some(CelestiaServiceGetL2BatchMetadataSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(
        &self,
    ) -> Result<models::V1CelestiaL2BatchMetadata, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}

/// struct for typed successes of method [`health_check`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HealthCheckSuccess {
    Status200(Box<models::V1HealthCheckResponse>),

    UnknownValue(serde_json::Value),
}

// changed
impl ResponseContent<HealthCheckSuccess> {
    pub fn try_as_success(&self) -> Option<&models::V1HealthCheckResponse> {
        match &self.entity {
            Some(HealthCheckSuccess::Status200(data)) => Some(data),
            _ => None,
        }
    }

    pub fn try_parse_as_success_model(
        &self,
    ) -> Result<models::V1HealthCheckResponse, serde_json_path_to_error::Error> {
        serde_json_path_to_error::from_str(&self.content)
    }
}

/// struct for typed errors of method [`celestia_service_get_blob`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CelestiaServiceGetBlobError {
    DefaultResponse(models::RpcStatus),

    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`celestia_service_get_l2_batch_metadata`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CelestiaServiceGetL2BatchMetadataError {
    DefaultResponse(models::RpcStatus),

    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`health_check`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HealthCheckError {
    DefaultResponse(models::RpcStatus),

    UnknownValue(serde_json::Value),
}
