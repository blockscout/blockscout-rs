/*
 * BlockScout API
 *
 * API for BlockScout web app
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StateChange {
    #[serde(rename = "token", skip_serializing_if = "Option::is_none")]
    pub token: Option<models::TokenInfo>,
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "is_miner")]
    pub is_miner: bool,
    #[serde(rename = "address")]
    pub address: models::AddressParam,
    #[serde(rename = "balance_before", skip_serializing_if = "Option::is_none")]
    pub balance_before: Option<String>,
    #[serde(rename = "balance_after", skip_serializing_if = "Option::is_none")]
    pub balance_after: Option<String>,
    #[serde(rename = "token_id", skip_serializing_if = "Option::is_none")]
    pub token_id: Option<String>,
    #[serde(rename = "change", skip_serializing_if = "Option::is_none")]
    pub change: Option<models::StateChangeChange>,
}

impl StateChange {
    pub fn new(r#type: String, is_miner: bool, address: models::AddressParam) -> StateChange {
        StateChange {
            token: None,
            r#type,
            is_miner,
            address,
            balance_before: None,
            balance_after: None,
            token_id: None,
            change: None,
        }
    }
}
