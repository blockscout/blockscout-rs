use std::rc::Rc;

use hyper;
use super::configuration::Configuration;

pub struct APIClient {
{{#with apiInfo}}
{{#each apis}}
{{#with operations}}
{{#each operation}}
    {{#if @last}}
    {{{classFilename}}}: Box<dyn crate::apis::{{{classname}}}>,
    {{/if}}
{{/each}}
{{/with}}
{{/each}}
{{/with}}
}

impl APIClient {
    pub fn new<C: hyper::client::connect::Connect>(configuration: Configuration<C>) -> APIClient
        where C: Clone + std::marker::Send + Sync + 'static {
        let rc = Rc::new(configuration);

        APIClient {
{{#with apiInfo}}
{{#each apis}}
{{#with operations}}
{{#each operation}}
            {{#if @last}}
            {{{classFilename}}}: Box::new(crate::apis::{{{classname}}}Client::new(rc.clone())),
            {{/if}}
{{/each}}
{{/with}}
{{/each}}
{{/with}}
        }
    }

{{#with apiInfo}}
{{#each apis}}
{{#with operations}}
{{#each operation}}
{{#if @last}}
    pub fn {{{classFilename}}}(&self) -> &dyn crate::apis::{{{classname}}}{
        self.{{{classFilename}}}.as_ref()
    }

{{/if}}
{{/each}}
{{/with}}
{{/each}}
{{/with}}
}
