{{>partial_header}}
use std::sync::Arc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use hyper_util::client::legacy::connect::Connect;
use futures::Future;

use crate::models;
use super::{Error, configuration};
use super::request as __internal_request;

pub struct {{{classname}}}Client<C: Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: Connect> {{{classname}}}Client<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> {{{classname}}}Client<C> {
        {{{classname}}}Client {
            configuration,
        }
    }
}

pub trait {{{classname}}}: Send + Sync {
{{#with operations}}
{{#each operation}}
    fn {{{operationId}}}(&self, {{#each allParams}}{{{paramName}}}: {{#unless required}}Option<{{/unless}}{{#if required}}{{#if isNullable}}Option<{{/if}}{{/if}}{{#if isString}}{{#unless isUuid}}&str{{/unless}}{{/if}}{{#if isUuid}}&str{{/if}}{{#unless isString}}{{#unless isUuid}}{{#unless isPrimitiveType}}{{#unless isContainer}}models::{{/unless}}{{/unless}}{{{dataType}}}{{/unless}}{{/unless}}{{#unless required}}>{{/unless}}{{#if required}}{{#if isNullable}}>{{/if}}{{/if}}{{#unless @last}}, {{/unless}}{{/each}}) -> Pin<Box<dyn Future<Output = Result<{{#unless returnType}}(){{/unless}}{{#if returnType}}{{{returnType}}}{{/if}}, Error>> + Send>>;
{{/each}}
{{/with}}
}

impl<C: Connect>{{{classname}}} for {{{classname}}}Client<C>
    where C: Clone + std::marker::Send + Sync {
 {{#with operations}}
 {{#each operation}}
    #[allow(unused_mut)]
    fn {{{operationId}}}(&self, {{#each allParams}}{{{paramName}}}: {{#unless required}}Option<{{/unless}}{{#if required}}{{#if isNullable}}Option<{{/if}}{{/if}}{{#if isString}}{{#unless isUuid}}&str{{/unless}}{{/if}}{{#if isUuid}}&str{{/if}}{{#unless isString}}{{#unless isUuid}}{{#unless isPrimitiveType}}{{#unless isContainer}}models::{{/unless}}{{/unless}}{{{dataType}}}{{/unless}}{{/unless}}{{#unless required}}>{{/unless}}{{#if required}}{{#if isNullable}}>{{/if}}{{/if}}{{#unless @last}}, {{/unless}}{{/each}}) -> Pin<Box<dyn Future<Output = Result<{{#unless returnType}}(){{/unless}}{{#if returnType}}{{{.}}}{{/if}}, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::{{{httpMethod.toUpperCase}}}, "{{{path}}}".to_string())
        {{#if hasAuthMethods}}
        {{#each authMethods}}
        {{#if isApiKey}}
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: {{#if isKeyInHeader}}true{{/if}}{{#unless isKeyInHeader}}false{{/unless}},
                in_query: {{#if isKeyInQuery}}true{{/if}}{{#unless isKeyInQuery}}false{{/unless}},
                param_name: "{{{keyParamName}}}".to_owned(),
            }))
        {{/if}}
        {{#if isBasicBasic}}
            .with_auth(__internal_request::Auth::Basic)
        {{/if}}
        {{#if isOAuth}}
            .with_auth(__internal_request::Auth::Oauth)
        {{/if}}
        {{/each}}
        {{/if}}
        ;
        {{#each queryParams}}
        {{#if required}}
        {{#unless isNullable}}
        req = req.with_query_param("{{{baseName}}}".to_string(), {{{paramName}}}{{#if isArray}}.join(","){{/if}}.to_string());
        {{/unless}}
        {{#if isNullable}}
        match {{{paramName}}} {
            Some(param_value) => { req = req.with_query_param("{{{baseName}}}".to_string(), param_value{{#if isArray}}.join(","){{/if}}.to_string()); },
            None => { req = req.with_query_param("{{{baseName}}}".to_string(), "".to_string()); },
        }
        {{/if}}
        {{/if}}
        {{#unless required}}
        if let Some(ref s) = {{{paramName}}} {
            let query_value = {{#if isArray}}s.iter().map(|s| s.to_string()).collect::<Vec<String>>().join(","){{/if}}{{#unless isArray}}s.to_string(){{/unless}};
            req = req.with_query_param("{{{baseName}}}".to_string(), query_value);
        }
        {{/unless}}
        {{/each}}
        {{#each pathParams}}
        {{#if required}}
        {{#unless isNullable}}
        req = req.with_path_param("{{{baseName}}}".to_string(), {{{paramName}}}{{#if isArray}}.join(","){{/if}}.to_string());
        {{/unless}}
        {{#if isNullable}}
        match {{{paramName}}} {
            Some(param_value) => { req = req.with_path_param("{{{baseName}}}".to_string(), param_value{{#if isArray}}.join(","){{/if}}.to_string()); },
            None => { req = req.with_path_param("{{{baseName}}}".to_string(), "".to_string()); },
        }
        {{/if}}
        {{/if}}
        {{#unless required}}
        if let Some(param_value) = {{{paramName}}} {
            req = req.with_path_param("{{{baseName}}}".to_string(), param_value{{#if isArray}}.join(","){{/if}}.to_string());
        }
        {{/unless}}
        {{/each}}
        {{#if hasHeaderParams}}
        {{#each headerParams}}
        {{#if required}}
        {{#unless isNullable}}
        req = req.with_header_param("{{{baseName}}}".to_string(), {{{paramName}}}{{#if isArray}}.join(","){{/if}}.to_string());
        {{/unless}}
        {{#if isNullable}}
        match {{{paramName}}} {
            Some(param_value) => { req = req.with_header_param("{{{baseName}}}".to_string(), param_value{{#if isArray}}.join(","){{/if}}.to_string()); },
            None => { req = req.with_header_param("{{{baseName}}}".to_string(), "".to_string()); },
        }
        {{/if}}
        {{/if}}
        {{#unless required}}
        if let Some(param_value) = {{{paramName}}} {
            req = req.with_header_param("{{{baseName}}}".to_string(), param_value{{#if isArray}}.join(","){{/if}}.to_string());
        }
        {{/unless}}
        {{/each}}
        {{/if}}
        {{#if hasFormParams}}
        {{#each formParams}}
        {{#if isFile}}
        {{#if required}}
        {{#unless isNullable}}
        req = req.with_form_param("{{{baseName}}}".to_string(), unimplemented!());
        {{/unless}}
        {{#if isNullable}}
        match {{{paramName}}} {
            Some(param_value) => { req = req.with_form_param("{{{baseName}}}".to_string(), unimplemented!()); },
            None => { req = req.with_form_param("{{{baseName}}}".to_string(), unimplemented!()); },
        }
        {{/if}}
        {{/if}}
        {{#unless required}}
        if let Some(param_value) = {{{paramName}}} {
            req = req.with_form_param("{{{baseName}}}".to_string(), unimplemented!());
        }
        {{/unless}}
        {{/if}}
        {{#unless isFile}}
        {{#if required}}
        {{#unless isNullable}}
        req = req.with_form_param("{{{baseName}}}".to_string(), {{{paramName}}}{{#if isArray}}.join(","){{/if}}.to_string());
        {{/unless}}
        {{#if isNullable}}
        match {{{paramName}}} {
            Some(param_value) => { req = req.with_form_param("{{{baseName}}}".to_string(), param_value{{#if isArray}}.join(","){{/if}}.to_string()); },
            None => { req = req.with_form_param("{{{baseName}}}".to_string(), "".to_string()); },
        }
        {{/if}}
        {{/if}}
        {{#unless required}}
        if let Some(param_value) = {{{paramName}}} {
            req = req.with_form_param("{{{baseName}}}".to_string(), param_value{{#if isArray}}.join(","){{/if}}.to_string());
        }
        {{/unless}}
        {{/unless}}
        {{/each}}
        {{/if}}
        {{#if hasBodyParam}}
        {{#each bodyParams}}
        req = req.with_body_param({{{paramName}}});
        {{/each}}
        {{/if}}
        {{#unless returnType}}
        req = req.returns_nothing();
        {{/unless}}

        req.execute(self.configuration.borrow())
    }

{{/each}}
{{/with}}
}
