//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "cctx_status_status")]
pub enum CctxStatusStatus {
    #[sea_orm(string_value = "PendingInbound")]
    PendingInbound,
    #[sea_orm(string_value = "PendingOutbound")]
    PendingOutbound,
    #[sea_orm(string_value = "PendingRevert")]
    PendingRevert,
    #[sea_orm(string_value = "Aborted")]
    Aborted,
    #[sea_orm(string_value = "Reverted")]
    Reverted,
    #[sea_orm(string_value = "OutboundMined")]
    OutboundMined,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "coin_type")]
pub enum CoinType {
    #[sea_orm(string_value = "Zeta")]
    Zeta,
    #[sea_orm(string_value = "Gas")]
    Gas,
    #[sea_orm(string_value = "Erc20")]
    Erc20,
    #[sea_orm(string_value = "Cmd")]
    Cmd,
    #[sea_orm(string_value = "NoAssetCall")]
    NoAssetCall,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "confirmation_mode")]
pub enum ConfirmationMode {
    #[sea_orm(string_value = "SAFE")]
    Safe,
    #[sea_orm(string_value = "FAST")]
    Fast,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "inbound_status")]
pub enum InboundStatus {
    #[sea_orm(string_value = "SUCCESS")]
    Success,
    #[sea_orm(string_value = "INSUFFICIENT_DEPOSITOR_FEE")]
    InsufficientDepositorFee,
    #[sea_orm(string_value = "INVALID_RECEIVER_ADDRESS")]
    InvalidReceiverAddress,
    #[sea_orm(string_value = "INVALID_MEMO")]
    InvalidMemo,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "kind")]
pub enum Kind {
    #[sea_orm(string_value = "Realtime")]
    Realtime,
    #[sea_orm(string_value = "Historical")]
    Historical,
    #[sea_orm(string_value = "Token")]
    Token,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "processing_status")]
pub enum ProcessingStatus {
    #[sea_orm(string_value = "Locked")]
    Locked,
    #[sea_orm(string_value = "Unlocked")]
    Unlocked,
    #[sea_orm(string_value = "Failed")]
    Failed,
    #[sea_orm(string_value = "Done")]
    Done,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(
    rs_type = "String",
    db_type = "Enum",
    enum_name = "protocol_contract_version"
)]
pub enum ProtocolContractVersion {
    #[sea_orm(string_value = "V1")]
    V1,
    #[sea_orm(string_value = "V2")]
    V2,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(
    rs_type = "String",
    db_type = "Enum",
    enum_name = "tx_finalization_status"
)]
pub enum TxFinalizationStatus {
    #[sea_orm(string_value = "NotFinalized")]
    NotFinalized,
    #[sea_orm(string_value = "Finalized")]
    Finalized,
    #[sea_orm(string_value = "Executed")]
    Executed,
}
