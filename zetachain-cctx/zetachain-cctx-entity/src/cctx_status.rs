//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::CctxStatusStatus;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "cctx_status")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub cross_chain_tx_id: i32,
    pub status: CctxStatusStatus,
    pub status_message: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub error_message: Option<String>,
    pub last_update_timestamp: DateTime,
    pub is_abort_refunded: bool,
    pub created_timestamp: i64,
    #[sea_orm(column_type = "Text", nullable)]
    pub error_message_revert: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub error_message_abort: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::cross_chain_tx::Entity",
        from = "Column::CrossChainTxId",
        to = "super::cross_chain_tx::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    CrossChainTx,
}

impl Related<super::cross_chain_tx::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CrossChainTx.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
