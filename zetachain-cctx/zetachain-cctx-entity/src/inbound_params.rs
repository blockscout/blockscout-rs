//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::{
    CoinType, ConfirmationMode, InboundStatus, TxFinalizationStatus,
};
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "inbound_params")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub cross_chain_tx_id: i32,
    pub sender: String,
    pub sender_chain_id: i32,
    pub tx_origin: String,
    pub coin_type: CoinType,
    pub asset: Option<String>,
    pub amount: String,
    pub observed_hash: String,
    pub observed_external_height: i64,
    pub ballot_index: String,
    pub finalized_zeta_height: i64,
    pub tx_finalization_status: TxFinalizationStatus,
    pub is_cross_chain_call: bool,
    pub status: InboundStatus,
    pub confirmation_mode: ConfirmationMode,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::cross_chain_tx::Entity",
        from = "Column::CrossChainTxId",
        to = "super::cross_chain_tx::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    CrossChainTx,
}

impl Related<super::cross_chain_tx::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CrossChainTx.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
