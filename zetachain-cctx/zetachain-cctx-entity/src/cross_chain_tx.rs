//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use super::sea_orm_active_enums::{ProcessingStatus, ProtocolContractVersion};
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "cross_chain_tx")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub creator: String,
    #[sea_orm(unique)]
    pub index: String,
    pub zeta_fees: String,
    pub retries_number: i32,
    pub processing_status: ProcessingStatus,
    #[sea_orm(column_type = "Text", nullable)]
    pub relayed_message: Option<String>,
    pub last_status_update_timestamp: DateTime,
    pub protocol_contract_version: ProtocolContractVersion,
    pub root_id: Option<i32>,
    pub parent_id: Option<i32>,
    pub depth: i32,
    pub updated_by: String,
    pub token_id: Option<i32>,
    pub receiver_chain_id: Option<i32>,
    pub receiver: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::cctx_status::Entity")]
    CctxStatus,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    SelfRef2,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::RootId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    SelfRef1,
    #[sea_orm(has_many = "super::inbound_params::Entity")]
    InboundParams,
    #[sea_orm(has_many = "super::outbound_params::Entity")]
    OutboundParams,
    #[sea_orm(has_one = "super::revert_options::Entity")]
    RevertOptions,
    #[sea_orm(
        belongs_to = "super::token::Entity",
        from = "Column::TokenId",
        to = "super::token::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Token,
}

impl Related<super::cctx_status::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CctxStatus.def()
    }
}

impl Related<super::inbound_params::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::InboundParams.def()
    }
}

impl Related<super::outbound_params::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OutboundParams.def()
    }
}

impl Related<super::revert_options::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RevertOptions.def()
    }
}

impl Related<super::token::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Token.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
