syntax = "proto3";

package blockscout.zetachainCctx.v1;


option go_package = "github.com/blockscout/blockscout-rs/zetachain-cctx";


service CctxInfo {
  rpc GetCctxInfo(GetCctxInfoRequest) returns (CrossChainTx) {}
  rpc ListCctxs(ListCctxsRequest) returns (ListCctxsResponse) {}
}

service TokenInfo {
  rpc GetTokenInfo(GetTokenInfoRequest) returns (Token) {}
  rpc ListTokens(ListTokensRequest) returns (Tokens) {}
}


message ListTokensRequest {
}

message GetCctxInfoRequest {
  string cctx_id = 1;
}

message ListCctxsRequest {
  int64 limit = 1;
  optional int64 page_key = 2;
  Direction direction = 3;
  // Comma-separated values for multiple filters
  optional string status_reduced = 4;      // "Pending,Success,Failed"
  optional string sender_address = 5;      // "0x123,0x456,0x789"
  optional string receiver_address = 6;    // "0xabc,0xdef,0xghi"
  optional string asset = 7;               // "0x123,0x456,0x789"
  optional string coin_type = 8;           // "Zeta,Gas,Erc20"
  optional string source_chain_id = 9;     // "1,56,137"
  optional string target_chain_id = 10;     // "1,56,137"
  optional string token_symbol = 11;       // "ETH,BTC,USDC"
  optional int64 start_timestamp = 12;
  optional int64 end_timestamp = 13;
  optional string hash = 14; // hash of the inbound tx or cctx hash
}

message ListCctxsResponse {
  repeated CctxListItem items = 1;
  Pagination next_page_params = 2;
}


message Pagination {
  int64 page_key = 1;
  int64 limit = 2;
  Direction direction = 3;
}

enum Direction {
  ASC = 0;
  DESC = 1;
}



enum CoinType {
  ZETA = 0;
  GAS = 1;         // Ether, BNB, Matic, Klay, BTC, etc
  ERC20 = 2;       // ERC20 token
  CMD = 3;         // no asset, used for admin command
  NO_ASSET_CALL = 4; // no asset, used for contract call
}



enum CctxStatus {
  PENDING_INBOUND = 0;  // some observer sees inbound tx
  PENDING_OUTBOUND = 1; // super majority observer see inbound tx
  OUTBOUND_MINED = 3;   // the corresponding outbound tx is mined
  PENDING_REVERT = 4;   // outbound cannot succeed; should revert inbound
  REVERTED = 5;        // inbound reverted.
  ABORTED = 6; // inbound tx error or invalid paramters and cannot revert; just abort.
         // But the amount can be refunded to zetachain using and admin proposal
}

enum CctxStatusReduced {
  PENDING = 0;
  SUCCESS = 1;
  FAILED = 2;
}

enum TxFinalizationStatus {
  NOT_FINALIZED = 0; // the corresponding tx is not finalized
  FINALIZED = 1;    // the corresponding tx is finalized but not executed yet
  EXECUTED = 2;     // the corresponding tx is executed
}

enum ConfirmationMode {
  SAFE = 0; // an inbound/outbound is confirmed using safe confirmation count
  FAST = 1; // an inbound/outbound is confirmed using fast confirmation count
}

// InboundStatus represents the status of an observed inbound
enum InboundStatus {
  INBOUND_SUCCESS = 0;
  // this field is specifically for Bitcoin when the deposit amount is less than
  // depositor fee
  INSUFFICIENT_DEPOSITOR_FEE = 1;
  // the receiver address parsed from the inbound is invalid
  INVALID_RECEIVER_ADDRESS = 2;
  // parse memo is invalid
  INVALID_MEMO = 3;
}

message InboundParams {
  string sender = 1; // this address is the immediate contract/EOA that calls
  // the Connector.send()
  int32 sender_chain_id = 2;
  string tx_origin = 3; // this address is the EOA that signs the inbound tx
  CoinType coin_type = 4;
  string asset =
      5; // for ERC20 coin type, the asset is an address of the ERC20 contract
  string amount = 6 ;
  string observed_hash = 7;
  int64 observed_external_height = 8;
  string ballot_index = 9;
  int64 finalized_zeta_height = 10;
  TxFinalizationStatus tx_finalization_status = 11;

  // this field describes if a smart contract call should be made for a inbound
  // with assets only used for protocol contract version 2
  bool is_cross_chain_call = 12;

  // status of the inbound observation
  InboundStatus status = 20;

  // confirmation mode used for the inbound
  ConfirmationMode confirmation_mode = 21;

  // not used. do not edit.
  reserved 13 to 19;
}

message ZetaAccounting {
  // aborted_zeta_amount stores the total aborted amount for cctx of coin-type
  // ZETA
  string aborted_zeta_amount = 1 ;
}

message CallOptions {
  optional uint64 gas_limit = 1;
  optional bool is_arbitrary_call = 2;
}

message OutboundParams {
  string receiver = 1;
  int32 receiver_chain_id = 2;
  CoinType coin_type = 3;
  string amount = 4 ;
  uint64 tss_nonce = 5;
  // Deprecated (v21), use CallOptions
  uint64 gas_limit = 6;
  string gas_price = 7;
  string gas_priority_fee = 23;
  // the above are commands for zetaclients
  // the following fields are used when the outbound tx is mined
  optional string hash = 8;
  string ballot_index = 9;
  uint64 observed_external_height = 10;
  uint64 gas_used = 20;
  string effective_gas_price = 21;
  int64 effective_gas_limit = 22;
  string tss_pubkey = 11;
  TxFinalizationStatus tx_finalization_status = 12;

  CallOptions call_options = 24;

  // confirmation mode used for the outbound
  ConfirmationMode confirmation_mode = 25;

  // not used. do not edit.
  reserved 13 to 19;
}

message Status {
  CctxStatus status = 1;
  // status_message carries information about the status transitions:
  // why they were triggered, old and new status.
  string status_message = 2;
  // error_message carries information about the error that caused the tx
  // to be PendingRevert, Reverted or Aborted.
  string error_message = 6;
  int64 last_update_timestamp = 3;
  bool is_abort_refunded = 4;
  // when the CCTX was created. only populated on new transactions.
  int64 created_timestamp = 5;
  // error_message_revert carries information about the revert outbound tx ,
  // which is created if the first outbound tx fails
  string error_message_revert = 7;
  // error_message_abort carries information when aborting the CCTX fails
  string error_message_abort = 8;
}

// ProtocolContractVersion represents the version of the protocol contract used
// for cctx workflow
enum ProtocolContractVersion {
  V1 = 0;
  V2 = 1;
}

// RevertOptions represents the options for reverting a cctx
message RevertOptions {
  string revert_address = 1;
  bool call_on_revert = 2;
  string abort_address = 3;
  optional string revert_message = 4;
  string revert_gas_limit = 5 ;
}

message CctxListItem {
  string index = 1;
  CctxStatus status = 2;
  CctxStatusReduced status_reduced = 3;
  string amount = 4;
  int32 source_chain_id = 5;
  int32 target_chain_id = 6;
  int64 created_timestamp = 7;
  int64 last_update_timestamp = 8;
  string sender_address = 9;
  string receiver_address = 10;
  string asset = 11;
  CoinType coin_type = 12;
  optional string token_symbol = 13;
  optional string zrc20_contract_address = 14;
  optional int64 decimals = 15;
}

message RelatedCctx {
  string index = 1;
  int32 depth = 2;
  int32 source_chain_id = 3;
  CctxStatus status = 4;
  CctxStatusReduced status_reduced = 5;
  string inbound_amount = 6;
  CoinType inbound_coin_type = 7;
  repeated RelatedOutboundParams outbound_params = 8;
  optional string token_symbol = 9;
  optional string token_name = 10;
  optional int32 token_decimals = 11;
  optional string token_zrc20_contract_address = 12;
  optional string token_icon_url = 13;
  int64 created_timestamp = 14;
  optional string parent_index = 15;
  optional string inbound_asset = 16;
}

message RelatedOutboundParams {
  string amount = 1;
  int32 chain_id = 2;
  CoinType coin_type = 3;
  int64 gas_used = 4;
}

message CrossChainTx {
  string creator = 1;
  string index = 2;
  string zeta_fees = 5;
  string relayed_message = 6; // Not used by protocol , just relayed across
  Status cctx_status = 8;
  CctxStatusReduced cctx_status_reduced = 10;
  InboundParams inbound_params = 11;
  repeated OutboundParams outbound_params = 12;
  ProtocolContractVersion protocol_contract_version = 13;
  optional RevertOptions revert_options = 14;
  repeated RelatedCctx related_cctxs = 15;
  optional string token_symbol = 16;
  optional string token_name = 17;
  optional string zrc20_contract_address = 18;
  optional string icon_url = 19;
  optional int32 decimals = 20;
}

message GetTokenInfoRequest {
  string asset = 1;
}

message Token {
  int32 foreign_chain_id = 1;
  int32 decimals = 2;
  string name = 3;
  string symbol = 4;
  string zrc20_contract_address = 5;
  optional string icon_url = 6;
  CoinType coin_type = 7;
}


message Tokens {
  repeated Token tokens = 1;
}
