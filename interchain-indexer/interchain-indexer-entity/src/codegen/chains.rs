//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "chains")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    #[sea_orm(column_type = "Text", unique)]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub native_id: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub icon: Option<String>,
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::bridge_contracts::Entity")]
    BridgeContracts,
    #[sea_orm(has_many = "super::indexer_checkpoints::Entity")]
    IndexerCheckpoints,
    #[sea_orm(has_many = "super::indexer_failures::Entity")]
    IndexerFailures,
    #[sea_orm(has_many = "super::tokens::Entity")]
    Tokens,
}

impl Related<super::bridge_contracts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BridgeContracts.def()
    }
}

impl Related<super::indexer_checkpoints::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IndexerCheckpoints.def()
    }
}

impl Related<super::indexer_failures::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IndexerFailures.def()
    }
}

impl Related<super::tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tokens.def()
    }
}

impl Related<super::bridges::Entity> for Entity {
    fn to() -> RelationDef {
        super::indexer_checkpoints::Relation::Bridges.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::indexer_checkpoints::Relation::Chains.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
