//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "bridge_txs")]
pub struct Model {
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
    #[sea_orm(primary_key)]
    pub id: i64,
    pub message_id: i64,
    pub bridge_id: i32,
    pub contract_id: Option<i64>,
    pub block_number: i64,
    pub timestamp: DateTime,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub tx_hash: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub data: Option<Vec<u8>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::bridge_contracts::Entity",
        from = "Column::ContractId",
        to = "super::bridge_contracts::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    BridgeContracts,
    #[sea_orm(
        belongs_to = "super::bridges::Entity",
        from = "Column::BridgeId",
        to = "super::bridges::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Bridges,
}

impl Related<super::bridge_contracts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BridgeContracts.def()
    }
}

impl Related<super::bridges::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bridges.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
