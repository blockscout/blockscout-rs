//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use super::sea_orm_active_enums::MessageStatus;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "crosschain_messages")]
pub struct Model {
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    #[sea_orm(primary_key, auto_increment = false)]
    pub bridge_id: i32,
    pub status: MessageStatus,
    pub init_timestamp: Option<DateTime>,
    pub last_update_timestamp: Option<DateTime>,
    pub src_chain_id: i64,
    pub dst_chain_id: Option<i64>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub src_tx_hash: Option<Vec<u8>>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub dst_tx_hash: Option<Vec<u8>>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub sender_address: Option<Vec<u8>>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub recipient_address: Option<Vec<u8>>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub payload: Option<Vec<u8>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::bridges::Entity",
        from = "Column::BridgeId",
        to = "super::bridges::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Bridges,
    #[sea_orm(
        belongs_to = "super::chains::Entity",
        from = "Column::DstChainId",
        to = "super::chains::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Chains2,
    #[sea_orm(
        belongs_to = "super::chains::Entity",
        from = "Column::SrcChainId",
        to = "super::chains::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Chains1,
    #[sea_orm(has_many = "super::crosschain_transfers::Entity")]
    CrosschainTransfers,
}

impl Related<super::bridges::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bridges.def()
    }
}

impl Related<super::crosschain_transfers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CrosschainTransfers.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
