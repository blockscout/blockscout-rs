//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use super::sea_orm_active_enums::TransferType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "crosschain_transfers")]
pub struct Model {
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
    #[sea_orm(primary_key)]
    pub id: i64,
    pub message_id: i64,
    pub bridge_id: i32,
    pub r#type: Option<TransferType>,
    pub token_src_chain_id: i64,
    pub token_dst_chain_id: i64,
    #[sea_orm(column_type = "Decimal(Some((78, 0)))")]
    pub amount: Decimal,
    pub decimals: i16,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub token_src_address: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)")]
    pub token_dst_address: Vec<u8>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub sender_address: Option<Vec<u8>>,
    #[sea_orm(column_type = "VarBinary(StringLen::None)", nullable)]
    pub recipient_address: Option<Vec<u8>>,
    pub token_ids: Option<Vec<Decimal>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::chains::Entity",
        from = "Column::TokenDstChainId",
        to = "super::chains::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Chains2,
    #[sea_orm(
        belongs_to = "super::chains::Entity",
        from = "Column::TokenSrcChainId",
        to = "super::chains::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Chains1,
    #[sea_orm(
        belongs_to = "super::crosschain_messages::Entity",
        from = "(Column::MessageId, Column::BridgeId)",
        to = "(super::crosschain_messages::Column::Id, super::crosschain_messages::Column::BridgeId)",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    CrosschainMessages,
}

impl Related<super::crosschain_messages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CrosschainMessages.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
