syntax = "proto3";

package blockscout.scoutcloud.v1;

import "convert/convert_options.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/blockscout/blockscout-rs/scoutcloud";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Scoutcloud service";
    version: "0.1.1";
    contact: {
      name: "Blockscout";
      url: "https://blockscout.com";
      email: "support@blockscout.com";
    };
  };
  host: "scoutcloud.services.blockscout.com"
  external_docs: {
    url: "https://github.com/blockscout/blockscout-rs";
    description: "More about blockscout microservices";
  }
  tags: {name: "Instances"}
  tags: {name: "Deployments"}
  tags: {name: "Users"}
  security_definitions: {
    security: {
      key: "ApiKeyAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "x-api-key";
      }
    }
  }
};

service Scoutcloud {
  // Creating blockscout instance with config
  rpc CreateInstance(CreateInstanceRequest) returns (CreateInstanceResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "ApiKeyAuth"}
      }
      tags: "Instances"
    };
  }
  // Update configuration of blockscout instance
  rpc UpdateConfig(UpdateConfigRequest) returns (UpdateConfigResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "ApiKeyAuth"}
      }
      tags: "Instances"
    };
  }
  // Update configuration of blockscout instance (partially)
  rpc UpdateConfigPartial(UpdateConfigPartialRequest) returns (UpdateConfigResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "ApiKeyAuth"}
      }
      tags: "Instances"
    };
  }
  // Start or finish the instance
  rpc UpdateInstanceStatus(UpdateInstanceStatusRequest) returns (UpdateInstanceStatusResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "ApiKeyAuth"}
      }
      tags: "Instances"
    };
  }
  // Get detailed information of the instance
  rpc GetInstance(GetInstanceRequest) returns (Instance) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "ApiKeyAuth"}
      }
      tags: "Instances"
    };
  }
  // Delete instance
  rpc DeleteInstance(DeleteInstanceRequest) returns (DeleteInstanceResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "ApiKeyAuth"}
      }
      tags: "Instances"
    };
  }
  // Get list of all owned instances
  rpc ListInstances(ListInstancesRequest) returns (ListInstancesResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "ApiKeyAuth"}
      }
      tags: "Instances"
    };
  }
  // Get detailed information about specific deployment
  rpc GetDeployment(GetDeploymentRequest) returns (Deployment) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "ApiKeyAuth"}
      }
      tags: "Deployments"
    };
  }
  // Get detailed information about current deployment of the instance
  rpc GetCurrentDeployment(GetCurrentDeploymentRequest) returns (Deployment) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "ApiKeyAuth"}
      }
      tags: "Deployments"
    };
  }
  // Get list of deployments of the instance
  rpc ListDeployments(ListDeploymentsRequest) returns (ListDeploymentsResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "ApiKeyAuth"}
      }
      tags: "Deployments"
    };
  }
  // Get information about current account
  rpc GetProfile(GetProfileRequest) returns (UserProfile) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {key: "ApiKeyAuth"}
      }
      tags: "Users"
    };
  }
}

message Error {
  int32 code = 1;
  string message = 2;
}

message DeployConfig {
  option (convert_options.derive) = {name: "serde::Serialize"};
  option (convert_options.derive) = {name: "serde::Deserialize"};

  string rpc_url = 1 [(convert_options.convert) = {type: "url::Url"}];
  string server_size = 2;
  optional string chain_type = 3;
  optional string node_type = 12;
  optional string chain_id = 4;
  optional string token_symbol = 5;
  optional string instance_url = 6;
  optional string logo_url = 7 [(convert_options.convert) = {type: "Option<url::Url>"}];
  optional string chain_name = 8;
  optional string icon_url = 9 [(convert_options.convert) = {type: "Option<url::Url>"}];
  optional string homeplate_background = 10;
  optional string homeplate_text_color = 11;
  optional bool is_testnet = 13;
}

message DeployConfigPartial {
  option (convert_options.derive) = {name: "serde::Serialize"};
  option (convert_options.derive) = {name: "serde::Deserialize"};

  optional string rpc_url = 1 [(convert_options.convert) = {type: "Option<url::Url>"}];
  optional string server_size = 2;
  optional string chain_type = 3;
  optional string node_type = 12;
  optional string chain_id = 4;
  optional string token_symbol = 5;
  optional string instance_url = 6;
  optional string logo_url = 7 [(convert_options.convert) = {type: "Option<url::Url>"}];
  optional string chain_name = 8;
  optional string icon_url = 9 [(convert_options.convert) = {type: "Option<url::Url>"}];
  optional string homeplate_background = 10;
  optional string homeplate_text_color = 11;
  optional bool is_testnet = 13;
}

message CreateInstanceRequest {
  string name = 1;
  // initial config
  DeployConfig config = 2;
}

message CreateInstanceResponse {
  string instance_id = 1;
}

message DeleteInstanceRequest {
  string instance_id = 1;
}

message DeleteInstanceResponse {}

message UpdateConfigRequest {
  string instance_id = 1;
  DeployConfig config = 2;
}

message UpdateConfigResponse {
  DeployConfig config = 1;
}

message UpdateConfigPartialRequest {
  string instance_id = 1;
  DeployConfigPartial config = 2;
}

enum DeploymentStatus {
  NO_STATUS = 0;
  CREATED = 1;
  PENDING = 2;
  RUNNING = 3;
  STOPPING = 4;
  STOPPED = 5;
  FAILED = 6;
}

enum UpdateInstanceAction {
  START = 0;
  STOP = 1;
  RESTART = 2;
}

message UpdateInstanceStatusRequest {
  string instance_id = 1;
  UpdateInstanceAction action = 2;
}

message UpdateInstanceStatusResponse {
  DeploymentStatus status = 1;
  string deployment_id = 2;
}

message Instance {
  string instance_id = 1;
  optional string deployment_id = 2;
  string name = 3;
  string slug = 4;
  string created_at = 5;
  DeployConfig config = 6;
  DeploymentStatus deployment_status = 7;
}

message Deployment {
  string deployment_id = 1;
  string instance_id = 2;
  DeploymentStatus status = 3;
  optional string error = 4;
  string created_at = 5;
  optional string started_at = 6;
  optional string finished_at = 7;
  DeployConfig config = 8;
  optional string blockscout_url = 9;
  string total_cost = 10;
}

message GetInstanceRequest {
  string instance_id = 1;
}

message ListInstancesRequest {}

message ListInstancesResponse {
  repeated Instance items = 1;
}

message GetDeploymentRequest {
  string deployment_id = 1;
}

message ListDeploymentsRequest {
  string instance_id = 1;
}

message ListDeploymentsResponse {
  repeated Deployment items = 1;
}

message GetCurrentDeploymentRequest {
  string instance_id = 1;
}

// Users

message GetProfileRequest {}

message UserAction {
  string action = 1;
  optional string instance_id = 2;
  string timestamp = 3;
}

message UserProfile {
  string email = 1;
  optional string project_title = 2;
  string created_at = 3;
  string balance = 4;
  repeated UserAction recent_actions = 5;
}
