{
  "_comment": "Checks v0.4.0 migration of interfaces under the sources key",
  "deployed_bytecode": "0x5f3560e01c60026007820660011b61070b01601e395f51565b6318160ddd81186101cc57346107075760025460405260206040f35b6370a0823181186101cc57602436103417610707576004358060a01c610707576040525f6040516020525f5260405f205460605260206060f35b63dd62ed3e81186101cc57604436103417610707576004358060a01c610707576040526024358060a01c6107075760605260016040516020525f5260405f20806060516020525f5260405f2090505460805260206080f35b63a9059cbb81186101cc57604436103417610707576004358060a01c61070757610220523360a0526102205160c05260243560e0526101036101d4565b6001610240526020610240f35b6323b872dd81186101cc57606436103417610707576004358060a01c610707576102e0526024358060a01c61070757610300526102e0516101a052336101c0526044356101e05261015f610610565b60406102e060a05e60443560e0526101756101d4565b6001610320526020610320f35b63095ea7b381186101cc57604436103417610707576004358060a01c610707576101a052336040526101a0516060526024356080526101bf610471565b60016101c05260206101c0f35b5f5ffd5b565b565b60a05161027d57602080610180526025610100527f65726332303a207472616e736665722066726f6d20746865207a65726f206164610120527f647265737300000000000000000000000000000000000000000000000000000061014052610100816101800160208251018083835e508051806020830101601f825f03163682375050601f19601f8251602001011690509050810190506308c379a0610160528060040161017cfd5b60c05161032657602080610180526023610100527f65726332303a207472616e7366657220746f20746865207a65726f2061646472610120527f657373000000000000000000000000000000000000000000000000000000000061014052610100816101800160208251018083835e508051806020830101601f825f03163682375050601f19601f8251602001011690509050810190506308c379a0610160528060040161017cfd5b606060a060405e6103356101d0565b5f60a0516020525f5260405f20546101005260e0516101005110156103f6576020806101a0526026610120527f65726332303a207472616e7366657220616d6f756e7420657863656564732062610140527f616c616e6365000000000000000000000000000000000000000000000000000061016052610120816101a00160208251018083835e508051806020830101601f825f03163682375050601f19601f8251602001011690509050810190506308c379a0610180528060040161019cfd5b60e05161010051035f60a0516020525f5260405f205560e0515f60c0516020525f5260405f2054015f60c0516020525f5260405f205560c05160a0517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60e051610120526020610120a3606060a060405e61046f6101d2565b565b6040516105165760208061012052602460a0527f65726332303a20617070726f76652066726f6d20746865207a65726f2061646460c0527f726573730000000000000000000000000000000000000000000000000000000060e05260a0816101200160208251018083835e508051806020830101601f825f03163682375050601f19601f8251602001011690509050810190506308c379a0610100528060040161011cfd5b6060516105bb5760208061012052602260a0527f65726332303a20617070726f766520746f20746865207a65726f20616464726560c0527f737300000000000000000000000000000000000000000000000000000000000060e05260a0816101200160208251018083835e508051806020830101601f825f03163682375050601f19601f8251602001011690509050810190506308c379a0610100528060040161011cfd5b60805160016040516020525f5260405f20806060516020525f5260405f209050556060516040517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560805160a052602060a0a3565b60016101a0516020525f5260405f20806101c0516020525f5260405f20905054610200527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6102005114610705576101e0516102005110156106e95760208061028052601d610220527f65726332303a20696e73756666696369656e7420616c6c6f77616e636500000061024052610220816102800160208251018083835e508051806020830101601f825f03163682375050601f19601f8251602001011690509050810190506308c379a0610260528060040161027cfd5b60406101a060405e6101e0516102005103608052610705610471565b565b5f80fd00340182011000c601cc0018006e",
  "creation_bytecode": "0x6108d95150346102d757610011610156565b6008610320527f4d7920546f6b656e00000000000000000000000000000000000000000000000061034052610320602081510180826101c05e50506003610360527f544f4b000000000000000000000000000000000000000000000000000000000061038052610360602081510180826102005e505060126102405260076103a0527f4d792044417070000000000000000000000000000000000000000000000000006103c0526103a0602081510180826102605e505060066103e0527f76302e302e310000000000000000000000000000000000000000000000000000610400526103e0602081510180826102c05e505061010b61023c565b6107196102db610000396108f9610000f35b6005546060526040516005556040516060517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f6080a3565b3360405261016261011d565b565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6060526107d9516080526108395160a0524660c0523060e05260a06040526040805160208201209050815250565b602061010051015f81601f0160051c600381116102d75780156101f257905b8060051b61010001518160051b60600161071901526001018181186101d2575b505050610160516107f952610180516108195261010051610120206107d9526101605161018020610839526102286101a0610164565b6101a0516107195246610739523061075952565b6101c051610859526101e051610879526102005161089952610220516108b952610240516108d9523360405261027061011d565b60016003336020525f5260405f2055337fbb6e183664bd7425a9e444072cb0f1c7f7c4d5486a36d7d24d0b0735687c2ef46001610300526020610300a260206102605101806102606101005e5060206102c05101806102c06101605e506102d56101b3565b565b5f80fd5f3560e01c60026007820660011b61070b01601e395f51565b6318160ddd81186101cc57346107075760025460405260206040f35b6370a0823181186101cc57602436103417610707576004358060a01c610707576040525f6040516020525f5260405f205460605260206060f35b63dd62ed3e81186101cc57604436103417610707576004358060a01c610707576040526024358060a01c6107075760605260016040516020525f5260405f20806060516020525f5260405f2090505460805260206080f35b63a9059cbb81186101cc57604436103417610707576004358060a01c61070757610220523360a0526102205160c05260243560e0526101036101d4565b6001610240526020610240f35b6323b872dd81186101cc57606436103417610707576004358060a01c610707576102e0526024358060a01c61070757610300526102e0516101a052336101c0526044356101e05261015f610610565b60406102e060a05e60443560e0526101756101d4565b6001610320526020610320f35b63095ea7b381186101cc57604436103417610707576004358060a01c610707576101a052336040526101a0516060526024356080526101bf610471565b60016101c05260206101c0f35b5f5ffd5b565b565b60a05161027d57602080610180526025610100527f65726332303a207472616e736665722066726f6d20746865207a65726f206164610120527f647265737300000000000000000000000000000000000000000000000000000061014052610100816101800160208251018083835e508051806020830101601f825f03163682375050601f19601f8251602001011690509050810190506308c379a0610160528060040161017cfd5b60c05161032657602080610180526023610100527f65726332303a207472616e7366657220746f20746865207a65726f2061646472610120527f657373000000000000000000000000000000000000000000000000000000000061014052610100816101800160208251018083835e508051806020830101601f825f03163682375050601f19601f8251602001011690509050810190506308c379a0610160528060040161017cfd5b606060a060405e6103356101d0565b5f60a0516020525f5260405f20546101005260e0516101005110156103f6576020806101a0526026610120527f65726332303a207472616e7366657220616d6f756e7420657863656564732062610140527f616c616e6365000000000000000000000000000000000000000000000000000061016052610120816101a00160208251018083835e508051806020830101601f825f03163682375050601f19601f8251602001011690509050810190506308c379a0610180528060040161019cfd5b60e05161010051035f60a0516020525f5260405f205560e0515f60c0516020525f5260405f2054015f60c0516020525f5260405f205560c05160a0517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60e051610120526020610120a3606060a060405e61046f6101d2565b565b6040516105165760208061012052602460a0527f65726332303a20617070726f76652066726f6d20746865207a65726f2061646460c0527f726573730000000000000000000000000000000000000000000000000000000060e05260a0816101200160208251018083835e508051806020830101601f825f03163682375050601f19601f8251602001011690509050810190506308c379a0610100528060040161011cfd5b6060516105bb5760208061012052602260a0527f65726332303a20617070726f766520746f20746865207a65726f20616464726560c0527f737300000000000000000000000000000000000000000000000000000000000060e05260a0816101200160208251018083835e508051806020830101601f825f03163682375050601f19601f8251602001011690509050810190506308c379a0610100528060040161011cfd5b60805160016040516020525f5260405f20806060516020525f5260405f209050556060516040517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560805160a052602060a0a3565b60016101a0516020525f5260405f20806101c0516020525f5260405f20905054610200527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6102005114610705576101e0516102005110156106e95760208061028052601d610220527f65726332303a20696e73756666696369656e7420616c6c6f77616e636500000061024052610220816102800160208251018083835e508051806020830101601f825f03163682375050601f19601f8251602001011690509050810190506308c379a0610260528060040161027cfd5b60406101a060405e6101e0516102005103608052610705610471565b565b5f80fd00340182011000c601cc0018006e84190719810e1901e0a1657679706572830004000016",
  "compiler_version": "v0.4.0-rc6+commit.33719560",
  "file_name": "tmp/token.vy",
  "contract_name": "token",
  "input": {
    "language": "Vyper",
    "sources": {
      "0/.venvs/boa/lib/python3.11/site-packages/snekmate/tokens/interfaces/IERC20Permit.vyi": {
        "content": "# pragma version ~=0.4.0rc6\n\"\"\"\n@title EIP-2612 Interface Definition\n@custom:contract-name IERC20Permit\n@license GNU Affero General Public License v3.0 only\n@author pcaversaccio\n@notice The `permit` function implements approvals via\n        EIP-712 secp256k1 signatures:\n        https://eips.ethereum.org/EIPS/eip-2612.\n        The `permit` function allows users to modify\n        the allowance mapping using a signed message\n        (via secp256k1 signatures), instead of through\n        `msg.sender`. By not relying on `approve`,\n        the token holder's account does not need to\n        send a transaction and therefore does not need\n        to hold ether, enabling important use cases such\n        as meta-transactions.\n\n        On how to use interfaces in Vyper, please visit:\n        https://vyper.readthedocs.io/en/latest/interfaces.html#interfaces.\n\"\"\"\n\n\n@external\ndef permit(owner: address, spender: address, amount: uint256, deadline: uint256, v: uint8, r: bytes32, s: bytes32):\n    \"\"\"\n    @dev Sets `amount` as the allowance of `spender`\n         over `owner`'s tokens, given `owner`'s signed\n         approval.\n    @notice Note that `spender` cannot be the zero address.\n            Also, `deadline` must be a block timestamp in\n            the future. `v`, `r`, and `s` must be a valid\n            secp256k1 signature from `owner` over the\n            EIP-712-formatted function arguments. Eventually,\n            the signature must use `owner`'s current nonce.\n    @param owner The 20-byte owner address.\n    @param spender The 20-byte spender address.\n    @param amount The 32-byte token amount that is\n           allowed to be spent by the `spender`.\n    @param deadline The 32-byte block timestamp up\n           which the `spender` is allowed to spend `amount`.\n    @param v The secp256k1 1-byte signature parameter `v`.\n    @param r The secp256k1 32-byte signature parameter `r`.\n    @param s The secp256k1 32-byte signature parameter `s`.\n    \"\"\"\n    ...\n\n\n@external\n@view\ndef nonces(owner: address) -> uint256:\n    \"\"\"\n    @dev Returns the current on-chain tracked nonce of `owner`.\n    @param owner The 20-byte owner address.\n    @return uint256 The 32-byte owner nonce.\n    \"\"\"\n    return ...\n\n\n@external\n@view\ndef DOMAIN_SEPARATOR() -> bytes32:\n    \"\"\"\n    @dev Returns the domain separator for the current chain.\n    @return bytes32 The 32-byte domain separator.\n    \"\"\"\n    return ...\n",
        "sha256sum": "099908f88216a9d8029a16de504d945e6ff5b2579ee29d1e0cb30978e82332b2"
      },
      "0/.venvs/boa/lib/python3.11/site-packages/snekmate/utils/interfaces/IERC5267.vyi": {
        "content": "# pragma version ~=0.4.0rc6\n\"\"\"\n@title EIP-5267 Interface Definition\n@custom:contract-name IERC5267\n@license GNU Affero General Public License v3.0 only\n@author pcaversaccio\n@notice The ERC-5267 standard complements the EIP-712 standard\n        by standardising how contracts should publish the fields\n        and values that describe their domain. This enables\n        applications to retrieve this description and generate\n        appropriate domain separators in a general way, and thus\n        integrate EIP-712 signatures securely and scalably. For\n        more details, please refer to:\n        https://eips.ethereum.org/EIPS/eip-5267.\n\n        Note that Vyper interfaces that implement functions\n        with return values that require an upper bound (e.g.\n        `Bytes`, `DynArray`, or `String`), the upper bound\n        defined in the interface represents the lower bound\n        of the implementation:\n        https://github.com/vyperlang/vyper/pull/3205.\n\n        On how to use interfaces in Vyper, please visit:\n        https://vyper.readthedocs.io/en/latest/interfaces.html#interfaces.\n\"\"\"\n\n\n# @dev May be emitted to signal that the domain could\n# have changed.\nevent EIP712DomainChanged:\n    pass\n\n\n@external\n@view\ndef eip712Domain() -> (bytes1, String[50], String[20], uint256, address, bytes32, DynArray[uint256, 32]):\n    \"\"\"\n    @dev Returns the fields and values that describe the domain\n         separator used by this contract for EIP-712 signatures.\n    @notice The bits in the 1-byte bit map are read from the least\n            significant to the most significant, and fields are indexed\n            in the order that is specified by EIP-712, identical to the\n            order in which they are listed in the function type.\n    @return bytes1 The 1-byte bit map where bit `i` is set to 1\n            if and only if domain field `i` is present (`0 \u2264 i \u2264 4`).\n    @return String The maximum 50-character user-readable string name\n            of the signing domain, i.e. the name of the dApp or protocol.\n    @return String The maximum 20-character current main version of\n            the signing domain. Signatures from different versions are\n            not compatible.\n    @return uint256 The 32-byte EIP-155 chain ID.\n    @return address The 20-byte address of the verifying contract.\n    @return bytes32 The 32-byte disambiguation salt for the protocol.\n    @return DynArray The 32-byte array of EIP-712 extensions.\n    \"\"\"\n    return ...\n",
        "sha256sum": "713012f2a2d12445122d49dea14c754a49c9d33e31db76d23b3e8231b16a3bef"
      },
      "0/.venvs/boa/lib/python3.11/site-packages/snekmate/auth/ownable.vy": {
        "content": "# pragma version ~=0.4.0rc6\n\"\"\"\n@title Owner-Based Access Control Functions\n@custom:contract-name ownable\n@license GNU Affero General Public License v3.0 only\n@author pcaversaccio\n@notice These functions can be used to implement a basic access\n        control mechanism, where there is an account (an owner)\n        that can be granted exclusive access to specific functions.\n        By default, the owner account will be the one that deploys\n        the contract. This can later be changed with `transfer_ownership`.\n        An exemplary integration can be found in the ERC-20 implementation here:\n        https://github.com/pcaversaccio/snekmate/blob/main/src/snekmate/tokens/ERC20.vy.\n        The implementation is inspired by OpenZeppelin's implementation here:\n        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol.\n\"\"\"\n\n\n# @dev Returns the address of the current owner.\n# @notice If you declare a variable as `public`,\n# Vyper automatically generates an `external`\n# getter function for the variable.\nowner: public(address)\n\n\n# @dev Emitted when the ownership is transferred\n# from `previous_owner` to `new_owner`.\nevent OwnershipTransferred:\n    previous_owner: indexed(address)\n    new_owner: indexed(address)\n\n\n@deploy\n@payable\ndef __init__():\n    \"\"\"\n    @dev To omit the opcodes for checking the `msg.value`\n         in the creation-time EVM bytecode, the constructor\n         is declared as `payable`.\n    @notice The `owner` role will be assigned to\n            the `msg.sender`.\n    \"\"\"\n    self._transfer_ownership(msg.sender)\n\n\n@external\ndef transfer_ownership(new_owner: address):\n    \"\"\"\n    @dev Transfers the ownership of the contract\n         to a new account `new_owner`.\n    @notice Note that this function can only be\n            called by the current `owner`. Also,\n            the `new_owner` cannot be the zero address.\n    @param new_owner The 20-byte address of the new owner.\n    \"\"\"\n    self._check_owner()\n    assert new_owner != empty(address), \"ownable: new owner is the zero address\"\n    self._transfer_ownership(new_owner)\n\n\n@external\ndef renounce_ownership():\n    \"\"\"\n    @dev Leaves the contract without an owner.\n    @notice Renouncing ownership will leave the\n            contract without an owner, thereby\n            removing any functionality that is\n            only available to the owner.\n    \"\"\"\n    self._check_owner()\n    self._transfer_ownership(empty(address))\n\n\n@internal\ndef _check_owner():\n    \"\"\"\n    @dev Throws if the sender is not the owner.\n    \"\"\"\n    assert msg.sender == self.owner, \"ownable: caller is not the owner\"\n\n\n@internal\ndef _transfer_ownership(new_owner: address):\n    \"\"\"\n    @dev Transfers the ownership of the contract\n         to a new account `new_owner`.\n    @notice This is an `internal` function without\n            access restriction.\n    @param new_owner The 20-byte address of the new owner.\n    \"\"\"\n    old_owner: address = self.owner\n    self.owner = new_owner\n    log OwnershipTransferred(old_owner, new_owner)\n",
        "sha256sum": "7e0b8683791938b3e448cfb6f9affc8879909eb6b258a94a18f0273ac1d274e0"
      },
      "0/.venvs/boa/lib/python3.11/site-packages/snekmate/utils/ecdsa.vy": {
        "content": "# pragma version ~=0.4.0rc6\n\"\"\"\n@title Elliptic Curve Digital Signature Algorithm (ECDSA) Secp256k1-Based Functions\n@custom:contract-name ecdsa\n@license GNU Affero General Public License v3.0 only\n@author pcaversaccio\n@notice These functions can be used to verify that a message was signed by\n        the holder of the private key of a given address. All cryptographic\n        calculations are based on the Ethereum-native secp256k1 elliptic curve\n        (see https://en.bitcoin.it/wiki/Secp256k1). For verification functions\n        based on the NIST P-256 elliptic curve (also known as secp256r1), see\n        the {p256} contract. The implementation is inspired by OpenZeppelin's\n        implementation here:\n        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/ECDSA.sol.\n@custom:security Signatures must not be used as unique identifiers since the\n                 `ecrecover` EVM precompile allows for malleable (non-unique)\n                 signatures (see EIP-2: https://eips.ethereum.org/EIPS/eip-2)\n                 or signatures can be malleablised using EIP-2098:\n                 https://eips.ethereum.org/EIPS/eip-2098.\n\"\"\"\n\n\n# @dev Constants used as part of the ECDSA recovery function.\n_MALLEABILITY_THRESHOLD: constant(uint256) = 57_896_044_618_658_097_711_785_492_504_343_953_926_418_782_139_537_452_191_302_581_570_759_080_747_168\n_SIGNATURE_INCREMENT: constant(uint256) = 57_896_044_618_658_097_711_785_492_504_343_953_926_634_992_332_820_282_019_728_792_003_956_564_819_967\n\n\n@deploy\n@payable\ndef __init__():\n    \"\"\"\n    @dev To omit the opcodes for checking the `msg.value`\n         in the creation-time EVM bytecode, the constructor\n         is declared as `payable`.\n    \"\"\"\n    pass\n\n\n@internal\n@pure\ndef _recover_sig(hash: bytes32, signature: Bytes[65]) -> address:\n    \"\"\"\n    @dev Recovers the signer address from a message digest `hash`\n         and the signature `signature`.\n    @notice WARNING: This function is vulnerable to a kind of\n            signature malleability due to accepting EIP-2098\n            compact signatures in addition to the traditional\n            65-byte signature format. The potentially affected\n            contracts are those that implement signature reuse\n            or replay protection by marking the signature itself\n            as used rather than the signed message or a nonce\n            included in it. A user may take a signature that has\n            already been submitted, submit it again in a different\n            form, and bypass this protection. Also, see OpenZeppelin's\n            security advisory for more information:\n            https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-4h98-2769-gh6h.\n    @param hash The 32-byte message digest that was signed.\n    @param signature The secp256k1 64/65-byte signature of `hash`.\n    @return address The recovered 20-byte signer address.\n    \"\"\"\n    sig_length: uint256 = len(signature)\n    # 65-byte case: `(r,s,v)` standard signature.\n    if (sig_length == 65):\n        r: uint256 = extract32(signature, empty(uint256), output_type=uint256)\n        s: uint256 = extract32(signature, 32, output_type=uint256)\n        v: uint256 = convert(slice(signature, 64, 1), uint256)\n        return self._try_recover_vrs(hash, v, r, s)\n    # 64-byte case: `(r,vs)` signature; see: https://eips.ethereum.org/EIPS/eip-2098.\n    elif (sig_length == 64):\n        r: uint256 = extract32(signature, empty(uint256), output_type=uint256)\n        vs: uint256 = extract32(signature, 32, output_type=uint256)\n        return self._try_recover_r_vs(hash, r, vs)\n\n    return empty(address)\n\n\n@internal\n@pure\ndef _recover_vrs(hash: bytes32, v: uint256, r: uint256, s: uint256) -> address:\n    \"\"\"\n    @dev Recovers the signer address from a message digest `hash`\n         and the secp256k1 signature parameters `v`, `r`, and `s`.\n    @param hash The 32-byte message digest that was signed.\n    @param v The secp256k1 1-byte signature parameter `v`.\n    @param r The secp256k1 32-byte signature parameter `r`.\n    @param s The secp256k1 32-byte signature parameter `s`.\n    @return address The recovered 20-byte signer address.\n    \"\"\"\n    return self._try_recover_vrs(hash, v, r, s)\n\n\n@internal\n@pure\ndef _try_recover_r_vs(hash: bytes32, r: uint256, vs: uint256) -> address:\n    \"\"\"\n    @dev Recovers the signer address from a message digest `hash`\n         and the secp256k1 short signature fields `r` and `vs`.\n    @notice See https://eips.ethereum.org/EIPS/eip-2098 for the\n            compact signature representation.\n    @param hash The 32-byte message digest that was signed.\n    @param r The secp256k1 32-byte signature parameter `r`.\n    @param vs The secp256k1 32-byte short signature field of `v` and `s`.\n    @return address The recovered 20-byte signer address.\n    \"\"\"\n    s: uint256 = vs & _SIGNATURE_INCREMENT\n    # We do not check for an overflow here since the shift operation\n    # `vs >> 255` results essentially in a `uint8` type (`0` or `1`) and\n    # we use `uint256` as result type.\n    v: uint256 = unsafe_add(vs >> 255, 27)\n    return self._try_recover_vrs(hash, v, r, s)\n\n\n@internal\n@pure\ndef _try_recover_vrs(hash: bytes32, v: uint256, r: uint256, s: uint256) -> address:\n    \"\"\"\n    @dev Recovers the signer address from a message digest `hash`\n         and the secp256k1 signature parameters `v`, `r`, and `s`.\n    @notice All client implementations of the precompile `ecrecover`\n            check if the value of `v` is `27` or `28`. The references\n            for the different client implementations can be found here:\n            https://github.com/ethereum/yellowpaper/pull/860. Thus,\n            the signature check on the value of `v` is neglected.\n    @param hash The 32-byte message digest that was signed.\n    @param v The secp256k1 1-byte signature parameter `v`.\n    @param r The secp256k1 32-byte signature parameter `r`.\n    @param s The secp256k1 32-byte signature parameter `s`.\n    @return address The recovered 20-byte signer address.\n    \"\"\"\n    assert s <= _MALLEABILITY_THRESHOLD, \"ecdsa: invalid signature `s` value\"\n\n    signer: address = ecrecover(hash, v, r, s)\n    assert signer != empty(address), \"ecdsa: invalid signature\"\n\n    return signer\n",
        "sha256sum": "9a36b8cf2ab0f478cfa31f5b33532571f22a0ffa5718fc7fc44941f90342e6b2"
      },
      "0/.venvs/boa/lib/python3.11/site-packages/snekmate/utils/message_hash_utils.vy": {
        "content": "# pragma version ~=0.4.0rc6\n\"\"\"\n@title Signature Message Hash Utility Functions\n@custom:contract-name message_hash_utils\n@license GNU Affero General Public License v3.0 only\n@author pcaversaccio\n@notice These functions can be used to generate message hashes that conform\n        to the EIP-191 (https://eips.ethereum.org/EIPS/eip-191) as well as\n        EIP-712 (https://eips.ethereum.org/EIPS/eip-712) specifications. The\n        implementation is inspired by OpenZeppelin's implementation here:\n        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/MessageHashUtils.sol.\n\"\"\"\n\n\n@deploy\n@payable\ndef __init__():\n    \"\"\"\n    @dev To omit the opcodes for checking the `msg.value`\n         in the creation-time EVM bytecode, the constructor\n         is declared as `payable`.\n    \"\"\"\n    pass\n\n\n@internal\n@pure\ndef _to_eth_signed_message_hash(hash: bytes32) -> bytes32:\n    \"\"\"\n    @dev Returns an Ethereum signed message from a 32-byte\n         message digest `hash`.\n    @notice This function returns a 32-byte hash that\n            corresponds to the one signed with the JSON-RPC method:\n            https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign.\n            This method is part of EIP-191:\n            https://eips.ethereum.org/EIPS/eip-191.\n    @param hash The 32-byte message digest.\n    @return bytes32 The 32-byte Ethereum signed message.\n    \"\"\"\n    return keccak256(concat(b\"\\x19Ethereum Signed Message:\\n32\", hash))\n\n\n@internal\n@view\ndef _to_data_with_intended_validator_hash_self(data: Bytes[1_024]) -> bytes32:\n    \"\"\"\n    @dev Returns an Ethereum signed data with this contract\n         as the intended validator and a maximum 1,024-byte\n         payload `data`.\n    @notice This function structures the data according to\n            the version `0x00` of EIP-191:\n            https://eips.ethereum.org/EIPS/eip-191#version-0x00.\n    @param data The maximum 1,024-byte data to be signed.\n    @return bytes32 The 32-byte Ethereum signed data.\n    \"\"\"\n    return self._to_data_with_intended_validator_hash(self, data)\n\n\n@internal\n@pure\ndef _to_data_with_intended_validator_hash(validator: address, data: Bytes[1_024]) -> bytes32:\n    \"\"\"\n    @dev Returns an Ethereum signed data with `validator` as\n         the intended validator and a maximum 1,024-byte payload\n         `data`.\n    @notice This function structures the data according to\n            the version `0x00` of EIP-191:\n            https://eips.ethereum.org/EIPS/eip-191#version-0x00.\n    @param validator The 20-byte intended validator address.\n    @param data The maximum 1,024-byte data to be signed.\n    @return bytes32 The 32-byte Ethereum signed data.\n    \"\"\"\n    return keccak256(concat(b\"\\x19\\x00\", convert(validator, bytes20), data))\n\n\n@internal\n@pure\ndef _to_typed_data_hash(domain_separator: bytes32, struct_hash: bytes32) -> bytes32:\n    \"\"\"\n    @dev Returns an Ethereum signed typed data from a 32-byte\n         `domain_separator` and a 32-byte `struct_hash`.\n    @notice This function returns a 32-byte hash that\n            corresponds to the one signed with the JSON-RPC method:\n            https://eips.ethereum.org/EIPS/eip-712#specification-of-the-eth_signtypeddata-json-rpc.\n            This method is part of EIP-712:\n            https://eips.ethereum.org/EIPS/eip-712.\n    @param domain_separator The 32-byte domain separator that is\n           used as part of the EIP-712 encoding scheme.\n    @param struct_hash The 32-byte struct hash that is used as\n           part of the EIP-712 encoding scheme. See the definition:\n           https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct.\n    @return bytes32 The 32-byte Ethereum signed typed data.\n    \"\"\"\n    return keccak256(concat(b\"\\x19\\x01\", domain_separator, struct_hash))\n",
        "sha256sum": "81dae0b64dabb1a49148c960efb292db0b6444c34efa4cfdda7a19a31fec6a4a"
      },
      "0/.venvs/boa/lib/python3.11/site-packages/snekmate/utils/eip712_domain_separator.vy": {
        "content": "# pragma version ~=0.4.0rc6\n\"\"\"\n@title EIP-712 Domain Separator\n@custom:contract-name eip712_domain_separator\n@license GNU Affero General Public License v3.0 only\n@author pcaversaccio\n@notice These functions are part of EIP-712: https://eips.ethereum.org/EIPS/eip-712.\n        These functions implement the version of encoding known\n        as \"v4\" as implemented by the JSON-RPC method:\n        https://docs.metamask.io/guide/signing-data.html#sign-typed-data-v4.\n        In addition, this contract also implements EIP-5267:\n        https://eips.ethereum.org/EIPS/eip-5267.\n        The implementation is inspired by OpenZeppelin's implementation here:\n        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/EIP712.sol.\n\"\"\"\n\n\n# @dev We import and implement the `IERC5267` interface,\n# which is written using standard Vyper syntax.\nimport interfaces.IERC5267 as IERC5267\nimplements: IERC5267\n\n\n# @dev We import the `message_hash_utils` module.\n# @notice Please note that the `message_hash_utils`\n# module is stateless and therefore does not require\n# the `uses` keyword for usage.\nfrom . import message_hash_utils\n\n\n# @dev The 32-byte type hash for the EIP-712 domain separator.\n_TYPE_HASH: constant(bytes32) = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\n\n\n# @dev Caches the domain separator as an `immutable`\n# value, but also stores the corresponding chain ID\n# to invalidate the cached domain separator if the\n# chain ID changes.\n_CACHED_DOMAIN_SEPARATOR: immutable(bytes32)\n_CACHED_CHAIN_ID: immutable(uint256)\n\n\n# @dev Caches `self` to `immutable` storage to avoid\n# potential issues if a vanilla contract is used in\n# a `delegatecall` context.\n_CACHED_SELF: immutable(address)\n\n\n# @dev `immutable` variables to store the (hashed)\n# name and (hashed) version during contract creation.\n_NAME: immutable(String[50])\n_HASHED_NAME: immutable(bytes32)\n_VERSION: immutable(String[20])\n_HASHED_VERSION: immutable(bytes32)\n\n\n@deploy\n@payable\ndef __init__(name_: String[50], version_: String[20]):\n    \"\"\"\n    @dev Initialises the domain separator and the parameter caches.\n         To omit the opcodes for checking the `msg.value` in the\n         creation-time EVM bytecode, the constructor is declared as\n         `payable`.\n    @notice The definition of the domain separator can be found here:\n            https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator.\n            Since the Vyper design requires strings of fixed size,\n            we arbitrarily set the maximum length for `name` to 50\n            characters and `version` to 20 characters.\n    @param name_ The maximum 50-character user-readable string name\n           of the signing domain, i.e. the name of the dApp or protocol.\n    @param version_ The maximum 20-character current main version of\n           the signing domain. Signatures from different versions are\n           not compatible.\n    \"\"\"\n    _NAME = name_\n    _VERSION = version_\n    _HASHED_NAME = keccak256(name_)\n    _HASHED_VERSION = keccak256(version_)\n    _CACHED_DOMAIN_SEPARATOR = self._build_domain_separator()\n    _CACHED_CHAIN_ID = chain.id\n    _CACHED_SELF = self\n\n\n@external\n@view\ndef eip712Domain() -> (bytes1, String[50], String[20], uint256, address, bytes32, DynArray[uint256, 32]):\n    \"\"\"\n    @dev Returns the fields and values that describe the domain\n         separator used by this contract for EIP-712 signatures.\n    @notice The bits in the 1-byte bit map are read from the least\n            significant to the most significant, and fields are indexed\n            in the order that is specified by EIP-712, identical to the\n            order in which they are listed in the function type.\n    @return bytes1 The 1-byte bit map where bit `i` is set to 1\n            if and only if domain field `i` is present (`0 \u2264 i \u2264 4`).\n    @return String The maximum 50-character user-readable string name\n            of the signing domain, i.e. the name of the dApp or protocol.\n    @return String The maximum 20-character current main version of\n            the signing domain. Signatures from different versions are\n            not compatible.\n    @return uint256 The 32-byte EIP-155 chain ID.\n    @return address The 20-byte address of the verifying contract.\n    @return bytes32 The 32-byte disambiguation salt for the protocol.\n    @return DynArray The 32-byte array of EIP-712 extensions.\n    \"\"\"\n    # Note that `\\x0f` equals `01111`.\n    return (convert(b\"\\x0f\", bytes1), _NAME, _VERSION, chain.id, self, empty(bytes32), empty(DynArray[uint256, 32]))\n\n\n@internal\n@view\ndef _domain_separator_v4() -> bytes32:\n    \"\"\"\n    @dev Returns the domain separator for the current chain.\n    @return bytes32 The 32-byte domain separator.\n    \"\"\"\n    if ((self == _CACHED_SELF) and (chain.id == _CACHED_CHAIN_ID)):\n        return _CACHED_DOMAIN_SEPARATOR\n\n    return self._build_domain_separator()\n\n\n@internal\n@view\ndef _build_domain_separator() -> bytes32:\n    \"\"\"\n    @dev Builds the domain separator for the current chain.\n    @return bytes32 The 32-byte domain separator.\n    \"\"\"\n    return keccak256(_abi_encode(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION, chain.id, self))\n\n\n@internal\n@view\ndef _hash_typed_data_v4(struct_hash: bytes32) -> bytes32:\n    \"\"\"\n    @dev Returns the hash of the fully encoded EIP-712\n         message for this domain.\n    @notice The definition of the hashed struct can be found here:\n            https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct.\n    @param struct_hash The 32-byte hashed struct.\n    @return bytes32 The 32-byte fully encoded EIP712\n            message hash for this domain.\n    \"\"\"\n    return message_hash_utils._to_typed_data_hash(self._domain_separator_v4(), struct_hash)\n",
        "sha256sum": "aaae7747cefeda20d453a53d3ad1ff8a1b4e640da2810e7f7d850202a477e96a"
      },
      "0/.venvs/boa/lib/python3.11/site-packages/snekmate/tokens/erc20.vy": {
        "content": "# pragma version ~=0.4.0rc6\n\"\"\"\n@title Modern and Gas-Efficient ERC-20 + EIP-2612 Implementation\n@custom:contract-name erc20\n@license GNU Affero General Public License v3.0 only\n@author pcaversaccio\n@notice These functions implement the ERC-20\n        standard interface:\n        - https://eips.ethereum.org/EIPS/eip-20.\n        In addition, the following functions have\n        been added for convenience:\n        - `name` (`external` `view` function),\n        - `symbol` (`external` `view` function),\n        - `decimals` (`external` `view` function),\n        - `burn` (`external` function),\n        - `burn_from` (`external` function),\n        - `is_minter` (`external` `view` function),\n        - `mint` (`external` function),\n        - `set_minter` (`external` function),\n        - `permit` (`external` function),\n        - `nonces` (`external` `view` function),\n        - `DOMAIN_SEPARATOR` (`external` `view` function),\n        - `eip712Domain` (`external` `view` function),\n        - `owner` (`external` `view` function),\n        - `transfer_ownership` (`external` function),\n        - `renounce_ownership` (`external` function),\n        - `_before_token_transfer` (`internal` function),\n        - `_after_token_transfer` (`internal` function).\n        The `permit` function implements approvals via\n        EIP-712 secp256k1 signatures:\n        https://eips.ethereum.org/EIPS/eip-2612.\n        In addition, this contract also implements the EIP-5267\n        function `eip712Domain`:\n        https://eips.ethereum.org/EIPS/eip-5267.\n        The implementation is inspired by OpenZeppelin's\n        implementation here:\n        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol,\n        as well as by ApeAcademy's implementation here:\n        https://github.com/ApeAcademy/ERC20/blob/main/%7B%7Bcookiecutter.project_name%7D%7D/contracts/Token.vy.\n@custom:security This ERC-20 implementation allows the commonly known\n                 address poisoning attack, where `transferFrom` instructions\n                 are executed from arbitrary addresses with an `amount` of `0`.\n                 However, this poisoning attack is not an on-chain vulnerability.\n                 All assets are safe. It is an off-chain log interpretation issue.\n                 The main reason why we do not disallow address poisonig is that\n                 we do not want to potentially break any DeFi composability.\n                 This issue has been extensively discussed here:\n                 https://github.com/pcaversaccio/snekmate/issues/51,\n                 as well as in the OpenZeppelin repository:\n                 https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3931.\n\"\"\"\n\n\n# @dev We import and implement the `IERC20` interface,\n# which is a built-in interface of the Vyper compiler.\nfrom ethereum.ercs import IERC20\nimplements: IERC20\n\n\n# @dev We import and implement the `IERC20Detailed` interface,\n# which is a built-in interface of the Vyper compiler.\nfrom ethereum.ercs import IERC20Detailed\nimplements: IERC20Detailed\n\n\n# @dev We import and implement the `IERC20Permit`\n# interface, which is written using standard Vyper\n# syntax.\nimport interfaces.IERC20Permit as IERC20Permit\nimplements: IERC20Permit\n\n\n# @dev We import and implement the `IERC5267` interface,\n# which is written using standard Vyper syntax.\nfrom ..utils.interfaces import IERC5267\nimplements: IERC5267\n\n\n# @dev We import and use the `ownable` module.\nfrom ..auth import ownable\nuses: ownable\n\n\n# @dev We import the `ecdsa` module.\n# @notice Please note that the `ecdsa` module\n# is stateless and therefore does not require\n# the `uses` keyword for usage.\nfrom ..utils import ecdsa\n\n\n# @dev We import and use the `eip712_domain_separator` module.\nfrom ..utils import eip712_domain_separator\ninitializes: eip712_domain_separator\n\n\n# @dev We export (i.e. the runtime bytecode exposes these\n# functions externally, allowing them to be called using\n# the ABI encoding specification) the `external` getter\n# function `owner` from the `ownable` module as well as the\n# function `eip712Domain` from the `eip712_domain_separator`\n# module.\n# @notice Please note that you must always also export (if\n# required by the contract logic) `public` declared `constant`,\n# `immutable`, and state variables, for which Vyper automatically\n# generates an `external` getter function for the variable.\nexports: (\n    # @notice This ERC-20 implementation includes the `transfer_ownership`\n    # and `renounce_ownership` functions, which incorporate\n    # the additional built-in `is_minter` role logic and are\n    # therefore not exported from the `ownable` module.\n    ownable.owner,\n    eip712_domain_separator.eip712Domain,\n)\n\n\n# @dev The 32-byte type hash of the `permit` function.\n_PERMIT_TYPE_HASH: constant(bytes32) = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")\n\n\n# @dev Returns the name of the token.\n# @notice If you declare a variable as `public`,\n# Vyper automatically generates an `external`\n# getter function for the variable. Furthermore,\n# to preserve consistency with the interface for\n# the optional metadata functions of the ERC-20\n# standard, we use lower case letters for the\n# `immutable` variables `name`, `symbol`, and\n# `decimals`.\nname: public(immutable(String[25]))\n\n\n# @dev Returns the symbol of the token.\n# @notice See comment on lower case letters\n# above at `name`.\nsymbol: public(immutable(String[5]))\n\n\n# @dev Returns the decimal places of the token.\n# @notice See comment on lower case letters\n# above at `name`.\ndecimals: public(immutable(uint8))\n\n\n# @dev Returns the amount of tokens owned by an `address`.\nbalanceOf: public(HashMap[address, uint256])\n\n\n# @dev Returns the remaining number of tokens that a\n# `spender` will be allowed to spend on behalf of\n# `owner` through `transferFrom`. This is zero by\n# default. This value changes when `approve` or\n# `transferFrom` are called.\nallowance: public(HashMap[address, HashMap[address, uint256]])\n\n\n# @dev Returns the amount of tokens in existence.\ntotalSupply: public(uint256)\n\n\n# @dev Returns `True` if an `address` has been\n# granted the minter role.\nis_minter: public(HashMap[address, bool])\n\n\n# @dev Returns the current on-chain tracked nonce\n# of `address`.\nnonces: public(HashMap[address, uint256])\n\n\n# @dev Emitted when the status of a `minter`\n# address is changed.\nevent RoleMinterChanged:\n    minter: indexed(address)\n    status: bool\n\n\n@deploy\n@payable\ndef __init__(name_: String[25], symbol_: String[5], decimals_: uint8, name_eip712_: String[50], version_eip712_: String[20]):\n    \"\"\"\n    @dev To omit the opcodes for checking the `msg.value`\n         in the creation-time EVM bytecode, the constructor\n         is declared as `payable`.\n    @notice At initialisation time, the `owner` role will be\n            assigned to the `msg.sender` since we `uses` the\n            `ownable` module, which implements the aforementioned\n            logic at contract creation time.\n    @param name_ The maximum 25-character user-readable\n           string name of the token.\n    @param symbol_ The maximum 5-character user-readable\n           string symbol of the token.\n    @param decimals_ The 1-byte decimal places of the token.\n    @param name_eip712_ The maximum 50-character user-readable\n           string name of the signing domain, i.e. the name\n           of the dApp or protocol.\n    @param version_eip712_ The maximum 20-character current\n           main version of the signing domain. Signatures\n           from different versions are not compatible.\n    \"\"\"\n    name = name_\n    symbol = symbol_\n    decimals = decimals_\n\n    ownable._transfer_ownership(msg.sender)\n    self.is_minter[msg.sender] = True\n    log RoleMinterChanged(msg.sender, True)\n\n    eip712_domain_separator.__init__(name_eip712_, version_eip712_)\n\n\n@external\ndef transfer(to: address, amount: uint256) -> bool:\n    \"\"\"\n    @dev Moves `amount` tokens from the caller's\n         account to `to`.\n    @notice Note that `to` cannot be the zero address.\n            Also, the caller must have a balance of at\n            least `amount`.\n    @param to The 20-byte receiver address.\n    @param amount The 32-byte token amount to be transferred.\n    @return bool The verification whether the transfer succeeded\n            or failed. Note that the function reverts instead\n            of returning `False` on a failure.\n    \"\"\"\n    self._transfer(msg.sender, to, amount)\n    return True\n\n\n@external\ndef approve(spender: address, amount: uint256) -> bool:\n    \"\"\"\n    @dev Sets `amount` as the allowance of `spender`\n         over the caller's tokens.\n    @notice WARNING: Note that if `amount` is the maximum\n            `uint256`, the allowance is not updated on\n            `transferFrom`. This is semantically equivalent\n            to an infinite approval. Also, `spender` cannot\n            be the zero address.\n\n            IMPORTANT: Beware that changing an allowance\n            with this method brings the risk that someone\n            may use both the old and the new allowance by\n            unfortunate transaction ordering. One possible\n            solution to mitigate this race condition is to\n            first reduce the spender's allowance to 0 and\n            set the desired amount afterwards:\n            https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729.\n    @param spender The 20-byte spender address.\n    @param amount The 32-byte token amount that is\n           allowed to be spent by the `spender`.\n    @return bool The verification whether the approval operation\n            succeeded or failed. Note that the function reverts\n            instead of returning `False` on a failure.\n    \"\"\"\n    self._approve(msg.sender, spender, amount)\n    return True\n\n\n@external\ndef transferFrom(owner: address, to: address, amount: uint256) -> bool:\n    \"\"\"\n    @dev Moves `amount` tokens from `owner`\n         to `to` using the allowance mechanism.\n         The `amount` is then deducted from the\n         caller's allowance.\n    @notice Note that `owner` and `to` cannot\n            be the zero address. Also, `owner`\n            must have a balance of at least `amount`.\n            Eventually, the caller must have allowance\n            for `owner`'s tokens of at least `amount`.\n\n            WARNING: The function does not update the\n            allowance if the current allowance is the\n            maximum `uint256`.\n    @param owner The 20-byte owner address.\n    @param to The 20-byte receiver address.\n    @param amount The 32-byte token amount to be transferred.\n    @return bool The verification whether the transfer succeeded\n            or failed. Note that the function reverts instead\n            of returning `False` on a failure.\n    \"\"\"\n    self._spend_allowance(owner, msg.sender, amount)\n    self._transfer(owner, to, amount)\n    return True\n\n\n@external\ndef burn(amount: uint256):\n    \"\"\"\n    @dev Destroys `amount` tokens from the caller.\n    @param amount The 32-byte token amount to be destroyed.\n    \"\"\"\n    self._burn(msg.sender, amount)\n\n\n@external\ndef burn_from(owner: address, amount: uint256):\n    \"\"\"\n    @dev Destroys `amount` tokens from `owner`,\n         deducting from the caller's allowance.\n    @notice Note that `owner` cannot be the\n            zero address. Also, the caller must\n            have an allowance for `owner`'s tokens\n            of at least `amount`.\n    @param owner The 20-byte owner address.\n    @param amount The 32-byte token amount to be destroyed.\n    \"\"\"\n    self._spend_allowance(owner, msg.sender, amount)\n    self._burn(owner, amount)\n\n\n@external\ndef mint(owner: address, amount: uint256):\n    \"\"\"\n    @dev Creates `amount` tokens and assigns them to `owner`.\n    @notice Only authorised minters can access this function.\n            Note that `owner` cannot be the zero address.\n    @param owner The 20-byte owner address.\n    @param amount The 32-byte token amount to be created.\n    \"\"\"\n    assert self.is_minter[msg.sender], \"erc20: access is denied\"\n    self._mint(owner, amount)\n\n\n@external\ndef set_minter(minter: address, status: bool):\n    \"\"\"\n    @dev Adds or removes an address `minter` to/from the\n         list of allowed minters. Note that only the\n         `owner` can add or remove `minter` addresses.\n         Also, the `minter` cannot be the zero address.\n         Eventually, the `owner` cannot remove himself\n         from the list of allowed minters.\n    @param minter The 20-byte minter address.\n    @param status The Boolean variable that sets the status.\n    \"\"\"\n    ownable._check_owner()\n    assert minter != empty(address), \"erc20: minter is the zero address\"\n    # We ensured in the previous step `ownable._check_owner`\n    # that `msg.sender` is the `owner`.\n    assert minter != msg.sender, \"erc20: minter is owner address\"\n    self.is_minter[minter] = status\n    log RoleMinterChanged(minter, status)\n\n\n@external\ndef permit(owner: address, spender: address, amount: uint256, deadline: uint256, v: uint8, r: bytes32, s: bytes32):\n    \"\"\"\n    @dev Sets `amount` as the allowance of `spender`\n         over `owner`'s tokens, given `owner`'s signed\n         approval.\n    @notice Note that `spender` cannot be the zero address.\n            Also, `deadline` must be a block timestamp in\n            the future. `v`, `r`, and `s` must be a valid\n            secp256k1 signature from `owner` over the\n            EIP-712-formatted function arguments. Eventually,\n            the signature must use `owner`'s current nonce.\n    @param owner The 20-byte owner address.\n    @param spender The 20-byte spender address.\n    @param amount The 32-byte token amount that is\n           allowed to be spent by the `spender`.\n    @param deadline The 32-byte block timestamp up\n           which the `spender` is allowed to spend `amount`.\n    @param v The secp256k1 1-byte signature parameter `v`.\n    @param r The secp256k1 32-byte signature parameter `r`.\n    @param s The secp256k1 32-byte signature parameter `s`.\n    \"\"\"\n    assert block.timestamp <= deadline, \"erc20: expired deadline\"\n\n    current_nonce: uint256 = self.nonces[owner]\n    self.nonces[owner] = unsafe_add(current_nonce, 1)\n\n    struct_hash: bytes32 = keccak256(_abi_encode(_PERMIT_TYPE_HASH, owner, spender, amount, current_nonce, deadline))\n    hash: bytes32  = eip712_domain_separator._hash_typed_data_v4(struct_hash)\n\n    signer: address = ecdsa._recover_vrs(hash, convert(v, uint256), convert(r, uint256), convert(s, uint256))\n    assert signer == owner, \"erc20: invalid signature\"\n\n    self._approve(owner, spender, amount)\n\n\n@external\n@view\ndef DOMAIN_SEPARATOR() -> bytes32:\n    \"\"\"\n    @dev Returns the domain separator for the current chain.\n    @return bytes32 The 32-byte domain separator.\n    \"\"\"\n    return eip712_domain_separator._domain_separator_v4()\n\n\n@external\ndef transfer_ownership(new_owner: address):\n    \"\"\"\n    @dev Transfers the ownership of the contract\n         to a new account `new_owner`.\n    @notice Note that this function can only be\n            called by the current `owner`. Also,\n            the `new_owner` cannot be the zero address.\n\n            WARNING: The ownership transfer also removes\n            the previous owner's minter role and assigns\n            the minter role to `new_owner` accordingly.\n    @param new_owner The 20-byte address of the new owner.\n    \"\"\"\n    ownable._check_owner()\n    assert new_owner != empty(address), \"erc20: new owner is the zero address\"\n\n    self.is_minter[msg.sender] = False\n    log RoleMinterChanged(msg.sender, False)\n\n    ownable._transfer_ownership(new_owner)\n    self.is_minter[new_owner] = True\n    log RoleMinterChanged(new_owner, True)\n\n\n@external\ndef renounce_ownership():\n    \"\"\"\n    @dev Leaves the contract without an owner.\n    @notice Renouncing ownership will leave the\n            contract without an owner, thereby\n            removing any functionality that is\n            only available to the owner. Note\n            that the `owner` is also removed from\n            the list of allowed minters.\n\n            WARNING: All other existing `minter`\n            addresses will still be able to create\n            new tokens. Consider removing all non-owner\n            minter addresses first via `set_minter`\n            before calling `renounce_ownership`.\n    \"\"\"\n    ownable._check_owner()\n    self.is_minter[msg.sender] = False\n    log RoleMinterChanged(msg.sender, False)\n    ownable._transfer_ownership(empty(address))\n\n\n@internal\ndef _transfer(owner: address, to: address, amount: uint256):\n    \"\"\"\n    @dev Moves `amount` tokens from the owner's\n         account to `to`.\n    @notice Note that `owner` and `to` cannot be\n            the zero address. Also, `owner` must\n            have a balance of at least `amount`.\n    @param owner The 20-byte owner address.\n    @param to The 20-byte receiver address.\n    @param amount The 32-byte token amount to be transferred.\n    \"\"\"\n    assert owner != empty(address), \"erc20: transfer from the zero address\"\n    assert to != empty(address), \"erc20: transfer to the zero address\"\n\n    self._before_token_transfer(owner, to, amount)\n\n    owner_balanceOf: uint256 = self.balanceOf[owner]\n    assert owner_balanceOf >= amount, \"erc20: transfer amount exceeds balance\"\n    self.balanceOf[owner] = unsafe_sub(owner_balanceOf, amount)\n    self.balanceOf[to] = unsafe_add(self.balanceOf[to], amount)\n    log IERC20.Transfer(owner, to, amount)\n\n    self._after_token_transfer(owner, to, amount)\n\n\n@internal\ndef _mint(owner: address, amount: uint256):\n    \"\"\"\n    @dev Creates `amount` tokens and assigns\n         them to `owner`, increasing the\n         total supply.\n    @notice This is an `internal` function without\n            access restriction. Note that `owner`\n            cannot be the zero address.\n    @param owner The 20-byte owner address.\n    @param amount The 32-byte token amount to be created.\n    \"\"\"\n    assert owner != empty(address), \"erc20: mint to the zero address\"\n\n    self._before_token_transfer(empty(address), owner, amount)\n\n    self.totalSupply += amount\n    self.balanceOf[owner] = unsafe_add(self.balanceOf[owner], amount)\n    log IERC20.Transfer(empty(address), owner, amount)\n\n    self._after_token_transfer(empty(address), owner, amount)\n\n\n@internal\ndef _burn(owner: address, amount: uint256):\n    \"\"\"\n    @dev Destroys `amount` tokens from `owner`,\n         reducing the total supply.\n    @notice Note that `owner` cannot be the\n            zero address. Also, `owner` must\n            have at least `amount` tokens.\n    @param owner The 20-byte owner address.\n    @param amount The 32-byte token amount to be destroyed.\n    \"\"\"\n    assert owner != empty(address), \"erc20: burn from the zero address\"\n\n    self._before_token_transfer(owner, empty(address), amount)\n\n    account_balance: uint256 = self.balanceOf[owner]\n    assert account_balance >= amount, \"erc20: burn amount exceeds balance\"\n    self.balanceOf[owner] = unsafe_sub(account_balance, amount)\n    self.totalSupply = unsafe_sub(self.totalSupply, amount)\n    log IERC20.Transfer(owner, empty(address), amount)\n\n    self._after_token_transfer(owner, empty(address), amount)\n\n\n@internal\ndef _approve(owner: address, spender: address, amount: uint256):\n    \"\"\"\n    @dev Sets `amount` as the allowance of `spender`\n         over the `owner`'s tokens.\n    @notice Note that `owner` and `spender` cannot\n            be the zero address.\n    @param owner The 20-byte owner address.\n    @param spender The 20-byte spender address.\n    @param amount The 32-byte token amount that is\n           allowed to be spent by the `spender`.\n    \"\"\"\n    assert owner != empty(address), \"erc20: approve from the zero address\"\n    assert spender != empty(address), \"erc20: approve to the zero address\"\n\n    self.allowance[owner][spender] = amount\n    log IERC20.Approval(owner, spender, amount)\n\n\n@internal\ndef _spend_allowance(owner: address, spender: address, amount: uint256):\n    \"\"\"\n    @dev Updates `owner`'s allowance for `spender`\n         based on spent `amount`.\n    @notice WARNING: Note that it does not update the\n            allowance `amount` in case of infinite\n            allowance. Also, it reverts if not enough\n            allowance is available.\n    @param owner The 20-byte owner address.\n    @param spender The 20-byte spender address.\n    @param amount The 32-byte token amount that is\n           allowed to be spent by the `spender`.\n    \"\"\"\n    current_allowance: uint256 = self.allowance[owner][spender]\n    if (current_allowance != max_value(uint256)):\n        # The following line allows the commonly known address\n        # poisoning attack, where `transferFrom` instructions\n        # are executed from arbitrary addresses with an `amount`\n        # of 0. However, this poisoning attack is not an on-chain\n        # vulnerability. All assets are safe. It is an off-chain\n        # log interpretation issue.\n        assert current_allowance >= amount, \"erc20: insufficient allowance\"\n        self._approve(owner, spender, unsafe_sub(current_allowance, amount))\n\n\n@internal\ndef _before_token_transfer(owner: address, to: address, amount: uint256):\n    \"\"\"\n    @dev Hook that is called before any transfer of tokens.\n         This includes minting and burning.\n    @notice The calling conditions are:\n            - when `owner` and `to` are both non-zero,\n              `amount` of `owner`'s tokens will be\n              transferred to `to`,\n            - when `owner` is zero, `amount` tokens will\n              be minted for `to`,\n            - when `to` is zero, `amount` of `owner`'s\n              tokens will be burned,\n            - `owner` and `to` are never both zero.\n    @param owner The 20-byte owner address.\n    @param to The 20-byte receiver address.\n    @param amount The 32-byte token amount to be transferred.\n    \"\"\"\n    pass\n\n\n@internal\ndef _after_token_transfer(owner: address, to: address, amount: uint256):\n    \"\"\"\n    @dev Hook that is called after any transfer of tokens.\n         This includes minting and burning.\n    @notice The calling conditions are:\n            - when `owner` and `to` are both non-zero,\n              `amount` of `owner`'s tokens has been\n              transferred to `to`,\n            - when `owner` is zero, `amount` tokens\n              have been minted for `to`,\n            - when `to` is zero, `amount` of `owner`'s\n              tokens have been burned,\n            - `owner` and `to` are never both zero.\n    @param owner The 20-byte owner address.\n    @param to The 20-byte receiver address.\n    @param amount The 32-byte token amount that has\n           been transferred.\n    \"\"\"\n    pass\n",
        "sha256sum": "9d7bde8729bf59f6cdac373176fbe93f2b6ba1c8df5167fa86d7c9e9ecafe70c"
      },
      "tmp/token.vy": {
        "content": "from snekmate.tokens import erc20 as base_token\nfrom snekmate.auth import ownable\nfrom ethereum.ercs import IERC20\n\ninitializes: base_token[ownable := ownable]\ninitializes: ownable\nexports: base_token.IERC20\n\n@deploy\ndef __init__():\n    ownable.__init__()\n    base_token.__init__(\"My Token\", \"TOK\", 18, \"My DApp\", \"v0.0.1\")\n",
        "sha256sum": "4d915dd4f81281687a5fb12d27f45da064f47025aa4f2bf8dd70deac3c9ce60e"
      }
    },
    "interfaces": {},
    "settings": {
      "outputSelection": {
        "tmp/token.vy": [ "*" ]
      },
      "search_paths": [
        "0/.venvs/boa/lib/python3.11/site-packages",
        "."
      ]
    },
    "compiler_version": "v0.4.0rc6+commit.3371956",
    "integrity": "391898e6d9b499e245b9721573b1fd86abf884b83de8be4beb4d7fd06cb9ded6"
  },
  "expected_constructor_argument": null
}