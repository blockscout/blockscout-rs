{
    "_comment": "Vyper source code is taken from https://github.com/vyperlang/vyper/blob/master/examples/tokens/ERC721.vy",
    "deployed_bytecode": "0x6003361161000c5761074a565b60003560e01c34610955576301ffc9a781186100995760243618610955576004358060201b610955576040526040517f01ffc9a700000000000000000000000000000000000000000000000000000000811861006957600161008e565b7f80ac58cd000000000000000000000000000000000000000000000000000000008118155b905060805260206080f35b6370a0823181186100dc5760243618610955576004358060a01c610955576040526040511561095557600260405160205260005260406000205460605260206060f35b636352211e81186101115760243618610955576000600435602052600052604060002054604052604051156109555760206040f35b63081812fc811861015457602436186109555760006004356020526000526040600020541561095557600160043560205260005260406000205460405260206040f35b63e985e9c581186101ae5760443618610955576004358060a01c610955576040526024358060a01c610955576060526003604051602052600052604060002080606051602052600052604060002090505460805260206080f35b6323b872dd81186102055760643618610955576004358060a01c610955576101a0526024358060a01c610955576101c0526101a051610100526101c051610120526044356101405233610160526102036108b3565b005b6342842e0e811861022f5760643618610955576000610600526106008051806101e0525050610267565b63b88d4fde811861038c5760a4361061095557606435600401610400813511610955578035806101e052602082018181610200375050505b6004358060a01c610955576101a0526024358060a01c610955576101c0526101a051610100526101c051610120526044356101405233610160526102a96108b3565b6101c0513b1561038a576101c05163150b7a0261064052608033610660526101a051610680526044356106a052806106c05280610660016101e0518082526020820181818361020060045afa5050508051806020830101601f82600003163682375050601f19601f8251602001011690508101505060206106406104a461065c6000855af161033d573d600060003e3d6000fd5b60203d1061095557610640518060201b61095557610b0052610b00905051610620527f150b7a02000000000000000000000000000000000000000000000000000000006106205118610955575b005b63095ea7b381186104695760443618610955576004358060a01c6109555760405260006024356020526000526040600020546060526060511561095557606051604051146109555733600060243560205260005260406000205414608052600360605160205260005260406000208033602052600052604060002090505460a05260805161041c5760a05161041f565b60015b156109555760405160016024356020526000526040600020556024356040516060517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600060c0a4005b63a22cb46581186104f65760443618610955576004358060a01c610955576040526024358060011c610955576060523360405114610955576060516003336020526000526040600020806040516020526000526040600020905055604051337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160605160805260206080a3005b6340c10f1981186105755760443618610955576004358060a01c61095557608052600454331861095557608051156109555760805160405260243560605261053c6107d1565b60243560805160007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600060a0a4600160a052602060a0f35b6342966c6881186106205760243618610955573360405260043560605261059d610100610750565b610100511561095557600060043560205260005260406000205461010052610100511561095557610100516040526004356060526105d961086e565b610100516040526004356060526105ee61081e565b6004356000610100517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000610120a4005b63c87b56dd81186107485760243618610955576020806101805260006005548160e001600082601f0160051c6002811161095557801561067357905b80600601548160051b84015260010181811861065c575b50505080820191505060043580610695576030604152600160405260406106d7565b6000604f905b826106b5578081608e035280608e0392506106d3566106c8565b600a830660300181608e0352600a830492505b60010181811861069b575b5050805b90508051602082018360e0018281848460045afa505050808301925050508060c05260c090508161018001815180825260208301602083018281848460045afa505050508051806020830101601f82600003163682375050601f19601f825160200101169050905081019050610180f35b505b60006000fd5b60006060516020526000526040600020546080526040516080511460a05260016060516020526000526040600020546040511460c0526003608051602052600052604060002080604051602052600052604060002090505460e05260a0516107ba5760c0516107bd565b60015b6107c95760e0516107cc565b60015b815250565b600060605160205260005260406000205461095557604051600060605160205260005260406000205560026040516020526000526040600020805460018101818110610955579050815550565b604051600060605160205260005260406000205418610955576000600060605160205260005260406000205560026040516020526000526040600020805460018103818111610955579050815550565b604051600060605160205260005260406000205418610955576001606051602052600052604060002054156108b157600060016060516020526000526040600020555b565b61016051604052610140516060526108cc610180610750565b61018051156109555761012051156109555761010051604052610140516060526108f461086e565b610100516040526101405160605261090a61081e565b61012051604052610140516060526109206107d1565b6101405161012051610100517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000610180a4565b600080fda165767970657283000306000b",
    "creation_bytecode": "0x346109bf5733600455601f6040527f68747470733a2f2f6170692e62616262792e78797a2f6d657461646174612f00606052604080518060055560208201805160065550505061096761005761000039610967610000f36003361161000c5761074a565b60003560e01c34610955576301ffc9a781186100995760243618610955576004358060201b610955576040526040517f01ffc9a700000000000000000000000000000000000000000000000000000000811861006957600161008e565b7f80ac58cd000000000000000000000000000000000000000000000000000000008118155b905060805260206080f35b6370a0823181186100dc5760243618610955576004358060a01c610955576040526040511561095557600260405160205260005260406000205460605260206060f35b636352211e81186101115760243618610955576000600435602052600052604060002054604052604051156109555760206040f35b63081812fc811861015457602436186109555760006004356020526000526040600020541561095557600160043560205260005260406000205460405260206040f35b63e985e9c581186101ae5760443618610955576004358060a01c610955576040526024358060a01c610955576060526003604051602052600052604060002080606051602052600052604060002090505460805260206080f35b6323b872dd81186102055760643618610955576004358060a01c610955576101a0526024358060a01c610955576101c0526101a051610100526101c051610120526044356101405233610160526102036108b3565b005b6342842e0e811861022f5760643618610955576000610600526106008051806101e0525050610267565b63b88d4fde811861038c5760a4361061095557606435600401610400813511610955578035806101e052602082018181610200375050505b6004358060a01c610955576101a0526024358060a01c610955576101c0526101a051610100526101c051610120526044356101405233610160526102a96108b3565b6101c0513b1561038a576101c05163150b7a0261064052608033610660526101a051610680526044356106a052806106c05280610660016101e0518082526020820181818361020060045afa5050508051806020830101601f82600003163682375050601f19601f8251602001011690508101505060206106406104a461065c6000855af161033d573d600060003e3d6000fd5b60203d1061095557610640518060201b61095557610b0052610b00905051610620527f150b7a02000000000000000000000000000000000000000000000000000000006106205118610955575b005b63095ea7b381186104695760443618610955576004358060a01c6109555760405260006024356020526000526040600020546060526060511561095557606051604051146109555733600060243560205260005260406000205414608052600360605160205260005260406000208033602052600052604060002090505460a05260805161041c5760a05161041f565b60015b156109555760405160016024356020526000526040600020556024356040516060517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600060c0a4005b63a22cb46581186104f65760443618610955576004358060a01c610955576040526024358060011c610955576060523360405114610955576060516003336020526000526040600020806040516020526000526040600020905055604051337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160605160805260206080a3005b6340c10f1981186105755760443618610955576004358060a01c61095557608052600454331861095557608051156109555760805160405260243560605261053c6107d1565b60243560805160007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600060a0a4600160a052602060a0f35b6342966c6881186106205760243618610955573360405260043560605261059d610100610750565b610100511561095557600060043560205260005260406000205461010052610100511561095557610100516040526004356060526105d961086e565b610100516040526004356060526105ee61081e565b6004356000610100517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000610120a4005b63c87b56dd81186107485760243618610955576020806101805260006005548160e001600082601f0160051c6002811161095557801561067357905b80600601548160051b84015260010181811861065c575b50505080820191505060043580610695576030604152600160405260406106d7565b6000604f905b826106b5578081608e035280608e0392506106d3566106c8565b600a830660300181608e0352600a830492505b60010181811861069b575b5050805b90508051602082018360e0018281848460045afa505050808301925050508060c05260c090508161018001815180825260208301602083018281848460045afa505050508051806020830101601f82600003163682375050601f19601f825160200101169050905081019050610180f35b505b60006000fd5b60006060516020526000526040600020546080526040516080511460a05260016060516020526000526040600020546040511460c0526003608051602052600052604060002080604051602052600052604060002090505460e05260a0516107ba5760c0516107bd565b60015b6107c95760e0516107cc565b60015b815250565b600060605160205260005260406000205461095557604051600060605160205260005260406000205560026040516020526000526040600020805460018101818110610955579050815550565b604051600060605160205260005260406000205418610955576000600060605160205260005260406000205560026040516020526000526040600020805460018103818111610955579050815550565b604051600060605160205260005260406000205418610955576001606051602052600052604060002054156108b157600060016060516020526000526040600020555b565b61016051604052610140516060526108cc610180610750565b61018051156109555761012051156109555761010051604052610140516060526108f461086e565b610100516040526101405160605261090a61081e565b61012051604052610140516060526109206107d1565b6101405161012051610100517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000610180a4565b600080fda165767970657283000306000b005b600080fd",
    "compiler_version": "v0.3.6+commit.4a2124d0",
    "source_code": "# @dev Implementation of ERC-721 non-fungible token standard.\n# @author Ryuya Nakamura (@nrryuya)\n# Modified from: https://github.com/vyperlang/vyper/blob/de74722bf2d8718cca46902be165f9fe0e3641dd/examples/tokens/ERC721.vy\n\nfrom vyper.interfaces import ERC165\nfrom vyper.interfaces import ERC721\n\nimplements: ERC721\nimplements: ERC165\n\n# Interface for the contract called by safeTransferFrom()\ninterface ERC721Receiver:\n    def onERC721Received(\n            _operator: address,\n            _from: address,\n            _tokenId: uint256,\n            _data: Bytes[1024]\n        ) -> bytes4: nonpayable\n\n\n# @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\n#      created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\n#      number of NFTs may be created and assigned without emitting Transfer. At the time of any\n#      transfer, the approved address for that NFT (if any) is reset to none.\n# @param _from Sender of NFT (if address is zero address it indicates token creation).\n# @param _to Receiver of NFT (if address is zero address it indicates token destruction).\n# @param _tokenId The NFT that got transfered.\nevent Transfer:\n    sender: indexed(address)\n    receiver: indexed(address)\n    tokenId: indexed(uint256)\n\n# @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\n#      address indicates there is no approved address. When a Transfer event emits, this also\n#      indicates that the approved address for that NFT (if any) is reset to none.\n# @param _owner Owner of NFT.\n# @param _approved Address that we are approving.\n# @param _tokenId NFT which we are approving.\nevent Approval:\n    owner: indexed(address)\n    approved: indexed(address)\n    tokenId: indexed(uint256)\n\n# @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\n#      all NFTs of the owner.\n# @param _owner Owner of NFT.\n# @param _operator Address to which we are setting operator rights.\n# @param _approved Status of operator rights(true if operator rights are given and false if\n# revoked).\nevent ApprovalForAll:\n    owner: indexed(address)\n    operator: indexed(address)\n    approved: bool\n\n\n# @dev Mapping from NFT ID to the address that owns it.\nidToOwner: HashMap[uint256, address]\n\n# @dev Mapping from NFT ID to approved address.\nidToApprovals: HashMap[uint256, address]\n\n# @dev Mapping from owner address to count of his tokens.\nownerToNFTokenCount: HashMap[address, uint256]\n\n# @dev Mapping from owner address to mapping of operator addresses.\nownerToOperators: HashMap[address, HashMap[address, bool]]\n\n# @dev Address of minter, who can mint a token\nminter: address\n\nbaseURL: String[53]\n\n# @dev Static list of supported ERC165 interface ids\nSUPPORTED_INTERFACES: constant(bytes4[2]) = [\n    # ERC165 interface ID of ERC165\n    0x01ffc9a7,\n    # ERC165 interface ID of ERC721\n    0x80ac58cd,\n]\n\n@external\ndef __init__():\n    \"\"\"\n    @dev Contract constructor.\n    \"\"\"\n    self.minter = msg.sender\n    self.baseURL = \"https://api.babby.xyz/metadata/\"\n\n\n@pure\n@external\ndef supportsInterface(interface_id: bytes4) -> bool:\n    \"\"\"\n    @dev Interface identification is specified in ERC-165.\n    @param interface_id Id of the interface\n    \"\"\"\n    return interface_id in SUPPORTED_INTERFACES\n\n\n### VIEW FUNCTIONS ###\n\n@view\n@external\ndef balanceOf(_owner: address) -> uint256:\n    \"\"\"\n    @dev Returns the number of NFTs owned by `_owner`.\n         Throws if `_owner` is the zero address. NFTs assigned to the zero address are considered invalid.\n    @param _owner Address for whom to query the balance.\n    \"\"\"\n    assert _owner != empty(address)\n    return self.ownerToNFTokenCount[_owner]\n\n\n@view\n@external\ndef ownerOf(_tokenId: uint256) -> address:\n    \"\"\"\n    @dev Returns the address of the owner of the NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId The identifier for an NFT.\n    \"\"\"\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != empty(address)\n    return owner\n\n\n@view\n@external\ndef getApproved(_tokenId: uint256) -> address:\n    \"\"\"\n    @dev Get the approved address for a single NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId ID of the NFT to query the approval of.\n    \"\"\"\n    # Throws if `_tokenId` is not a valid NFT\n    assert self.idToOwner[_tokenId] != empty(address)\n    return self.idToApprovals[_tokenId]\n\n\n@view\n@external\ndef isApprovedForAll(_owner: address, _operator: address) -> bool:\n    \"\"\"\n    @dev Checks if `_operator` is an approved operator for `_owner`.\n    @param _owner The address that owns the NFTs.\n    @param _operator The address that acts on behalf of the owner.\n    \"\"\"\n    return (self.ownerToOperators[_owner])[_operator]\n\n\n### TRANSFER FUNCTION HELPERS ###\n\n@view\n@internal\ndef _isApprovedOrOwner(_spender: address, _tokenId: uint256) -> bool:\n    \"\"\"\n    @dev Returns whether the given spender can transfer a given token ID\n    @param spender address of the spender to query\n    @param tokenId uint256 ID of the token to be transferred\n    @return bool whether the msg.sender is approved for the given token ID,\n        is an operator of the owner, or is the owner of the token\n    \"\"\"\n    owner: address = self.idToOwner[_tokenId]\n    spenderIsOwner: bool = owner == _spender\n    spenderIsApproved: bool = _spender == self.idToApprovals[_tokenId]\n    spenderIsApprovedForAll: bool = (self.ownerToOperators[owner])[_spender]\n    return (spenderIsOwner or spenderIsApproved) or spenderIsApprovedForAll\n\n\n@internal\ndef _addTokenTo(_to: address, _tokenId: uint256):\n    \"\"\"\n    @dev Add a NFT to a given address\n         Throws if `_tokenId` is owned by someone.\n    \"\"\"\n    # Throws if `_tokenId` is owned by someone\n    assert self.idToOwner[_tokenId] == empty(address)\n    # Change the owner\n    self.idToOwner[_tokenId] = _to\n    # Change count tracking\n    self.ownerToNFTokenCount[_to] += 1\n\n\n@internal\ndef _removeTokenFrom(_from: address, _tokenId: uint256):\n    \"\"\"\n    @dev Remove a NFT from a given address\n         Throws if `_from` is not the current owner.\n    \"\"\"\n    # Throws if `_from` is not the current owner\n    assert self.idToOwner[_tokenId] == _from\n    # Change the owner\n    self.idToOwner[_tokenId] = empty(address)\n    # Change count tracking\n    self.ownerToNFTokenCount[_from] -= 1\n\n\n@internal\ndef _clearApproval(_owner: address, _tokenId: uint256):\n    \"\"\"\n    @dev Clear an approval of a given address\n         Throws if `_owner` is not the current owner.\n    \"\"\"\n    # Throws if `_owner` is not the current owner\n    assert self.idToOwner[_tokenId] == _owner\n    if self.idToApprovals[_tokenId] != empty(address):\n        # Reset approvals\n        self.idToApprovals[_tokenId] = empty(address)\n\n\n@internal\ndef _transferFrom(_from: address, _to: address, _tokenId: uint256, _sender: address):\n    \"\"\"\n    @dev Exeute transfer of a NFT.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT. (NOTE: `msg.sender` not allowed in private function so pass `_sender`.)\n         Throws if `_to` is the zero address.\n         Throws if `_from` is not the current owner.\n         Throws if `_tokenId` is not a valid NFT.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(_sender, _tokenId)\n    # Throws if `_to` is the zero address\n    assert _to != empty(address)\n    # Clear approval. Throws if `_from` is not the current owner\n    self._clearApproval(_from, _tokenId)\n    # Remove NFT. Throws if `_tokenId` is not a valid NFT\n    self._removeTokenFrom(_from, _tokenId)\n    # Add NFT\n    self._addTokenTo(_to, _tokenId)\n    # Log the transfer\n    log Transfer(_from, _to, _tokenId)\n\n\n### TRANSFER FUNCTIONS ###\n\n@external\ndef transferFrom(_from: address, _to: address, _tokenId: uint256):\n    \"\"\"\n    @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT.\n         Throws if `_from` is not the current owner.\n         Throws if `_to` is the zero address.\n         Throws if `_tokenId` is not a valid NFT.\n    @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\n            they maybe be permanently lost.\n    @param _from The current owner of the NFT.\n    @param _to The new owner.\n    @param _tokenId The NFT to transfer.\n    \"\"\"\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\n\n\n@external\ndef safeTransferFrom(\n        _from: address,\n        _to: address,\n        _tokenId: uint256,\n        _data: Bytes[1024]=b\"\"\n    ):\n    \"\"\"\n    @dev Transfers the ownership of an NFT from one address to another address.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the\n         approved address for this NFT.\n         Throws if `_from` is not the current owner.\n         Throws if `_to` is the zero address.\n         Throws if `_tokenId` is not a valid NFT.\n         If `_to` is a smart contract, it calls `onERC721Received` on `_to` and throws if\n         the return value is not `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    @param _from The current owner of the NFT.\n    @param _to The new owner.\n    @param _tokenId The NFT to transfer.\n    @param _data Additional data with no specified format, sent in call to `_to`.\n    \"\"\"\n    self._transferFrom(_from, _to, _tokenId, msg.sender)\n    if _to.is_contract: # check if `_to` is a contract address\n        returnValue: bytes4 = ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data)\n        # Throws if transfer destination is a contract which does not implement 'onERC721Received'\n        assert returnValue == method_id(\"onERC721Received(address,address,uint256,bytes)\", output_type=bytes4)\n\n\n@external\ndef approve(_approved: address, _tokenId: uint256):\n    \"\"\"\n    @dev Set or reaffirm the approved address for an NFT. The zero address indicates there is no approved address.\n         Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\n         Throws if `_tokenId` is not a valid NFT. (NOTE: This is not written the EIP)\n         Throws if `_approved` is the current owner. (NOTE: This is not written the EIP)\n    @param _approved Address to be approved for the given NFT ID.\n    @param _tokenId ID of the token to be approved.\n    \"\"\"\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != empty(address)\n    # Throws if `_approved` is the current owner\n    assert _approved != owner\n    # Check requirements\n    senderIsOwner: bool = self.idToOwner[_tokenId] == msg.sender\n    senderIsApprovedForAll: bool = (self.ownerToOperators[owner])[msg.sender]\n    assert (senderIsOwner or senderIsApprovedForAll)\n    # Set the approval\n    self.idToApprovals[_tokenId] = _approved\n    log Approval(owner, _approved, _tokenId)\n\n\n@external\ndef setApprovalForAll(_operator: address, _approved: bool):\n    \"\"\"\n    @dev Enables or disables approval for a third party (\"operator\") to manage all of\n         `msg.sender`'s assets. It also emits the ApprovalForAll event.\n         Throws if `_operator` is the `msg.sender`. (NOTE: This is not written the EIP)\n    @notice This works even if sender doesn't own any tokens at the time.\n    @param _operator Address to add to the set of authorized operators.\n    @param _approved True if the operators is approved, false to revoke approval.\n    \"\"\"\n    # Throws if `_operator` is the `msg.sender`\n    assert _operator != msg.sender\n    self.ownerToOperators[msg.sender][_operator] = _approved\n    log ApprovalForAll(msg.sender, _operator, _approved)\n\n\n### MINT & BURN FUNCTIONS ###\n\n@external\ndef mint(_to: address, _tokenId: uint256) -> bool:\n    \"\"\"\n    @dev Function to mint tokens\n         Throws if `msg.sender` is not the minter.\n         Throws if `_to` is zero address.\n         Throws if `_tokenId` is owned by someone.\n    @param _to The address that will receive the minted tokens.\n    @param _tokenId The token id to mint.\n    @return A boolean that indicates if the operation was successful.\n    \"\"\"\n    # Throws if `msg.sender` is not the minter\n    assert msg.sender == self.minter\n    # Throws if `_to` is zero address\n    assert _to != empty(address)\n    # Add NFT. Throws if `_tokenId` is owned by someone\n    self._addTokenTo(_to, _tokenId)\n    log Transfer(empty(address), _to, _tokenId)\n    return True\n\n\n@external\ndef burn(_tokenId: uint256):\n    \"\"\"\n    @dev Burns a specific ERC721 token.\n         Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n         address for this NFT.\n         Throws if `_tokenId` is not a valid NFT.\n    @param _tokenId uint256 id of the ERC721 token to be burned.\n    \"\"\"\n    # Check requirements\n    assert self._isApprovedOrOwner(msg.sender, _tokenId)\n    owner: address = self.idToOwner[_tokenId]\n    # Throws if `_tokenId` is not a valid NFT\n    assert owner != empty(address)\n    self._clearApproval(owner, _tokenId)\n    self._removeTokenFrom(owner, _tokenId)\n    log Transfer(owner, empty(address), _tokenId)\n\n\n@view\n@external\ndef tokenURI(tokenId: uint256) -> String[132]:\n    return concat(self.baseURL, uint2str(tokenId))",
    "expected_constructor_argument": null
}
