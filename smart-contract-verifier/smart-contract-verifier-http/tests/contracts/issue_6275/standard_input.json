{
    "language": "Solidity",
    "sources": {
        "contracts/MultichainProxy.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport 'rubic-bridge-base/contracts/architecture/OnlySourceFunctionality.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\nimport 'rubic-bridge-base/contracts/errors/Errors.sol';\nimport './interfaces/IAnyswapRouter.sol';\nimport './interfaces/IAnyswapToken.sol';\n\nerror DifferentAmountSpent();\nerror RouterNotAvailable();\nerror CannotBridgeToSameNetwork();\n\ncontract MultichainProxy is OnlySourceFunctionality {\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    constructor(\n        uint256 _fixedCryptoFee,\n        uint256 _rubicPlatformFee,\n        address[] memory _routers,\n        address[] memory _tokens,\n        uint256[] memory _minTokenAmounts,\n        uint256[] memory _maxTokenAmounts\n    ) {\n        initialize(_fixedCryptoFee, _rubicPlatformFee, _routers, _tokens, _minTokenAmounts, _maxTokenAmounts);\n    }\n\n    function initialize(\n        uint256 _fixedCryptoFee,\n        uint256 _rubicPlatformFee,\n        address[] memory _routers,\n        address[] memory _tokens,\n        uint256[] memory _minTokenAmounts,\n        uint256[] memory _maxTokenAmounts\n    ) private initializer {\n        __OnlySourceFunctionalityInit(\n            _fixedCryptoFee,\n            _rubicPlatformFee,\n            _routers,\n            _tokens,\n            _minTokenAmounts,\n            _maxTokenAmounts\n        );\n    }\n\n    function multiBridge(BaseCrossChainParams memory _params) external payable nonReentrant whenNotPaused {\n        (address underlyingToken, bool isNative) = _getUnderlyingToken(_params.srcInputToken, _params.router);\n\n        uint256 tokenInAfter;\n        (_params.srcInputAmount, tokenInAfter) = _checkAmountIn(underlyingToken, _params.srcInputAmount);\n\n        IntegratorFeeInfo memory _info = integratorToFeeInfo[_params.integrator];\n\n        _params.srcInputAmount = accrueTokenFees(_params.integrator, _info, _params.srcInputAmount, 0, underlyingToken);\n\n        accrueFixedCryptoFee(_params.integrator, _info); // add require msg.value left == 0 ?\n\n        _transferToMultichain(\n            _params.srcInputToken,\n            _params.router,\n            _params.srcInputAmount,\n            _params.recipient,\n            _params.dstChainID,\n            underlyingToken,\n            isNative\n        );\n\n        _amountAndAllowanceChecks(underlyingToken, _params.router, _params.srcInputAmount, tokenInAfter);\n\n        // emit underlying token token\n        _params.srcInputToken = underlyingToken;\n        emit RequestSent(_params, 'native:Multichain');\n    }\n\n    function multiBridgeNative(BaseCrossChainParams memory _params) external payable nonReentrant whenNotPaused {\n        (address underlyingToken, bool isNative) = _getUnderlyingToken(_params.srcInputToken, _params.router);\n\n        IntegratorFeeInfo memory _info = integratorToFeeInfo[_params.integrator];\n\n        _params.srcInputAmount = accrueTokenFees(\n            _params.integrator,\n            _info,\n            accrueFixedCryptoFee(_params.integrator, _info),\n            0,\n            address(0)\n        );\n\n        _transferToMultichain(\n            _params.srcInputToken,\n            _params.router,\n            _params.srcInputAmount,\n            _params.recipient,\n            _params.dstChainID,\n            underlyingToken,\n            isNative\n        );\n\n        // emit underlying native token\n        _params.srcInputToken = address(0);\n        emit RequestSent(_params, 'native:Multichain');\n    }\n\n    function multiBridgeSwap(\n        BaseCrossChainParams memory _params,\n        address _dex,\n        address _anyTokenOut,\n        bytes calldata _swapData\n    ) external payable nonReentrant whenNotPaused {\n        uint256 tokenInAfter;\n        (_params.srcInputAmount, tokenInAfter) = _checkAmountIn(_params.srcInputToken, _params.srcInputAmount);\n\n        IntegratorFeeInfo memory _info = integratorToFeeInfo[_params.integrator];\n\n        _params.srcInputAmount = accrueTokenFees(\n            _params.integrator,\n            _info,\n            _params.srcInputAmount,\n            0,\n            _params.srcInputToken\n        );\n\n        IERC20Upgradeable(_params.srcInputToken).safeApprove(_dex, _params.srcInputAmount);\n\n        (address underlyingToken, bool isNative) = _getUnderlyingToken(_anyTokenOut, _params.router);\n\n        uint256 tokenOutBefore = IERC20Upgradeable(underlyingToken).balanceOf(address(this)); \n        AddressUpgradeable.functionCallWithValue(_dex, _swapData, accrueFixedCryptoFee(_params.integrator, _info));\n        uint256 amountOut = IERC20Upgradeable(underlyingToken).balanceOf(address(this)) - tokenOutBefore;\n\n        _amountAndAllowanceChecks(_params.srcInputToken, _dex, _params.srcInputAmount, tokenInAfter);\n\n        _transferToMultichain(\n            _anyTokenOut,\n            _params.router,\n            amountOut,\n            _params.recipient,\n            _params.dstChainID,\n            underlyingToken,\n            isNative\n        );\n\n        // already know amount out\n        // allowance check? Its safe to approve multichain for uintmax\n        // _amountAndAllowanceChecks(...\n\n        emit RequestSent(_params, 'native:Multichain');\n    }\n\n    function multiBridgeSwapNative(\n        BaseCrossChainParams memory _params,\n        address _dex,\n        address _anyTokenOut,\n        bytes calldata _swapData\n    ) external payable nonReentrant whenNotPaused {\n        IntegratorFeeInfo memory _info = integratorToFeeInfo[_params.integrator];\n\n        _params.srcInputAmount = accrueTokenFees(\n            _params.integrator,\n            _info,\n            accrueFixedCryptoFee(_params.integrator, _info),\n            0,\n            address(0)\n        );\n\n        (address underlyingToken, bool isNative) = _getUnderlyingToken(_anyTokenOut, _params.router);\n\n        uint256 tokenOutBefore = IERC20Upgradeable(underlyingToken).balanceOf(address(this));\n        AddressUpgradeable.functionCallWithValue(_dex, _swapData, _params.srcInputAmount);\n        uint256 amountOut = IERC20Upgradeable(underlyingToken).balanceOf(address(this)) - tokenOutBefore;\n\n        _transferToMultichain(\n            _anyTokenOut,\n            _params.router,\n            amountOut,\n            _params.recipient,\n            _params.dstChainID,\n            underlyingToken,\n            isNative\n        );\n\n        emit RequestSent(_params, 'native:Multichain');\n    }\n\n    function _amountAndAllowanceChecks(\n        address _tokenIn,\n        address _router,\n        uint256 _amountIn,\n        uint256 tokenInAfter\n    ) internal {\n        if (tokenInAfter - IERC20Upgradeable(_tokenIn).balanceOf(address(this)) != _amountIn) {\n            revert DifferentAmountSpent();\n        }\n\n        // reset allowance back to zero, just in case\n        if (IERC20Upgradeable(_tokenIn).allowance(address(this), _router) > 0) {\n            IERC20Upgradeable(_tokenIn).safeApprove(_router, 0);\n        }\n    }\n\n    function _checkAmountIn(address _tokenIn, uint256 _amountIn) internal returns (uint256, uint256) {\n        uint256 balanceBeforeTransfer = IERC20Upgradeable(_tokenIn).balanceOf(address(this));\n        IERC20Upgradeable(_tokenIn).safeTransferFrom(msg.sender, address(this), _amountIn);\n        uint256 balanceAfterTransfer = IERC20Upgradeable(_tokenIn).balanceOf(address(this));\n        _amountIn = balanceAfterTransfer - balanceBeforeTransfer;\n        return (_amountIn, balanceAfterTransfer);\n    }\n\n    function sweepTokens(address _token, uint256 _amount) external onlyAdmin {\n        sendToken(_token, _amount, msg.sender);\n    }\n\n    /// @dev Conatains the business logic for the bridge via Anyswap\n    /// @param _tokenIn data specific to Anyswap\n    /// @param _anyRouter data specific to Anyswap\n    /// @param _amount data specific to Anyswap\n    /// @param _recipient data specific to Anyswap\n    /// @param _dstChain data specific to Anyswap\n    /// @param _underlyingToken the underlying token to swap\n    /// @param _isNative denotes whether the token is a native token or ERC20\n    function _transferToMultichain(\n        address _tokenIn,\n        address _anyRouter,\n        uint256 _amount,\n        address _recipient,\n        uint256 _dstChain,\n        address _underlyingToken,\n        bool _isNative\n    ) private {\n        require(_amount >= minTokenAmount[_tokenIn], 'MultichainProxy: amount must be greater than min swap amount');\n        if (maxTokenAmount[_tokenIn] > 0) {\n            // TODO errors\n            require(_amount <= maxTokenAmount[_tokenIn], 'MultichainProxy: amount must be lower than max swap amount');\n        }\n\n        if (!availableRouters.contains(_anyRouter)) {\n            revert RouterNotAvailable();\n        }\n        if (block.chainid == _dstChain) revert CannotBridgeToSameNetwork();\n\n        if (_isNative) {\n            IAnyswapRouter(_anyRouter).anySwapOutNative{value: _amount}(_tokenIn, _recipient, _dstChain);\n        } else {\n            // Give Anyswap approval to bridge tokens\n            IERC20Upgradeable(_underlyingToken).safeApprove(_anyRouter, _amount);\n            // Was the token wrapping another token?\n            if (_tokenIn != _underlyingToken) {\n                IAnyswapRouter(_anyRouter).anySwapOutUnderlying(_tokenIn, _recipient, _amount, _dstChain);\n            } else {\n                IAnyswapRouter(_anyRouter).anySwapOut(_tokenIn, _recipient, _amount, _dstChain);\n            }\n        }\n    }\n\n    /// @dev Unwraps the underlying token from the Anyswap token if necessary\n    /// @param token The (maybe) wrapped token\n    /// @param router The Anyswap router\n    function _getUnderlyingToken(address token, address router)\n        private\n        returns (address underlyingToken, bool isNative)\n    {\n        // Token must implement IAnyswapToken interface\n        if (token == address(0)) revert ZeroAddress();\n        underlyingToken = IAnyswapToken(token).underlying();\n        // The native token does not use the standard null address\n        isNative = IAnyswapRouter(router).wNATIVE() == underlyingToken;\n        // Some Multichain complying tokens may wrap nothing\n        if (!isNative && underlyingToken == address(0)) {\n            underlyingToken = token;\n        }\n    }\n}\n"
        },
        "contracts/interfaces/IAnyswapRouter.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IAnyswapRouter {\n    function anySwapOutUnderlying(\n        address token,\n        address to,\n        uint256 amount,\n        uint256 toChainID\n    ) external;\n\n    function anySwapOut(\n        address token,\n        address to,\n        uint256 amount,\n        uint256 toChainID\n    ) external;\n\n    function anySwapOutNative(\n        address token,\n        address to,\n        uint256 toChainID\n    ) external payable;\n\n    function wNATIVE() external returns (address);\n}"
        },
        "contracts/interfaces/IAnyswapToken.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\ninterface IAnyswapToken {\n    function underlying() external returns (address);\n}"
        },
        "rubic-bridge-base/contracts/errors/Errors.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nerror NotAnAdmin();\r\nerror NotAManager();\r\nerror NotARelayer();\r\nerror OnlyEOA();\r\nerror FeeTooHigh();\r\nerror ShareTooHigh();\r\nerror ZeroAddress();\r\nerror ZeroAmount();\r\nerror InefficientFixedFee();\r\nerror ApproveFailed();\r\nerror MinMustBeLowerThanMax();\r\nerror MaxMustBeBiggerThanMin();\r\nerror CantSetToNull();\r\nerror Unchangeable();\r\nerror LengthMismatch();\r\n"
        },
        "rubic-bridge-base/contracts/architecture/OnlySourceFunctionality.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport '../BridgeBase.sol';\r\n\r\ncontract OnlySourceFunctionality is BridgeBase {\r\n    event RequestSent(BaseCrossChainParams parameters, string providerName);\r\n\r\n    modifier eventEmitter(BaseCrossChainParams calldata _params, string calldata _providerName) {\r\n        _;\r\n        emit RequestSent(_params, _providerName);\r\n    }\r\n\r\n    function __OnlySourceFunctionalityInit(\r\n        uint256 _fixedCryptoFee,\r\n        uint256 _RubicPlatformFee,\r\n        address[] memory _routers,\r\n        address[] memory _tokens,\r\n        uint256[] memory _minTokenAmounts,\r\n        uint256[] memory _maxTokenAmounts\r\n    ) internal onlyInitializing {\r\n        __BridgeBaseInit(_fixedCryptoFee, _RubicPlatformFee, _routers, _tokens, _minTokenAmounts, _maxTokenAmounts);\r\n    }\r\n}\r\n"
        },
        "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
        },
        "rubic-bridge-base/contracts/BridgeBase.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol';\r\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\r\n\r\nimport './libraries/FullMath.sol';\r\n\r\nimport './errors/Errors.sol';\r\n\r\ncontract BridgeBase is AccessControlUpgradeable, PausableUpgradeable, ReentrancyGuardUpgradeable {\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n    // Denominator for setting fees\r\n    uint256 internal constant DENOMINATOR = 1e6;\r\n\r\n    bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\r\n\r\n    // Struct with all info about integrator fees\r\n    mapping(address => IntegratorFeeInfo) public integratorToFeeInfo;\r\n    // Amount of collected fees in native token integrator -> native fees\r\n    mapping(address => uint256) public availableIntegratorCryptoFee;\r\n\r\n    // token -> minAmount for swap\r\n    mapping(address => uint256) public minTokenAmount;\r\n    // token -> maxAmount for swap\r\n    mapping(address => uint256) public maxTokenAmount;\r\n\r\n    // token -> rubic collected fees\r\n    mapping(address => uint256) public availableRubicTokenFee;\r\n    // token -> integrator collected fees\r\n    mapping(address => mapping(address => uint256)) public availableIntegratorTokenFee;\r\n\r\n    // Rubic token fee\r\n    uint256 public RubicPlatformFee;\r\n    // Rubic fixed fee for swap\r\n    uint256 public fixedCryptoFee;\r\n    // Collected rubic fees in native token\r\n    uint256 public availableRubicCryptoFee;\r\n\r\n    // AddressSet of whitelisted addresses\r\n    EnumerableSetUpgradeable.AddressSet internal availableRouters;\r\n\r\n    event FixedCryptoFee(uint256 RubicPart, uint256 integratorPart, address indexed integrator);\r\n    event FixedCryptoFeeCollected(uint256 amount, address collector);\r\n    event TokenFee(uint256 RubicPart, uint256 integratorPart, address indexed integrator, address token);\r\n    event IntegratorTokenFeeCollected(uint256 amount, address indexed integrator, address token);\r\n    event RubicTokenFeeCollected(uint256 amount, address token);\r\n\r\n    struct IntegratorFeeInfo {\r\n        bool isIntegrator; // flag for setting 0 fees for integrator      - 1 byte\r\n        uint32 tokenFee; // total fee percent gathered from user          - 4 bytes\r\n        uint32 RubicTokenShare; // token share of platform commission     - 4 bytes\r\n        uint32 RubicFixedCryptoShare; // native share of fixed commission - 4 bytes\r\n        uint128 fixedFeeAmount; // custom fixed fee amount                - 16 bytes\r\n    } //                                                            total - 29 bytes <= 32 bytes\r\n\r\n    struct BaseCrossChainParams {\r\n        address srcInputToken;\r\n        uint256 srcInputAmount;\r\n        uint256 dstChainID;\r\n        address dstOutputToken;\r\n        uint256 dstMinOutputAmount;\r\n        address recipient;\r\n        address integrator;\r\n        address router;\r\n    }\r\n\r\n    // reference to https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3347/\r\n    modifier onlyAdmin() {\r\n        checkIsAdmin();\r\n        _;\r\n    }\r\n\r\n    modifier onlyManagerOrAdmin() {\r\n        checkIsManagerOrAdmin();\r\n        _;\r\n    }\r\n\r\n    modifier onlyEOA() {\r\n        if (msg.sender != tx.origin) {\r\n            revert OnlyEOA();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function __BridgeBaseInit(\r\n        uint256 _fixedCryptoFee,\r\n        uint256 _RubicPlatformFee,\r\n        address[] memory _routers,\r\n        address[] memory _tokens,\r\n        uint256[] memory _minTokenAmounts,\r\n        uint256[] memory _maxTokenAmounts\r\n    ) internal onlyInitializing {\r\n        __Pausable_init_unchained();\r\n\r\n        fixedCryptoFee = _fixedCryptoFee;\r\n\r\n        if (_RubicPlatformFee > DENOMINATOR) {\r\n            revert FeeTooHigh();\r\n        }\r\n\r\n        RubicPlatformFee = _RubicPlatformFee;\r\n\r\n        uint256 routerLength = _routers.length;\r\n        for (uint256 i; i < routerLength; ) {\r\n            availableRouters.add(_routers[i]);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        uint256 tokensLength = _tokens.length;\r\n        for (uint256 i; i < tokensLength; ) {\r\n            if (_minTokenAmounts[i] > _maxTokenAmounts[i]) {\r\n                revert MinMustBeLowerThanMax();\r\n            }\r\n            minTokenAmount[_tokens[i]] = _minTokenAmounts[i];\r\n            maxTokenAmount[_tokens[i]] = _maxTokenAmounts[i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates and accrues fixed crypto fee\r\n     * @param _integrator Integrator's address if there is one\r\n     * @param _info A struct with integrator fee info\r\n     * @return The msg.value without fixedCryptoFee\r\n     */\r\n    function accrueFixedCryptoFee(address _integrator, IntegratorFeeInfo memory _info) internal returns (uint256) {\r\n        uint256 _fixedCryptoFee;\r\n        uint256 _RubicPart;\r\n        if (_info.isIntegrator) {\r\n            _fixedCryptoFee = uint256(_info.fixedFeeAmount);\r\n\r\n            if (_fixedCryptoFee > 0) {\r\n                _RubicPart = (_fixedCryptoFee * _info.RubicFixedCryptoShare) / DENOMINATOR;\r\n\r\n                availableIntegratorCryptoFee[_integrator] += _fixedCryptoFee - _RubicPart;\r\n            }\r\n        } else {\r\n            _fixedCryptoFee = fixedCryptoFee;\r\n            _RubicPart = _fixedCryptoFee;\r\n        }\r\n\r\n        availableRubicCryptoFee += _RubicPart;\r\n\r\n        emit FixedCryptoFee(_RubicPart, _fixedCryptoFee - _RubicPart, _integrator);\r\n\r\n        // Underflow is prevented by sol 0.8\r\n        return (msg.value - _fixedCryptoFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates token fees and accrues them\r\n     * @param _integrator Integrator's address if there is one\r\n     * @param _info A struct with fee info about integrator\r\n     * @param _amountWithFee Total amount passed by the user\r\n     * @param _token The token in which the fees are collected\r\n     * @param _initBlockchainNum Used if the _calculateFee is overriden by\r\n     * WithDestinationFunctionality, otherwise is ignored\r\n     * @return Amount of tokens without fee\r\n     */\r\n    function accrueTokenFees(\r\n        address _integrator,\r\n        IntegratorFeeInfo memory _info,\r\n        uint256 _amountWithFee,\r\n        uint256 _initBlockchainNum,\r\n        address _token\r\n    ) internal returns (uint256) {\r\n        (uint256 _totalFees, uint256 _RubicFee) = _calculateFee(_info, _amountWithFee, _initBlockchainNum);\r\n\r\n        if (_integrator != address(0)) {\r\n            availableIntegratorTokenFee[_token][_integrator] += _totalFees - _RubicFee;\r\n        }\r\n        availableRubicTokenFee[_token] += _RubicFee;\r\n\r\n        emit TokenFee(_RubicFee, _totalFees - _RubicFee, _integrator, _token);\r\n\r\n        return _amountWithFee - _totalFees;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates fee amount for integrator and rubic, used in architecture\r\n     * @param _amountWithFee the users initial amount\r\n     * @param _info the struct with data about integrator\r\n     * @return _totalFee the amount of Rubic + integrator fee\r\n     * @return _RubicFee the amount of Rubic fee only\r\n     */\r\n    function _calculateFeeWithIntegrator(uint256 _amountWithFee, IntegratorFeeInfo memory _info)\r\n        internal\r\n        pure\r\n        returns (uint256 _totalFee, uint256 _RubicFee)\r\n    {\r\n        if (_info.tokenFee > 0) {\r\n            _totalFee = FullMath.mulDiv(_amountWithFee, _info.tokenFee, DENOMINATOR);\r\n\r\n            _RubicFee = FullMath.mulDiv(_totalFee, _info.RubicTokenShare, DENOMINATOR);\r\n        }\r\n    }\r\n\r\n    function _calculateFee(\r\n        IntegratorFeeInfo memory _info,\r\n        uint256 _amountWithFee,\r\n        uint256\r\n    ) internal view returns (uint256 _totalFee, uint256 _RubicFee) {\r\n        if (_info.isIntegrator) {\r\n            (_totalFee, _RubicFee) = _calculateFeeWithIntegrator(_amountWithFee, _info);\r\n        } else {\r\n            _totalFee = FullMath.mulDiv(_amountWithFee, RubicPlatformFee, DENOMINATOR);\r\n\r\n            _RubicFee = _totalFee;\r\n        }\r\n    }\r\n\r\n    /// COLLECT FUNCTIONS ///\r\n\r\n    function _collectIntegrator(address _integrator, address _token) private {\r\n        uint256 _amount;\r\n\r\n        if (_token == address(0)) {\r\n            _amount = availableIntegratorCryptoFee[_integrator];\r\n            availableIntegratorCryptoFee[_integrator] = 0;\r\n            emit FixedCryptoFeeCollected(_amount, _integrator);\r\n        }\r\n\r\n        _amount += availableIntegratorTokenFee[_token][_integrator];\r\n\r\n        if (_amount == 0) {\r\n            revert ZeroAmount();\r\n        }\r\n\r\n        availableIntegratorTokenFee[_token][_integrator] = 0;\r\n\r\n        sendToken(_token, _amount, _integrator);\r\n\r\n        emit IntegratorTokenFeeCollected(_amount, _integrator, _token);\r\n    }\r\n\r\n    /**\r\n     * @dev Integrator can collect fees calling this function\r\n     * @param _token The token to collect fees in\r\n     */\r\n    function collectIntegratorFee(address _token) external nonReentrant {\r\n        _collectIntegrator(msg.sender, _token);\r\n    }\r\n\r\n    /**\r\n     * @dev Managers can collect integrator's fees calling this function\r\n     * Fees go to the integrator\r\n     * @param _integrator Address of the integrator\r\n     * @param _token The token to collect fees in\r\n     */\r\n    function collectIntegratorFee(address _integrator, address _token) external onlyManagerOrAdmin {\r\n        _collectIntegrator(_integrator, _token);\r\n    }\r\n\r\n    /**\r\n     * @dev Calling this function managers can collect Rubic's token fee\r\n     * @param _token The token to collect fees in\r\n     */\r\n    function collectRubicFee(address _token) external onlyManagerOrAdmin {\r\n        uint256 _amount = availableRubicTokenFee[_token];\r\n        if (_amount == 0) {\r\n            revert ZeroAmount();\r\n        }\r\n\r\n        availableRubicTokenFee[_token] = 0;\r\n        sendToken(_token, _amount, msg.sender);\r\n\r\n        emit RubicTokenFeeCollected(_amount, _token);\r\n    }\r\n\r\n    /**\r\n     * @dev Calling this function managers can collect Rubic's fixed crypto fee\r\n     */\r\n    function collectRubicCryptoFee() external onlyManagerOrAdmin {\r\n        uint256 _cryptoFee = availableRubicCryptoFee;\r\n        availableRubicCryptoFee = 0;\r\n\r\n        sendToken(address(0), _cryptoFee, msg.sender);\r\n\r\n        emit FixedCryptoFeeCollected(_cryptoFee, msg.sender);\r\n    }\r\n\r\n    /// CONTROL FUNCTIONS ///\r\n\r\n    function pauseExecution() external onlyManagerOrAdmin {\r\n        _pause();\r\n    }\r\n\r\n    function unpauseExecution() external onlyManagerOrAdmin {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @dev Sets fee info associated with an integrator\r\n     * @param _integrator Address of the integrator\r\n     * @param _info Struct with fee info\r\n     */\r\n    function setIntegratorInfo(address _integrator, IntegratorFeeInfo memory _info) external onlyManagerOrAdmin {\r\n        if (_info.tokenFee > DENOMINATOR) {\r\n            revert FeeTooHigh();\r\n        }\r\n        if (_info.RubicTokenShare > DENOMINATOR || _info.RubicFixedCryptoShare > DENOMINATOR) {\r\n            revert ShareTooHigh();\r\n        }\r\n\r\n        integratorToFeeInfo[_integrator] = _info;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets fixed crypto fee\r\n     * @param _fixedCryptoFee Fixed crypto fee\r\n     */\r\n    function setFixedCryptoFee(uint256 _fixedCryptoFee) external onlyManagerOrAdmin {\r\n        fixedCryptoFee = _fixedCryptoFee;\r\n    }\r\n\r\n    function setRubicPlatformFee(uint256 _platformFee) external onlyManagerOrAdmin {\r\n        if (_platformFee > DENOMINATOR) {\r\n            revert FeeTooHigh();\r\n        }\r\n\r\n        RubicPlatformFee = _platformFee;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes requirement for minimal token amount on transfers\r\n     * @param _token The token address to setup\r\n     * @param _minTokenAmount Amount of tokens\r\n     */\r\n    function setMinTokenAmount(address _token, uint256 _minTokenAmount) external onlyManagerOrAdmin {\r\n        if (_minTokenAmount > maxTokenAmount[_token]) {\r\n            // can be equal in case we want them to be zero\r\n            revert MinMustBeLowerThanMax();\r\n        }\r\n        minTokenAmount[_token] = _minTokenAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes requirement for maximum token amount on transfers\r\n     * @param _token The token address to setup\r\n     * @param _maxTokenAmount Amount of tokens\r\n     */\r\n    function setMaxTokenAmount(address _token, uint256 _maxTokenAmount) external onlyManagerOrAdmin {\r\n        if (_maxTokenAmount < minTokenAmount[_token]) {\r\n            // can be equal in case we want them to be zero\r\n            revert MaxMustBeBiggerThanMin();\r\n        }\r\n        maxTokenAmount[_token] = _maxTokenAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Appends new available routers\r\n     * @param _routers Routers addresses to add\r\n     */\r\n    function addAvailableRouters(address[] memory _routers) external onlyManagerOrAdmin {\r\n        uint256 length = _routers.length;\r\n        for (uint256 i; i < length; ) {\r\n            address _router = _routers[i];\r\n            if (_router == address(0)) {\r\n                revert ZeroAddress();\r\n            }\r\n            // Check that router exists is performed inside the library\r\n            availableRouters.add(_router);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes existing available routers\r\n     * @param _routers Routers addresses to remove\r\n     */\r\n    function removeAvailableRouters(address[] memory _routers) external onlyManagerOrAdmin {\r\n        uint256 length = _routers.length;\r\n        for (uint256 i; i < length; ) {\r\n            // Check that router exists is performed inside the library\r\n            availableRouters.remove(_routers[i]);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers admin role\r\n     * @param _newAdmin New admin's address\r\n     */\r\n    function transferAdmin(address _newAdmin) external onlyAdmin {\r\n        _revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _grantRole(DEFAULT_ADMIN_ROLE, _newAdmin);\r\n    }\r\n\r\n    /// VIEW FUNCTIONS ///\r\n\r\n    /**\r\n     * @return Available routers\r\n     */\r\n    function getAvailableRouters() external view returns (address[] memory) {\r\n        return availableRouters.values();\r\n    }\r\n\r\n    /**\r\n     * @notice Used in modifiers\r\n     * @dev Function to check if address is belongs to manager or admin role\r\n     */\r\n    function checkIsManagerOrAdmin() internal view {\r\n        if (!(hasRole(MANAGER_ROLE, msg.sender) || hasRole(DEFAULT_ADMIN_ROLE, msg.sender))) {\r\n            revert NotAManager();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Used in modifiers\r\n     * @dev Function to check if address is belongs to default admin role\r\n     */\r\n    function checkIsAdmin() internal view {\r\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) {\r\n            revert NotAnAdmin();\r\n        }\r\n    }\r\n\r\n    function sendToken(\r\n        address _token,\r\n        uint256 _amount,\r\n        address _receiver\r\n    ) internal virtual {\r\n        if (_token == address(0)) {\r\n            AddressUpgradeable.sendValue(payable(_receiver), _amount);\r\n        } else {\r\n            IERC20Upgradeable(_token).safeTransfer(_receiver, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Plain fallback function to receive native\r\n     */\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev Plain fallback function\r\n     */\r\n    fallback() external {}\r\n}\r\n"
        },
        "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
        },
        "rubic-bridge-base/contracts/libraries/FullMath.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/// @title Contains 512-bit math functions\r\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\r\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\r\nlibrary FullMath {\r\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n    /// @param a The multiplicand\r\n    /// @param b The multiplier\r\n    /// @param denominator The divisor\r\n    /// @return result The 256-bit result\r\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n    function mulDiv(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = a * b\r\n            // Compute the product mod 2**256 and mod 2**256 - 1\r\n            // then use the Chinese Remainder Theorem to reconstruct\r\n            // the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2**256 + prod0\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(a, b, not(0))\r\n                prod0 := mul(a, b)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division\r\n            if (prod1 == 0) {\r\n                require(denominator > 0);\r\n                assembly {\r\n                    result := div(prod0, denominator)\r\n                }\r\n                return result;\r\n            }\r\n\r\n            // Make sure the result is less than 2**256.\r\n            // Also prevents denominator == 0\r\n            require(denominator > prod1);\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0]\r\n            // Compute remainder using mulmod\r\n            uint256 remainder;\r\n            assembly {\r\n                remainder := mulmod(a, b, denominator)\r\n            }\r\n            // Subtract 256 bit number from 512 bit number\r\n            assembly {\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator\r\n            // Compute largest power of two divisor of denominator.\r\n            // Always >= 1.\r\n            uint256 twos = (0 - denominator) & denominator;\r\n            // Divide denominator by power of two\r\n            assembly {\r\n                denominator := div(denominator, twos)\r\n            }\r\n\r\n            // Divide [prod1 prod0] by the factors of two\r\n            assembly {\r\n                prod0 := div(prod0, twos)\r\n            }\r\n            // Shift in bits from prod1 into prod0. For this we need\r\n            // to flip `twos` such that it is 2**256 / twos.\r\n            // If twos is zero, then it becomes one\r\n            assembly {\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2**256\r\n            // Now that denominator is an odd number, it has an inverse\r\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n            // Compute the inverse by starting with a seed that is correct\r\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n            uint256 inv = (3 * denominator) ^ 2;\r\n            // Now use Newton-Raphson iteration to improve the precision.\r\n            // Thanks to Hensel's lifting lemma, this also works in modular\r\n            // arithmetic, doubling the correct bits in each step.\r\n            inv *= 2 - denominator * inv; // inverse mod 2**8\r\n            inv *= 2 - denominator * inv; // inverse mod 2**16\r\n            inv *= 2 - denominator * inv; // inverse mod 2**32\r\n            inv *= 2 - denominator * inv; // inverse mod 2**64\r\n            inv *= 2 - denominator * inv; // inverse mod 2**128\r\n            inv *= 2 - denominator * inv; // inverse mod 2**256\r\n\r\n            // Because the division is now exact we can divide by multiplying\r\n            // with the modular inverse of denominator. This will give us the\r\n            // correct result modulo 2**256. Since the precoditions guarantee\r\n            // that the outcome is less than 2**256, this is the final result.\r\n            // We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inv;\r\n            return result;\r\n        }\r\n    }\r\n}\r\n"
        },
        "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "contracts/test/Encode.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ncontract Encode {\n    bytes4 private constant FUNC_SELECTOR =\n        bytes4(keccak256('swapExactTokensForTokens(uint256,uint256,address[],address,uint256)'));\n    bytes4 private constant FUNC_SELECTOR_NATIVE =\n        bytes4(keccak256('swapExactETHForTokens(uint256,address[],address,uint256)'));\n\n    function encode(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to\n    ) external pure returns (bytes memory) {\n        bytes memory data = abi.encodeWithSelector(FUNC_SELECTOR, amountIn, amountOutMin, path, to, type(uint256).max);\n        return data;\n    }\n\n    function encodeNative(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to\n    ) external pure returns (bytes memory) {\n        bytes memory data = abi.encodeWithSelector(FUNC_SELECTOR_NATIVE, amountOutMin, path, to, type(uint256).max);\n        return data;\n    }\n}"
        },
        "contracts/test/TestERC20.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ncontract TestERC20 {\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor() {\n        mint(msg.sender, 100000000000 ether);\n    }\n\n    function decimals() external pure returns (uint256) {\n        return 18;\n    }\n\n    function mint(address to, uint256 amount) public {\n        uint256 balanceNext = balanceOf[to] + amount;\n        require(balanceNext >= amount, 'overflow balance');\n        balanceOf[to] = balanceNext;\n    }\n\n    function transfer(address recipient, uint256 amount) external returns (bool) {\n        uint256 balanceBefore = balanceOf[msg.sender];\n        require(balanceBefore >= amount, 'insufficient balance');\n        balanceOf[msg.sender] = balanceBefore - amount;\n\n        uint256 balanceRecipient = balanceOf[recipient];\n        require(balanceRecipient + amount >= balanceRecipient, 'recipient balance overflow');\n        if (!isDeflationary) {\n            balanceOf[recipient] = balanceRecipient + amount;\n        } else {\n            balanceOf[recipient] = balanceRecipient + (amount - (amount * 5) / 100);\n        }\n\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) external returns (bool) {\n        allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    bool isDeflationary = false;\n\n    function setDefl() external {\n        isDeflationary = true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool) {\n        uint256 allowanceBefore = allowance[sender][msg.sender];\n        require(allowanceBefore >= amount, 'allowance insufficient');\n\n        allowance[sender][msg.sender] = allowanceBefore - amount;\n\n        uint256 balanceRecipient = balanceOf[recipient];\n        require(balanceRecipient + amount >= balanceRecipient, 'overflow balance recipient');\n        if (!isDeflationary) {\n            balanceOf[recipient] = balanceRecipient + amount;\n        } else {\n            balanceOf[recipient] = balanceRecipient + (amount - (amount * 5) / 100);\n        }\n        uint256 balanceSender = balanceOf[sender];\n        require(balanceSender >= amount, 'underflow balance sender');\n        balanceOf[sender] = balanceSender - amount;\n\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n}\n"
        },
        "contracts/test/WETH9.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.4.22;\n\ncontract WETH9 {\n    string public name = 'Wrapped Ether';\n    string public symbol = 'WETH';\n    uint8 public decimals = 18;\n\n    event Approval(address indexed src, address indexed guy, uint256 wad);\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\n    event Deposit(address indexed dst, uint256 wad);\n    event Withdrawal(address indexed src, uint256 wad);\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint256 wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        payable(msg.sender).transfer(wad);\n        emit Withdrawal(msg.sender, wad);\n    }\n\n    function mint(uint256 amount) public {\n        uint256 balanceNext = balanceOf[msg.sender] + amount;\n        require(balanceNext >= amount, 'overflow balance');\n        balanceOf[msg.sender] = balanceNext;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function approve(address guy, uint256 wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        emit Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint256 wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) public returns (bool) {\n        require(balanceOf[src] >= wad);\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 10000
        },
        "metadata": {
            "bytecodeHash": "none"
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "storageLayout"
                ],
                "": [
                    "ast"
                ]
            }
        }
    }
}