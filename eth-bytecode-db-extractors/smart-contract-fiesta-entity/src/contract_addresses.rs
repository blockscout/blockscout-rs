//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use super::sea_orm_active_enums::{Status, VerificationMethod};
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "contract_addresses")]
pub struct Model {
    #[sea_orm(
        primary_key,
        auto_increment = false,
        column_type = "Binary(BlobSize::Blob(None))"
    )]
    pub contract_address: Vec<u8>,
    pub verification_method: VerificationMethod,
    pub status: Status,
    pub log: Option<String>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub creation_input: Option<Vec<u8>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::solidity_multiples::Entity")]
    SolidityMultiples,
    #[sea_orm(has_many = "super::solidity_singles::Entity")]
    SoliditySingles,
    #[sea_orm(has_many = "super::solidity_standards::Entity")]
    SolidityStandards,
    #[sea_orm(has_many = "super::vyper_singles::Entity")]
    VyperSingles,
}

impl Related<super::solidity_multiples::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SolidityMultiples.def()
    }
}

impl Related<super::solidity_singles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SoliditySingles.def()
    }
}

impl Related<super::solidity_standards::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SolidityStandards.def()
    }
}

impl Related<super::vyper_singles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VyperSingles.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
