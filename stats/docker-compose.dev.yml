version: '3.9'

services:
  db-init:
    image: postgres:15
    volumes:
      - ./data/blockscout-db:/var/lib/postgresql/data
    entrypoint:
      - sh
      - -c
      - |
        chown -R 2000:2000 /var/lib/postgresql/data

  db:
    depends_on:
      db-init:
        condition: service_completed_successfully
    image: postgres:15
    user: 2000:2000
    shm_size: 256m
    restart: always
    container_name: 'db'
    command: postgres -c 'max_connections=200' -c 'client_connection_check_interval=60000'
    environment:
      POSTGRES_DB: 'blockscout'
      POSTGRES_USER: 'blockscout'
      POSTGRES_PASSWORD: 'ceWb1MeLBEeOIfk65gU8EjF8'
    ports:
      - target: 5432
        published: 7432
    volumes:
      - ./data/blockscout-db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U blockscout -d blockscout" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    depends_on:
      - db
    image: blockscout/blockscout:6.4.0
    links:
      - db:database
    # extra_hosts:
    #   - 'host.docker.internal:host-gateway'
    environment:
      DATABASE_URL: postgresql://blockscout:ceWb1MeLBEeOIfk65gU8EjF8@db:5432/blockscout
      ETHEREUM_JSONRPC_VARIANT: erigon
      # set to some working ethereum node
      ETHEREUM_JSONRPC_HTTP_URL: http://host.docker.internal:8545/
      ETHEREUM_JSONRPC_TRACE_URL: http://host.docker.internal:8545/
      # preferrably set to some relatively recent block (e.g. few days before running)
      # for quicker start and less disk usage
      FIRST_BLOCK: 6153000
      ECTO_USE_SSL: false
      PORT: 4000
    ports:
      - 80:4000
    command:
      [
        "/bin/sh",
        "-c",
        "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
      ]

  stats-db-init:
    image: postgres:15
    volumes:
      - ./data/stats-db:/var/lib/postgresql/data
    entrypoint:
      - sh
      - -c
      - |
        chown -R 2000:2000 /var/lib/postgresql/data

  stats-db:
    depends_on:
      stats-db-init:
        condition: service_completed_successfully
    image: postgres:15
    user: 2000:2000
    shm_size: 256m
    restart: always
    container_name: 'stats-db'
    command: postgres -c 'max_connections=200'
    environment:
      POSTGRES_DB: 'stats'
      POSTGRES_USER: 'stats'
      POSTGRES_PASSWORD: 'n0uejXPl61ci6ldCuE2gQU5Y'
    ports:
      - target: 5432
        published: 7433
    volumes:
      - ./data/stats-db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U stats -d stats" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  stats:
    depends_on:
      - stats-db
      - backend
    build: .
    pull_policy: always
    platform: linux/amd64
    restart: always
    container_name: 'stats'
    # extra_hosts:
    #   - 'host.docker.internal:host-gateway'
    environment:
      - STATS__DB_URL=postgres://stats:n0uejXPl61ci6ldCuE2gQU5Y@stats-db:5432/stats
      - STATS__BLOCKSCOUT_DB_URL=${STATS__BLOCKSCOUT_DB_URL:-postgresql://blockscout:ceWb1MeLBEeOIfk65gU8EjF8@db:5432/blockscout}
      - STATS__CREATE_DATABASE=true
      - STATS__RUN_MIGRATIONS=true
      - STATS__SERVER__HTTP__ENABLED=true
      - STATS__SERVER__HTTP__ADDR=0.0.0.0:8050
      - STATS__SERVER__HTTP__MAX_BODY_SIZE=2097152
      # - STATS__FORCE_UPDATE_ON_START=true
      - RUST_BACKTRACE=1
    ports:
      - 8080:8050
