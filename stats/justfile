default:
    just --list --unsorted

db-host := env_var_or_default('DB_HOST', "localhost")
db-port := env_var_or_default('DB_PORT', "5432")
db-user := env_var_or_default('DB_USER', "postgres")
db-password := env_var_or_default('DB_PASSWORD', "admin")
db-name := env_var_or_default('DB_NAME', "stats")
export DATABASE_URL := "postgres://" + db-user + ":" + db-password + "@" + db-host + ":" + db-port + "/" + db-name
export RUST_LOG := env_var_or_default('RUST_LOG', "error")
export RUST_BACKTRACE := env_var_or_default('RUST_BACKTRACE', "0")

docker-name := env_var_or_default('DOCKER_NAME', "stats-postgres")
test-db-port := env_var_or_default('TEST_DB_PORT', "9439")

docker-build-dev *args:
    docker compose -f docker-compose.dev.yml build

docker-run-dev *args:
    docker compose -f docker-compose.dev.yml up

start-postgres:
    # we run it in --rm mode, so all data will be deleted after stopping
    docker run -p {{db-port}}:5432 --name {{docker-name}} -e POSTGRES_PASSWORD={{db-password}} -e POSTGRES_USER={{db-user}} --rm -d postgres:17.5 -N 500
    sleep 3
    # wait for postgres to start, but only if db_name is not empty
    $SHELL -c '[[ -z "{{db-name}}" ]] || docker exec -it {{docker-name}} psql -U postgres -c "create database {{db-name}};"'

stop-postgres:
    docker kill {{docker-name}}

start-test-postgres:
    just db-port="{{test-db-port}}" db-name="" docker-name="{{docker-name}}-test" start-postgres

stop-test-postgres:
    just docker-name="{{docker-name}}-test" stop-postgres

test *args:
    cargo test {{args}} -- --include-ignored --nocapture

test-with-db *args:
    # remove db from previous run (if failed)
    -just                                           stop-test-postgres              2> /dev/null
    just                                            start-postgres-and-build-tests
    just db-port="{{test-db-port}}" db-name=""      test                            {{args}}

start-postgres-and-build-tests:
    #!/bin/bash -eux
    just start-test-postgres &
    cargo build --tests &
    trap 'kill $(jobs -pr) || true' EXIT
    wait
    echo "finished postgres wait"

check-envs:
    VALIDATE_ONLY=true cargo run --bin env-docs-generation

generate-envs:
    cargo run --bin env-docs-generation

restart-generate-entities: 
    -just stop-postgres
    just start-postgres
    just stats/migrate-up
    just stats/generate-entities
    just stop-postgres

run-multichain:
    STATS__MULTICHAIN_MODE=true \
    STATS__DB_URL={{DATABASE_URL}} \
    STATS__INDEXER_DB_URL=postgresql://postgres:admin@localhost:9433/multichain_aggregator \
    STATS__CREATE_DATABASE=true \
    STATS__RUN_MIGRATIONS=true \
    STATS__SERVER__HTTP__ENABLED=true \
    STATS__SERVER__HTTP__ADDR=0.0.0.0:8080 \
    STATS__SERVER__HTTP__MAX_BODY_SIZE=2097152 \
    cargo run --bin stats-server
    